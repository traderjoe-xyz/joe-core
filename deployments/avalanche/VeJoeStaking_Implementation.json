{
  "address": "0x1Bf56B7C132B5cC920236AE629C8A93d9E7831e7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCapPct",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxCapPct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accVeJoePerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdateRewardVars",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "speedUpThreshold",
          "type": "uint256"
        }
      ],
      "name": "UpdateSpeedUpThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "veJoePerSharePerSec",
          "type": "uint256"
        }
      ],
      "name": "UpdateVeJoePerSharePerSec",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_VEJOE_PER_SHARE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VEJOE_PER_SHARE_PER_SEC_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accVeJoePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPendingVeJoe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_joe",
          "type": "address"
        },
        {
          "internalType": "contract VeJoeToken",
          "name": "_veJoe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_veJoePerSharePerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_speedUpVeJoePerSharePerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_speedUpThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_speedUpDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCapPct",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joe",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCapPct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCapPct",
          "type": "uint256"
        }
      ],
      "name": "setMaxCapPct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_speedUpThreshold",
          "type": "uint256"
        }
      ],
      "name": "setSpeedUpThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_veJoePerSharePerSec",
          "type": "uint256"
        }
      ],
      "name": "setVeJoePerSharePerSec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "speedUpDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "speedUpThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "speedUpVeJoePerSharePerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewardVars",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upperLimitMaxCapPct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upperLimitVeJoePerSharePerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "speedUpEndTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veJoe",
      "outputs": [
        {
          "internalType": "contract VeJoeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veJoePerSharePerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffc308e885219b9db3bf78591d10e82a74aa50be5674dc7d3464b11d280b1a0e",
  "receipt": {
    "to": null,
    "from": "0x1d9D82344E76769EB727521822D1EacB834A9024",
    "contractAddress": "0x1Bf56B7C132B5cC920236AE629C8A93d9E7831e7",
    "transactionIndex": 0,
    "gasUsed": "2823534",
    "logsBloom": "0x
    "blockHash": "0xe9b4293331c02bf54b7702611bed7a6f5f4beeb81ab39ab7b7f8961b1248f92c",
    "transactionHash": "0xffc308e885219b9db3bf78591d10e82a74aa50be5674dc7d3464b11d280b1a0e",
    "logs": [],
    "blockNumber": 12199789,
    "cumulativeGasUsed": "2823534",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c17aac81e711d81979123d5e77bb91fd",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCapPct\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxCapPct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accVeJoePerShare\",\"type\":\"uint256\"}],\"name\":\"UpdateRewardVars\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"speedUpThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdateSpeedUpThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veJoePerSharePerSec\",\"type\":\"uint256\"}],\"name\":\"UpdateVeJoePerSharePerSec\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_VEJOE_PER_SHARE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VEJOE_PER_SHARE_PER_SEC_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accVeJoePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingVeJoe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_joe\",\"type\":\"address\"},{\"internalType\":\"contract VeJoeToken\",\"name\":\"_veJoe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_veJoePerSharePerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_speedUpVeJoePerSharePerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_speedUpThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_speedUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCapPct\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joe\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCapPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCapPct\",\"type\":\"uint256\"}],\"name\":\"setMaxCapPct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_speedUpThreshold\",\"type\":\"uint256\"}],\"name\":\"setSpeedUpThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_veJoePerSharePerSec\",\"type\":\"uint256\"}],\"name\":\"setVeJoePerSharePerSec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"speedUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"speedUpThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"speedUpVeJoePerSharePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardVars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperLimitMaxCapPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperLimitVeJoePerSharePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"speedUpEndTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veJoe\",\"outputs\":[{\"internalType\":\"contract VeJoeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veJoePerSharePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"deposit(uint256)\":{\"params\":{\"_amount\":\"The amount of JOE to deposit\"}},\"getPendingVeJoe(address)\":{\"params\":{\"_user\":\"The user to lookup\"},\"returns\":{\"_0\":\"The number of pending veJOE tokens for `_user`\"}},\"initialize(address,address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_joe\":\"Address of the JOE token contract\",\"_maxCapPct\":\"Maximum limit of veJOE user can have as percentage points of staked JOE\",\"_speedUpDuration\":\"Length of time a user receives speed up benefits\",\"_speedUpThreshold\":\"Percentage of total staked JOE user has to deposit receive speed up\",\"_speedUpVeJoePerSharePerSec\":\"Similar to `_veJoePerSharePerSec` but for speed up\",\"_veJoe\":\"Address of the veJOE token contract\",\"_veJoePerSharePerSec\":\"veJOE per sec per JOE staked, scaled to `VEJOE_PER_SHARE_PER_SEC_PRECISION`\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMaxCapPct(uint256)\":{\"params\":{\"_maxCapPct\":\"The new maxCapPct\"}},\"setSpeedUpThreshold(uint256)\":{\"params\":{\"_speedUpThreshold\":\"The new speedUpThreshold\"}},\"setVeJoePerSharePerSec(uint256)\":{\"params\":{\"_veJoePerSharePerSec\":\"The new veJoePerSharePerSec\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of JOE to unstake\"}}},\"stateVariables\":{\"speedUpThreshold\":{\"details\":\"Specifically, user has to deposit at least `speedUpThreshold/100 * userStakedJoe` JOE. The only exception is the user will also receive speed up benefits if they are depositing with zero balance\"}},\"title\":\"Vote Escrow Joe Staking\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ACC_VEJOE_PER_SHARE_PRECISION()\":{\"notice\":\"Precision of `accVeJoePerShare`\"},\"VEJOE_PER_SHARE_PER_SEC_PRECISION()\":{\"notice\":\"Precision of `veJoePerSharePerSec`\"},\"accVeJoePerShare()\":{\"notice\":\"The accrued veJoe per share, scaled to `ACC_VEJOE_PER_SHARE_PRECISION`\"},\"claim()\":{\"notice\":\"Claim any pending veJOE\"},\"deposit(uint256)\":{\"notice\":\"Deposits JOE to start staking for veJOE. Note that any pending veJOE will also be claimed in the process.\"},\"getPendingVeJoe(address)\":{\"notice\":\"Get the pending amount of veJOE for a given user\"},\"initialize(address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize with needed parameters\"},\"lastRewardTimestamp()\":{\"notice\":\"The last time that the reward variables were updated\"},\"maxCapPct()\":{\"notice\":\"The maximum limit of veJOE user can have as percentage points of staked JOE For example, if user has `n` JOE staked, they can own a maximum of `n * maxCapPct / 100` veJOE.\"},\"setMaxCapPct(uint256)\":{\"notice\":\"Set maxCapPct\"},\"setSpeedUpThreshold(uint256)\":{\"notice\":\"Set speedUpThreshold\"},\"setVeJoePerSharePerSec(uint256)\":{\"notice\":\"Set veJoePerSharePerSec\"},\"speedUpDuration()\":{\"notice\":\"The length of time a user receives speed up benefits\"},\"speedUpThreshold()\":{\"notice\":\"Percentage of user's current staked JOE user has to deposit in order to start receiving speed up benefits, in parts per 100.\"},\"speedUpVeJoePerSharePerSec()\":{\"notice\":\"Speed up veJOE per sec per JOE staked, scaled to `VEJOE_PER_SHARE_PER_SEC_PRECISION`\"},\"updateRewardVars()\":{\"notice\":\"Update reward variables\"},\"upperLimitMaxCapPct()\":{\"notice\":\"The upper limit of `maxCapPct`\"},\"upperLimitVeJoePerSharePerSec()\":{\"notice\":\"The upper limit of `veJoePerSharePerSec` and `speedUpVeJoePerSharePerSec`\"},\"veJoePerSharePerSec()\":{\"notice\":\"veJOE per sec per JOE staked, scaled to `VEJOE_PER_SHARE_PER_SEC_PRECISION`\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw staked JOE. Note that unstaking any amount of JOE means you will lose all of your current veJOE.\"}},\"notice\":\"Stake JOE to earn veJOE, which you can use to earn higher farm yields and gain voting power. Note that unstaking any amount of JOE will burn all of your existing veJOE.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VeJoeStaking.sol\":\"VeJoeStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe422bf8bc61fe71acb27de4631400cdbb9b532df4de4f255eab093ac356f9745\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe9ecc18d06bcc5aa48c40a98333540248b6c1c18ecb6262329c06d3f0cbb45ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xae7044b7c89ed74327b0979ae6f317c65d87b8d17a42d0c62d698d77d5de5511\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8457e15aa90badabe0d6ef6f572f1ebd47bebf156921c825ae6e009dda15b706\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/VeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./interfaces/IVeERC20.sol\\\";\\n\\n/// @title VeERC20\\n/// @notice Modified version of ERC20 where transfers and allowances are disabled.\\n/// @dev Only minting and burning are allowed. The hook `_beforeTokenOperation` and\\n/// `_afterTokenOperation` methods are called before and after minting/burning respectively.\\ncontract VeERC20 is Context, IVeERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /// @dev Emitted when `value` tokens are burned and minted\\n    event Burn(address indexed account, uint256 value);\\n    event Mint(address indexed beneficiary, uint256 value);\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenOperation(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Mint(account, amount);\\n\\n        _afterTokenOperation(account, _balances[account]);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenOperation(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Burn(account, amount);\\n\\n        _afterTokenOperation(account, _balances[account]);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any minting and burning.\\n     * @param from the account transferring tokens\\n     * @param to the account receiving tokens\\n     * @param amount the amount being minted or burned\\n     */\\n    function _beforeTokenOperation(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any minting and burning.\\n     * @param account the account being affected\\n     * @param newBalance the new balance of `account` after minting/burning\\n     */\\n    function _afterTokenOperation(address account, uint256 newBalance) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe8bf7cf219dcded51c42c13eb8b6c3a73507f6881992ddfb472b754d2e537fc1\",\"license\":\"MIT\"},\"contracts/VeJoeStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./VeJoeToken.sol\\\";\\n\\n/// @title Vote Escrow Joe Staking\\n/// @author Trader Joe\\n/// @notice Stake JOE to earn veJOE, which you can use to earn higher farm yields and gain\\n/// voting power. Note that unstaking any amount of JOE will burn all of your existing veJOE.\\ncontract VeJoeStaking is Initializable, OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice Info for each user\\n    /// `balance`: Amount of JOE currently staked by user\\n    /// `rewardDebt`: The reward debt of the user\\n    /// `lastClaimTimestamp`: The timestamp of user's last claim or withdraw\\n    /// `speedUpEndTimestamp`: The timestamp when user stops receiving speed up benefits, or\\n    /// zero if user is not currently receiving speed up benefits\\n    struct UserInfo {\\n        uint256 balance;\\n        uint256 rewardDebt;\\n        uint256 lastClaimTimestamp;\\n        uint256 speedUpEndTimestamp;\\n        /**\\n         * @notice We do some fancy math here. Basically, any point in time, the amount of veJOE\\n         * entitled to a user but is pending to be distributed is:\\n         *\\n         *   pendingReward = pendingBaseReward + pendingSpeedUpReward\\n         *\\n         *   pendingBaseReward = (user.balance * accVeJoePerShare) - user.rewardDebt\\n         *\\n         *   if user.speedUpEndTimestamp != 0:\\n         *     speedUpCeilingTimestamp = min(block.timestamp, user.speedUpEndTimestamp)\\n         *     speedUpSecondsElapsed = speedUpCeilingTimestamp - user.lastClaimTimestamp\\n         *     pendingSpeedUpReward = speedUpSecondsElapsed * user.balance * speedUpVeJoePerSharePerSec\\n         *   else:\\n         *     pendingSpeedUpReward = 0\\n         */\\n    }\\n\\n    IERC20Upgradeable public joe;\\n    VeJoeToken public veJoe;\\n\\n    /// @notice The maximum limit of veJOE user can have as percentage points of staked JOE\\n    /// For example, if user has `n` JOE staked, they can own a maximum of `n * maxCapPct / 100` veJOE.\\n    uint256 public maxCapPct;\\n\\n    /// @notice The upper limit of `maxCapPct`\\n    uint256 public upperLimitMaxCapPct;\\n\\n    /// @notice The accrued veJoe per share, scaled to `ACC_VEJOE_PER_SHARE_PRECISION`\\n    uint256 public accVeJoePerShare;\\n\\n    /// @notice Precision of `accVeJoePerShare`\\n    uint256 public ACC_VEJOE_PER_SHARE_PRECISION;\\n\\n    /// @notice The last time that the reward variables were updated\\n    uint256 public lastRewardTimestamp;\\n\\n    /// @notice veJOE per sec per JOE staked, scaled to `VEJOE_PER_SHARE_PER_SEC_PRECISION`\\n    uint256 public veJoePerSharePerSec;\\n\\n    /// @notice Speed up veJOE per sec per JOE staked, scaled to `VEJOE_PER_SHARE_PER_SEC_PRECISION`\\n    uint256 public speedUpVeJoePerSharePerSec;\\n\\n    /// @notice The upper limit of `veJoePerSharePerSec` and `speedUpVeJoePerSharePerSec`\\n    uint256 public upperLimitVeJoePerSharePerSec;\\n\\n    /// @notice Precision of `veJoePerSharePerSec`\\n    uint256 public VEJOE_PER_SHARE_PER_SEC_PRECISION;\\n\\n    /// @notice Percentage of user's current staked JOE user has to deposit in order to start\\n    /// receiving speed up benefits, in parts per 100.\\n    /// @dev Specifically, user has to deposit at least `speedUpThreshold/100 * userStakedJoe` JOE.\\n    /// The only exception is the user will also receive speed up benefits if they are depositing\\n    /// with zero balance\\n    uint256 public speedUpThreshold;\\n\\n    /// @notice The length of time a user receives speed up benefits\\n    uint256 public speedUpDuration;\\n\\n    mapping(address => UserInfo) public userInfos;\\n\\n    event Claim(address indexed user, uint256 amount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event UpdateMaxCapPct(address indexed user, uint256 maxCapPct);\\n    event UpdateRewardVars(uint256 lastRewardTimestamp, uint256 accVeJoePerShare);\\n    event UpdateSpeedUpThreshold(address indexed user, uint256 speedUpThreshold);\\n    event UpdateVeJoePerSharePerSec(address indexed user, uint256 veJoePerSharePerSec);\\n    event Withdraw(address indexed user, uint256 withdrawAmount, uint256 burnAmount);\\n\\n    /// @notice Initialize with needed parameters\\n    /// @param _joe Address of the JOE token contract\\n    /// @param _veJoe Address of the veJOE token contract\\n    /// @param _veJoePerSharePerSec veJOE per sec per JOE staked, scaled to `VEJOE_PER_SHARE_PER_SEC_PRECISION`\\n    /// @param _speedUpVeJoePerSharePerSec Similar to `_veJoePerSharePerSec` but for speed up\\n    /// @param _speedUpThreshold Percentage of total staked JOE user has to deposit receive speed up\\n    /// @param _speedUpDuration Length of time a user receives speed up benefits\\n    /// @param _maxCapPct Maximum limit of veJOE user can have as percentage points of staked JOE\\n    function initialize(\\n        IERC20Upgradeable _joe,\\n        VeJoeToken _veJoe,\\n        uint256 _veJoePerSharePerSec,\\n        uint256 _speedUpVeJoePerSharePerSec,\\n        uint256 _speedUpThreshold,\\n        uint256 _speedUpDuration,\\n        uint256 _maxCapPct\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        require(address(_joe) != address(0), \\\"VeJoeStaking: unexpected zero address for _joe\\\");\\n        require(address(_veJoe) != address(0), \\\"VeJoeStaking: unexpected zero address for _veJoe\\\");\\n\\n        upperLimitVeJoePerSharePerSec = 1e36;\\n        require(\\n            _veJoePerSharePerSec <= upperLimitVeJoePerSharePerSec,\\n            \\\"VeJoeStaking: expected _veJoePerSharePerSec to be <= 1e36\\\"\\n        );\\n        require(\\n            _speedUpVeJoePerSharePerSec <= upperLimitVeJoePerSharePerSec,\\n            \\\"VeJoeStaking: expected _speedUpVeJoePerSharePerSec to be <= 1e36\\\"\\n        );\\n\\n        require(\\n            _speedUpThreshold != 0 && _speedUpThreshold <= 100,\\n            \\\"VeJoeStaking: expected _speedUpThreshold to be > 0 and <= 100\\\"\\n        );\\n\\n        require(_speedUpDuration <= 365 days, \\\"VeJoeStaking: expected _speedUpDuration to be <= 365 days\\\");\\n\\n        upperLimitMaxCapPct = 10000000;\\n        require(\\n            _maxCapPct != 0 && _maxCapPct <= upperLimitMaxCapPct,\\n            \\\"VeJoeStaking: expected _maxCapPct to be non-zero and <= 10000000\\\"\\n        );\\n\\n        maxCapPct = _maxCapPct;\\n        speedUpThreshold = _speedUpThreshold;\\n        speedUpDuration = _speedUpDuration;\\n        joe = _joe;\\n        veJoe = _veJoe;\\n        veJoePerSharePerSec = _veJoePerSharePerSec;\\n        speedUpVeJoePerSharePerSec = _speedUpVeJoePerSharePerSec;\\n        lastRewardTimestamp = block.timestamp;\\n        ACC_VEJOE_PER_SHARE_PRECISION = 1e18;\\n        VEJOE_PER_SHARE_PER_SEC_PRECISION = 1e18;\\n    }\\n\\n    /// @notice Set maxCapPct\\n    /// @param _maxCapPct The new maxCapPct\\n    function setMaxCapPct(uint256 _maxCapPct) external onlyOwner {\\n        require(_maxCapPct > maxCapPct, \\\"VeJoeStaking: expected new _maxCapPct to be greater than existing maxCapPct\\\");\\n        require(\\n            _maxCapPct != 0 && _maxCapPct <= upperLimitMaxCapPct,\\n            \\\"VeJoeStaking: expected new _maxCapPct to be non-zero and <= 10000000\\\"\\n        );\\n        maxCapPct = _maxCapPct;\\n        emit UpdateMaxCapPct(_msgSender(), _maxCapPct);\\n    }\\n\\n    /// @notice Set veJoePerSharePerSec\\n    /// @param _veJoePerSharePerSec The new veJoePerSharePerSec\\n    function setVeJoePerSharePerSec(uint256 _veJoePerSharePerSec) external onlyOwner {\\n        require(\\n            _veJoePerSharePerSec <= upperLimitVeJoePerSharePerSec,\\n            \\\"VeJoeStaking: expected _veJoePerSharePerSec to be <= 1e36\\\"\\n        );\\n        updateRewardVars();\\n        veJoePerSharePerSec = _veJoePerSharePerSec;\\n        emit UpdateVeJoePerSharePerSec(_msgSender(), _veJoePerSharePerSec);\\n    }\\n\\n    /// @notice Set speedUpThreshold\\n    /// @param _speedUpThreshold The new speedUpThreshold\\n    function setSpeedUpThreshold(uint256 _speedUpThreshold) external onlyOwner {\\n        require(\\n            _speedUpThreshold != 0 && _speedUpThreshold <= 100,\\n            \\\"VeJoeStaking: expected _speedUpThreshold to be > 0 and <= 100\\\"\\n        );\\n        speedUpThreshold = _speedUpThreshold;\\n        emit UpdateSpeedUpThreshold(_msgSender(), _speedUpThreshold);\\n    }\\n\\n    /// @notice Deposits JOE to start staking for veJOE. Note that any pending veJOE\\n    /// will also be claimed in the process.\\n    /// @param _amount The amount of JOE to deposit\\n    function deposit(uint256 _amount) external {\\n        require(_amount > 0, \\\"VeJoeStaking: expected deposit amount to be greater than zero\\\");\\n\\n        updateRewardVars();\\n\\n        UserInfo storage userInfo = userInfos[_msgSender()];\\n\\n        if (_getUserHasNonZeroBalance(_msgSender())) {\\n            // Transfer to the user their pending veJOE before updating their UserInfo\\n            _claim();\\n\\n            // We need to update user's `lastClaimTimestamp` to now to prevent\\n            // passive veJOE accrual if user hit their max cap.\\n            userInfo.lastClaimTimestamp = block.timestamp;\\n\\n            uint256 userStakedJoe = userInfo.balance;\\n\\n            // User is eligible for speed up benefits if `_amount` is at least\\n            // `speedUpThreshold / 100 * userStakedJoe`\\n            if (_amount.mul(100) >= speedUpThreshold.mul(userStakedJoe)) {\\n                userInfo.speedUpEndTimestamp = block.timestamp.add(speedUpDuration);\\n            }\\n        } else {\\n            // If user is depositing with zero balance, they will automatically\\n            // receive speed up benefits\\n            userInfo.speedUpEndTimestamp = block.timestamp.add(speedUpDuration);\\n            userInfo.lastClaimTimestamp = block.timestamp;\\n        }\\n\\n        userInfo.balance = userInfo.balance.add(_amount);\\n        userInfo.rewardDebt = accVeJoePerShare.mul(userInfo.balance).div(ACC_VEJOE_PER_SHARE_PRECISION);\\n\\n        joe.safeTransferFrom(_msgSender(), address(this), _amount);\\n\\n        emit Deposit(_msgSender(), _amount);\\n    }\\n\\n    /// @notice Withdraw staked JOE. Note that unstaking any amount of JOE means you will\\n    /// lose all of your current veJOE.\\n    /// @param _amount The amount of JOE to unstake\\n    function withdraw(uint256 _amount) external {\\n        require(_amount > 0, \\\"VeJoeStaking: expected withdraw amount to be greater than zero\\\");\\n\\n        UserInfo storage userInfo = userInfos[_msgSender()];\\n\\n        require(\\n            userInfo.balance >= _amount,\\n            \\\"VeJoeStaking: cannot withdraw greater amount of JOE than currently staked\\\"\\n        );\\n        updateRewardVars();\\n\\n        // Note that we don't need to claim as the user's veJOE balance will be reset to 0\\n        userInfo.balance = userInfo.balance.sub(_amount);\\n        userInfo.rewardDebt = accVeJoePerShare.mul(userInfo.balance).div(ACC_VEJOE_PER_SHARE_PRECISION);\\n        userInfo.lastClaimTimestamp = block.timestamp;\\n        userInfo.speedUpEndTimestamp = 0;\\n\\n        // Burn the user's current veJOE balance\\n        uint256 userVeJoeBalance = veJoe.balanceOf(_msgSender());\\n        veJoe.burnFrom(_msgSender(), userVeJoeBalance);\\n\\n        // Send user their requested amount of staked JOE\\n        joe.safeTransfer(_msgSender(), _amount);\\n\\n        emit Withdraw(_msgSender(), _amount, userVeJoeBalance);\\n    }\\n\\n    /// @notice Claim any pending veJOE\\n    function claim() external {\\n        require(_getUserHasNonZeroBalance(_msgSender()), \\\"VeJoeStaking: cannot claim veJOE when no JOE is staked\\\");\\n        updateRewardVars();\\n        _claim();\\n    }\\n\\n    /// @notice Get the pending amount of veJOE for a given user\\n    /// @param _user The user to lookup\\n    /// @return The number of pending veJOE tokens for `_user`\\n    function getPendingVeJoe(address _user) public view returns (uint256) {\\n        if (!_getUserHasNonZeroBalance(_user)) {\\n            return 0;\\n        }\\n\\n        UserInfo memory user = userInfos[_user];\\n\\n        // Calculate amount of pending base veJOE\\n        uint256 _accVeJoePerShare = accVeJoePerShare;\\n        uint256 secondsElapsed = block.timestamp.sub(lastRewardTimestamp);\\n        if (secondsElapsed > 0) {\\n            _accVeJoePerShare = _accVeJoePerShare.add(\\n                secondsElapsed.mul(veJoePerSharePerSec).mul(ACC_VEJOE_PER_SHARE_PRECISION).div(\\n                    VEJOE_PER_SHARE_PER_SEC_PRECISION\\n                )\\n            );\\n        }\\n        uint256 pendingBaseVeJoe = _accVeJoePerShare.mul(user.balance).div(ACC_VEJOE_PER_SHARE_PRECISION).sub(\\n            user.rewardDebt\\n        );\\n\\n        // Calculate amount of pending speed up veJOE\\n        uint256 pendingSpeedUpVeJoe;\\n        if (user.speedUpEndTimestamp != 0) {\\n            uint256 speedUpCeilingTimestamp = block.timestamp > user.speedUpEndTimestamp\\n                ? user.speedUpEndTimestamp\\n                : block.timestamp;\\n            uint256 speedUpSecondsElapsed = speedUpCeilingTimestamp.sub(user.lastClaimTimestamp);\\n            uint256 speedUpAccVeJoePerShare = speedUpSecondsElapsed.mul(speedUpVeJoePerSharePerSec);\\n            pendingSpeedUpVeJoe = speedUpAccVeJoePerShare.mul(user.balance).div(VEJOE_PER_SHARE_PER_SEC_PRECISION);\\n        }\\n\\n        uint256 pendingVeJoe = pendingBaseVeJoe.add(pendingSpeedUpVeJoe);\\n\\n        // Get the user's current veJOE balance\\n        uint256 userVeJoeBalance = veJoe.balanceOf(_user);\\n\\n        // This is the user's max veJOE cap multiplied by 100\\n        uint256 scaledUserMaxVeJoeCap = user.balance.mul(maxCapPct);\\n\\n        if (userVeJoeBalance.mul(100) >= scaledUserMaxVeJoeCap) {\\n            // User already holds maximum amount of veJOE so there is no pending veJOE\\n            return 0;\\n        } else if (userVeJoeBalance.add(pendingVeJoe).mul(100) > scaledUserMaxVeJoeCap) {\\n            return scaledUserMaxVeJoeCap.sub(userVeJoeBalance.mul(100)).div(100);\\n        } else {\\n            return pendingVeJoe;\\n        }\\n    }\\n\\n    /// @notice Update reward variables\\n    function updateRewardVars() public {\\n        if (block.timestamp <= lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        if (joe.balanceOf(address(this)) == 0) {\\n            lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 secondsElapsed = block.timestamp.sub(lastRewardTimestamp);\\n        accVeJoePerShare = accVeJoePerShare.add(\\n            secondsElapsed.mul(veJoePerSharePerSec).mul(ACC_VEJOE_PER_SHARE_PRECISION).div(\\n                VEJOE_PER_SHARE_PER_SEC_PRECISION\\n            )\\n        );\\n        lastRewardTimestamp = block.timestamp;\\n\\n        emit UpdateRewardVars(lastRewardTimestamp, accVeJoePerShare);\\n    }\\n\\n    /// @notice Checks to see if a given user currently has staked JOE\\n    /// @param _user The user address to check\\n    /// @return Whether `_user` currently has staked JOE\\n    function _getUserHasNonZeroBalance(address _user) private view returns (bool) {\\n        return userInfos[_user].balance > 0;\\n    }\\n\\n    /// @dev Helper to claim any pending veJOE\\n    function _claim() private {\\n        uint256 veJoeToClaim = getPendingVeJoe(_msgSender());\\n\\n        UserInfo storage userInfo = userInfos[_msgSender()];\\n\\n        userInfo.rewardDebt = accVeJoePerShare.mul(userInfo.balance).div(ACC_VEJOE_PER_SHARE_PRECISION);\\n\\n        // If user's speed up period has ended, reset `speedUpEndTimestamp` to 0\\n        if (userInfo.speedUpEndTimestamp != 0 && block.timestamp >= userInfo.speedUpEndTimestamp) {\\n            userInfo.speedUpEndTimestamp = 0;\\n        }\\n\\n        if (veJoeToClaim > 0) {\\n            userInfo.lastClaimTimestamp = block.timestamp;\\n\\n            veJoe.mint(_msgSender(), veJoeToClaim);\\n            emit Claim(_msgSender(), veJoeToClaim);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0abcc4ad25919af6de84a339d7608e54b33f2cba2b549981f1d36eb5dc86489e\",\"license\":\"MIT\"},\"contracts/VeJoeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./VeERC20.sol\\\";\\n\\ninterface IBoostedMasterChefJoe {\\n    function updateFactor(address, uint256) external;\\n}\\n\\n/// @title Vote Escrow Joe Token - veJOE\\n/// @author Trader Joe\\n/// @notice Infinite supply, used to receive extra farming yields and voting power\\ncontract VeJoeToken is VeERC20(\\\"VeJoeToken\\\", \\\"veJOE\\\"), Ownable {\\n    /// @notice the BoostedMasterChefJoe contract\\n    IBoostedMasterChefJoe public boostedMasterChef;\\n\\n    event UpdateBoostedMasterChefJoe(address indexed user, address boostedMasterChef);\\n\\n    /// @dev Creates `_amount` token to `_to`. Must only be called by the owner (VeJoeStaking)\\n    /// @param _to The address that will receive the mint\\n    /// @param _amount The amount to be minted\\n    function mint(address _to, uint256 _amount) external onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n    /// @dev Destroys `_amount` tokens from `_from`. Callable only by the owner (VeJoeStaking)\\n    /// @param _from The address that will burn tokens\\n    /// @param _amount The amount to be burned\\n    function burnFrom(address _from, uint256 _amount) external onlyOwner {\\n        _burn(_from, _amount);\\n    }\\n\\n    /// @dev Sets the address of the master chef contract this updates\\n    /// @param _boostedMasterChef the address of BoostedMasterChefJoe\\n    function setBoostedMasterChefJoe(address _boostedMasterChef) external onlyOwner {\\n        // We allow 0 address here if we want to disable the callback operations\\n        boostedMasterChef = IBoostedMasterChefJoe(_boostedMasterChef);\\n\\n        emit UpdateBoostedMasterChefJoe(_msgSender(), _boostedMasterChef);\\n    }\\n\\n    function _afterTokenOperation(address _account, uint256 _newBalance) internal override {\\n        if (address(boostedMasterChef) != address(0)) {\\n            boostedMasterChef.updateFactor(_account, _newBalance);\\n        }\\n    }\\n\\n    function renounceOwnership() public override onlyOwner {\\n        revert(\\\"VeJoeToken: Cannot renounce, can only transfer ownership\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xcdc826c6d9c34e93c0dabf06924e6d9e754bee1b0ee22579a6203b91ed4dd764\",\"license\":\"MIT\"},\"contracts/interfaces/IVeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/// @title Vote Escrow ERC20 Token Interface\\n/// @author Trader Joe\\n/// @notice Interface of a ERC20 token used for vote escrow. Notice that transfers and\\n/// allowances are disabled\\ninterface IVeERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2b30d2f4eeecb3f5f63c09c4233d525952fb8f5624f3cf072c7d53c3460803a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061324e806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063ce785cc311610097578063edbf4ac211610071578063edbf4ac2146104cc578063f2fde38b14610562578063f8077fae146105a6578063fc2f53b6146105c45761018e565b8063ce785cc314610462578063db550ab914610490578063ea5254ad146104ae5761018e565b80638da5cb5b1461034c578063b19a3b2c14610380578063b6b55f251461039e578063b985a3a0146103cc578063bc109e7414610400578063c39d13d2146104345761018e565b80633a9d49b01161014b57806351f5958a1161012557806351f5958a146102d8578063715018a6146102f65780638728ec17146103005780638c30fe501461032e5761018e565b80633a9d49b01461024357806343b0215f146102615780634e71d92d146102ce5761018e565b806301e02729146101935780630c7aaf02146101b15780632db9680a146101cf5780632e1a7d4d146101ed5780632edf2cff1461021b578063328fa46114610239575b600080fd5b61019b61061c565b6040518082815260200191505060405180910390f35b6101b9610622565b6040518082815260200191505060405180910390f35b6101d7610628565b6040518082815260200191505060405180910390f35b6102196004803603602081101561020357600080fd5b810190808035906020019092919050505061062e565b005b6102236109d4565b6040518082815260200191505060405180910390f35b6102416109da565b005b61024b610b7e565b6040518082815260200191505060405180910390f35b6102a36004803603602081101561027757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b84565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b6102d6610bb4565b005b6102e0610c2b565b6040518082815260200191505060405180910390f35b6102fe610c31565b005b61032c6004803603602081101561031657600080fd5b8101908080359060200190929190505050610dbc565b005b610336610fa7565b6040518082815260200191505060405180910390f35b610354610fad565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610388610fd7565b6040518082815260200191505060405180910390f35b6103ca600480360360208110156103b457600080fd5b8101908080359060200190929190505050610fdd565b005b6103d4611233565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610408611259565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104606004803603602081101561044a57600080fd5b810190808035906020019092919050505061127f565b005b61048e6004803603602081101561047857600080fd5b810190808035906020019092919050505061140f565b005b61049861159b565b6040518082815260200191505060405180910390f35b6104b66115a1565b6040518082815260200191505060405180910390f35b610560600480360360e08110156104e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291905050506115a7565b005b6105a46004803603602081101561057857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a8c565b005b6105ae611c9c565b6040518082815260200191505060405180910390f35b610606600480360360208110156105da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ca2565b6040518082815260200191505060405180910390f35b60715481565b60695481565b60705481565b60008111610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180612ecb603e913960400191505060405180910390fd5b60006072600061069561202a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000154101561072e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526049815260200180612e3e6049913960600191505060405180910390fd5b6107366109da565b61074d82826000015461203290919063ffffffff16565b8160000181905550610782606a54610774836000015460695461207c90919063ffffffff16565b61210290919063ffffffff16565b8160010181905550428160020181905550600081600301819055506000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316107e561202a565b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561082f57600080fd5b505afa158015610843573d6000803e3d6000fd5b505050506040513d602081101561085957600080fd5b81019080805190602001909291905050509050606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc67906108b261202a565b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b5050505061097261092961202a565b84606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661214c9092919063ffffffff16565b61097a61202a565b73ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688483604051808381526020018281526020019250505060405180910390a2505050565b606d5481565b606b5442116109e857610b7c565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d6020811015610a9d57600080fd5b81019080805190602001909291905050501415610ac05742606b81905550610b7c565b6000610ad7606b544261203290919063ffffffff16565b9050610b2a610b19606f54610b0b606a54610afd606c548761207c90919063ffffffff16565b61207c90919063ffffffff16565b61210290919063ffffffff16565b6069546121ee90919063ffffffff16565b60698190555042606b819055507f80412ab714911d3162155311ed4cae780b01a7eb225a1a554126e1a443eeb41a606b54606954604051808381526020018281526020019250505060405180910390a1505b565b606a5481565b60726020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b610bc4610bbf61202a565b612276565b610c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180612ffd6036913960400191505060405180910390fd5b610c216109da565b610c296122c4565b565b60685481565b610c3961202a565b73ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cfb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610dc461202a565b73ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6067548111610ee0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604b81526020018061316b604b913960600191505060405180910390fd5b60008114158015610ef357506068548111155b610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526044815260200180612e876044913960600191505060405180910390fd5b80606781905550610f5761202a565b73ffffffffffffffffffffffffffffffffffffffff167f8d4a57ca749299886997ec990a3f4a210270c58d6f283d4728136ca62c17d1bf826040518082815260200191505060405180910390a250565b606c5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60675481565b60008111611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180612f6c603d913960400191505060405180910390fd5b61103e6109da565b60006072600061104c61202a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061109861109361202a565b612276565b15611109576110a56122c4565b4281600201819055506000816000015490506110cc8160705461207c90919063ffffffff16565b6110e060648561207c90919063ffffffff16565b10611103576110fa607154426121ee90919063ffffffff16565b82600301819055505b50611130565b61111e607154426121ee90919063ffffffff16565b81600301819055504281600201819055505b6111478282600001546121ee90919063ffffffff16565b816000018190555061117c606a5461116e836000015460695461207c90919063ffffffff16565b61210290919063ffffffff16565b81600101819055506111da61118f61202a565b3084606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661249e909392919063ffffffff16565b6111e261202a565b73ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c836040518082815260200191505060405180910390a25050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61128761202a565b73ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611349576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000811415801561135b575060648111155b6113b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180612f2f603d913960400191505060405180910390fd5b806070819055506113bf61202a565b73ffffffffffffffffffffffffffffffffffffffff167fa1363b6f08985047219996aa27aae9e783577d8bb8f96505eb639afe5247c151826040518082815260200191505060405180910390a250565b61141761202a565b73ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b606e54811115611534576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806131e06039913960400191505060405180910390fd5b61153c6109da565b80606c8190555061154b61202a565b73ffffffffffffffffffffffffffffffffffffffff167f6c8f471e789107ccb05a807cb4c0f6b333f6b51380fc2270d777dd3fe255b45a826040518082815260200191505060405180910390a250565b606f5481565b606e5481565b600060019054906101000a900460ff16806115c657506115c561255f565b5b806115dc575060008054906101000a900460ff16155b611631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612fcf602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611681576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611689612576565b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561170f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613104602e913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611795576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806130546030913960400191505060405180910390fd5b6ec097ce7bc90715b34b9f1000000000606e81905550606e54861115611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806131e06039913960400191505060405180910390fd5b606e54851115611861576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001806130846040913960400191505060405180910390fd5b60008414158015611873575060648411155b6118c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180612f2f603d913960400191505060405180910390fd5b6301e13380831115611925576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806131326039913960400191505060405180910390fd5b629896806068819055506000821415801561194257506068548211155b611997576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001806130c46040913960400191505060405180910390fd5b81606781905550836070819055508260718190555087606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085606c8190555084606d8190555042606b81905550670de0b6b3a7640000606a81905550670de0b6b3a7640000606f819055508015611a825760008060016101000a81548160ff0219169083151502179055505b5050505050505050565b611a9461202a565b73ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b56576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612f096026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606b5481565b6000611cad82612276565b611cba5760009050612025565b6000607260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600060695490506000611d4e606b544261203290919063ffffffff16565b90506000811115611dab57611da8611d99606f54611d8b606a54611d7d606c548761207c90919063ffffffff16565b61207c90919063ffffffff16565b61210290919063ffffffff16565b836121ee90919063ffffffff16565b91505b6000611dee8460200151611de0606a54611dd288600001518861207c90919063ffffffff16565b61210290919063ffffffff16565b61203290919063ffffffff16565b9050600080856060015114611e7d57600085606001514211611e105742611e16565b85606001515b90506000611e3187604001518361203290919063ffffffff16565b90506000611e4a606d548361207c90919063ffffffff16565b9050611e77606f54611e698a600001518461207c90919063ffffffff16565b61210290919063ffffffff16565b93505050505b6000611e9282846121ee90919063ffffffff16565b90506000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611f1f57600080fd5b505afa158015611f33573d6000803e3d6000fd5b505050506040513d6020811015611f4957600080fd5b810190808051906020019092919050505090506000611f77606754896000015161207c90919063ffffffff16565b905080611f8e60648461207c90919063ffffffff16565b10611fa457600098505050505050505050612025565b80611fcb6064611fbd86866121ee90919063ffffffff16565b61207c90919063ffffffff16565b11156120195761200a6064611ffc611fed60648661207c90919063ffffffff16565b8461203290919063ffffffff16565b61210290919063ffffffff16565b98505050505050505050612025565b82985050505050505050505b919050565b600033905090565b600061207483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612684565b905092915050565b60008083141561208f57600090506120fc565b60008284029050828482816120a057fe5b04146120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806130336021913960400191505060405180910390fd5b809150505b92915050565b600061214483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612744565b905092915050565b6121e98363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061280a565b505050565b60008082840190508381101561226c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600080607260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154119050919050565b60006122d66122d161202a565b611ca2565b90506000607260006122e661202a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061234f606a54612341836000015460695461207c90919063ffffffff16565b61210290919063ffffffff16565b81600101819055506000816003015414158015612370575080600301544210155b1561238057600081600301819055505b600082111561249a57428160020181905550606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f196123d861202a565b846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561242c57600080fd5b505af1158015612440573d6000803e3d6000fd5b5050505061244c61202a565b73ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4836040518082815260200191505060405180910390a25b5050565b612559846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061280a565b50505050565b6000803090506000813b9050600081149250505090565b600060019054906101000a900460ff1680612595575061259461255f565b5b806125ab575060008054906101000a900460ff16155b612600576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612fcf602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612650576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6126586128f9565b6126606129f7565b80156126815760008060016101000a81548160ff0219169083151502179055505b50565b6000838311158290612731576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126f65780820151818401526020810190506126db565b50505050905090810190601f1680156127235780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080831182906127f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127b557808201518184015260208101905061279a565b50505050905090810190601f1680156127e25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816127fc57fe5b049050809150509392505050565b600061286c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612b9e9092919063ffffffff16565b90506000815111156128f45780806020019051602081101561288d57600080fd5b81019080805190602001909291905050506128f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806131b6602a913960400191505060405180910390fd5b5b505050565b600060019054906101000a900460ff1680612918575061291761255f565b5b8061292e575060008054906101000a900460ff16155b612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612fcf602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156129d3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156129f45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612a165750612a1561255f565b5b80612a2c575060008054906101000a900460ff16155b612a81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612fcf602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612ad1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000612adb61202a565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015612b9b5760008060016101000a81548160ff0219169083151502179055505b50565b6060612bad8484600085612bb6565b90509392505050565b606082471015612c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612fa96026913960400191505060405180910390fd5b612c1a85612d5e565b612c8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612cdb5780518252602082019150602081019050602083039250612cb8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612d3d576040519150601f19603f3d011682016040523d82523d6000602084013e612d42565b606091505b5091509150612d52828286612d71565b92505050949350505050565b600080823b905060008111915050919050565b60608315612d8157829050612e36565b600083511115612d945782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612dfb578082015181840152602081019050612de0565b50505050905090810190601f168015612e285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b939250505056fe56654a6f655374616b696e673a2063616e6e6f74207769746864726177206772656174657220616d6f756e74206f66204a4f45207468616e2063757272656e746c79207374616b656456654a6f655374616b696e673a206578706563746564206e6577205f6d617843617050637420746f206265206e6f6e2d7a65726f20616e64203c3d20313030303030303056654a6f655374616b696e673a20657870656374656420776974686472617720616d6f756e7420746f2062652067726561746572207468616e207a65726f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737356654a6f655374616b696e673a206578706563746564205f737065656455705468726573686f6c6420746f206265203e203020616e64203c3d2031303056654a6f655374616b696e673a206578706563746564206465706f73697420616d6f756e7420746f2062652067726561746572207468616e207a65726f416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656456654a6f655374616b696e673a2063616e6e6f7420636c61696d2076654a4f45207768656e206e6f204a4f45206973207374616b6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7756654a6f655374616b696e673a20756e6578706563746564207a65726f206164647265737320666f72205f76654a6f6556654a6f655374616b696e673a206578706563746564205f7370656564557056654a6f65506572536861726550657253656320746f206265203c3d203165333656654a6f655374616b696e673a206578706563746564205f6d617843617050637420746f206265206e6f6e2d7a65726f20616e64203c3d20313030303030303056654a6f655374616b696e673a20756e6578706563746564207a65726f206164647265737320666f72205f6a6f6556654a6f655374616b696e673a206578706563746564205f737065656455704475726174696f6e20746f206265203c3d20333635206461797356654a6f655374616b696e673a206578706563746564206e6577205f6d617843617050637420746f2062652067726561746572207468616e206578697374696e67206d61784361705063745361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656456654a6f655374616b696e673a206578706563746564205f76654a6f65506572536861726550657253656320746f206265203c3d2031653336a26469706673582212206e980008aa9998ba5177f88c939e7223a7db1bd35b79f9e1d2befa697827798c64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638da5cb5b116100de578063ce785cc311610097578063edbf4ac211610071578063edbf4ac2146104cc578063f2fde38b14610562578063f8077fae146105a6578063fc2f53b6146105c45761018e565b8063ce785cc314610462578063db550ab914610490578063ea5254ad146104ae5761018e565b80638da5cb5b1461034c578063b19a3b2c14610380578063b6b55f251461039e578063b985a3a0146103cc578063bc109e7414610400578063c39d13d2146104345761018e565b80633a9d49b01161014b57806351f5958a1161012557806351f5958a146102d8578063715018a6146102f65780638728ec17146103005780638c30fe501461032e5761018e565b80633a9d49b01461024357806343b0215f146102615780634e71d92d146102ce5761018e565b806301e02729146101935780630c7aaf02146101b15780632db9680a146101cf5780632e1a7d4d146101ed5780632edf2cff1461021b578063328fa46114610239575b600080fd5b61019b61061c565b6040518082815260200191505060405180910390f35b6101b9610622565b6040518082815260200191505060405180910390f35b6101d7610628565b6040518082815260200191505060405180910390f35b6102196004803603602081101561020357600080fd5b810190808035906020019092919050505061062e565b005b6102236109d4565b6040518082815260200191505060405180910390f35b6102416109da565b005b61024b610b7e565b6040518082815260200191505060405180910390f35b6102a36004803603602081101561027757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b84565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b6102d6610bb4565b005b6102e0610c2b565b6040518082815260200191505060405180910390f35b6102fe610c31565b005b61032c6004803603602081101561031657600080fd5b8101908080359060200190929190505050610dbc565b005b610336610fa7565b6040518082815260200191505060405180910390f35b610354610fad565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610388610fd7565b6040518082815260200191505060405180910390f35b6103ca600480360360208110156103b457600080fd5b8101908080359060200190929190505050610fdd565b005b6103d4611233565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610408611259565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104606004803603602081101561044a57600080fd5b810190808035906020019092919050505061127f565b005b61048e6004803603602081101561047857600080fd5b810190808035906020019092919050505061140f565b005b61049861159b565b6040518082815260200191505060405180910390f35b6104b66115a1565b6040518082815260200191505060405180910390f35b610560600480360360e08110156104e257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291905050506115a7565b005b6105a46004803603602081101561057857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a8c565b005b6105ae611c9c565b6040518082815260200191505060405180910390f35b610606600480360360208110156105da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ca2565b6040518082815260200191505060405180910390f35b60715481565b60695481565b60705481565b60008111610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180612ecb603e913960400191505060405180910390fd5b60006072600061069561202a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160000154101561072e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526049815260200180612e3e6049913960600191505060405180910390fd5b6107366109da565b61074d82826000015461203290919063ffffffff16565b8160000181905550610782606a54610774836000015460695461207c90919063ffffffff16565b61210290919063ffffffff16565b8160010181905550428160020181905550600081600301819055506000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082316107e561202a565b6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561082f57600080fd5b505afa158015610843573d6000803e3d6000fd5b505050506040513d602081101561085957600080fd5b81019080805190602001909291905050509050606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc67906108b261202a565b836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561090657600080fd5b505af115801561091a573d6000803e3d6000fd5b5050505061097261092961202a565b84606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661214c9092919063ffffffff16565b61097a61202a565b73ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688483604051808381526020018281526020019250505060405180910390a2505050565b606d5481565b606b5442116109e857610b7c565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d6020811015610a9d57600080fd5b81019080805190602001909291905050501415610ac05742606b81905550610b7c565b6000610ad7606b544261203290919063ffffffff16565b9050610b2a610b19606f54610b0b606a54610afd606c548761207c90919063ffffffff16565b61207c90919063ffffffff16565b61210290919063ffffffff16565b6069546121ee90919063ffffffff16565b60698190555042606b819055507f80412ab714911d3162155311ed4cae780b01a7eb225a1a554126e1a443eeb41a606b54606954604051808381526020018281526020019250505060405180910390a1505b565b606a5481565b60726020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b610bc4610bbf61202a565b612276565b610c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180612ffd6036913960400191505060405180910390fd5b610c216109da565b610c296122c4565b565b60685481565b610c3961202a565b73ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cfb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610dc461202a565b73ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6067548111610ee0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604b81526020018061316b604b913960600191505060405180910390fd5b60008114158015610ef357506068548111155b610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526044815260200180612e876044913960600191505060405180910390fd5b80606781905550610f5761202a565b73ffffffffffffffffffffffffffffffffffffffff167f8d4a57ca749299886997ec990a3f4a210270c58d6f283d4728136ca62c17d1bf826040518082815260200191505060405180910390a250565b606c5481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60675481565b60008111611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180612f6c603d913960400191505060405180910390fd5b61103e6109da565b60006072600061104c61202a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061109861109361202a565b612276565b15611109576110a56122c4565b4281600201819055506000816000015490506110cc8160705461207c90919063ffffffff16565b6110e060648561207c90919063ffffffff16565b10611103576110fa607154426121ee90919063ffffffff16565b82600301819055505b50611130565b61111e607154426121ee90919063ffffffff16565b81600301819055504281600201819055505b6111478282600001546121ee90919063ffffffff16565b816000018190555061117c606a5461116e836000015460695461207c90919063ffffffff16565b61210290919063ffffffff16565b81600101819055506111da61118f61202a565b3084606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661249e909392919063ffffffff16565b6111e261202a565b73ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c836040518082815260200191505060405180910390a25050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61128761202a565b73ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611349576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000811415801561135b575060648111155b6113b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180612f2f603d913960400191505060405180910390fd5b806070819055506113bf61202a565b73ffffffffffffffffffffffffffffffffffffffff167fa1363b6f08985047219996aa27aae9e783577d8bb8f96505eb639afe5247c151826040518082815260200191505060405180910390a250565b61141761202a565b73ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b606e54811115611534576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806131e06039913960400191505060405180910390fd5b61153c6109da565b80606c8190555061154b61202a565b73ffffffffffffffffffffffffffffffffffffffff167f6c8f471e789107ccb05a807cb4c0f6b333f6b51380fc2270d777dd3fe255b45a826040518082815260200191505060405180910390a250565b606f5481565b606e5481565b600060019054906101000a900460ff16806115c657506115c561255f565b5b806115dc575060008054906101000a900460ff16155b611631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612fcf602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611681576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611689612576565b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561170f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613104602e913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611795576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806130546030913960400191505060405180910390fd5b6ec097ce7bc90715b34b9f1000000000606e81905550606e54861115611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806131e06039913960400191505060405180910390fd5b606e54851115611861576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001806130846040913960400191505060405180910390fd5b60008414158015611873575060648411155b6118c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603d815260200180612f2f603d913960400191505060405180910390fd5b6301e13380831115611925576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806131326039913960400191505060405180910390fd5b629896806068819055506000821415801561194257506068548211155b611997576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001806130c46040913960400191505060405180910390fd5b81606781905550836070819055508260718190555087606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085606c8190555084606d8190555042606b81905550670de0b6b3a7640000606a81905550670de0b6b3a7640000606f819055508015611a825760008060016101000a81548160ff0219169083151502179055505b5050505050505050565b611a9461202a565b73ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611b56576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611bdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612f096026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606b5481565b6000611cad82612276565b611cba5760009050612025565b6000607260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050600060695490506000611d4e606b544261203290919063ffffffff16565b90506000811115611dab57611da8611d99606f54611d8b606a54611d7d606c548761207c90919063ffffffff16565b61207c90919063ffffffff16565b61210290919063ffffffff16565b836121ee90919063ffffffff16565b91505b6000611dee8460200151611de0606a54611dd288600001518861207c90919063ffffffff16565b61210290919063ffffffff16565b61203290919063ffffffff16565b9050600080856060015114611e7d57600085606001514211611e105742611e16565b85606001515b90506000611e3187604001518361203290919063ffffffff16565b90506000611e4a606d548361207c90919063ffffffff16565b9050611e77606f54611e698a600001518461207c90919063ffffffff16565b61210290919063ffffffff16565b93505050505b6000611e9282846121ee90919063ffffffff16565b90506000606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611f1f57600080fd5b505afa158015611f33573d6000803e3d6000fd5b505050506040513d6020811015611f4957600080fd5b810190808051906020019092919050505090506000611f77606754896000015161207c90919063ffffffff16565b905080611f8e60648461207c90919063ffffffff16565b10611fa457600098505050505050505050612025565b80611fcb6064611fbd86866121ee90919063ffffffff16565b61207c90919063ffffffff16565b11156120195761200a6064611ffc611fed60648661207c90919063ffffffff16565b8461203290919063ffffffff16565b61210290919063ffffffff16565b98505050505050505050612025565b82985050505050505050505b919050565b600033905090565b600061207483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612684565b905092915050565b60008083141561208f57600090506120fc565b60008284029050828482816120a057fe5b04146120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806130336021913960400191505060405180910390fd5b809150505b92915050565b600061214483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612744565b905092915050565b6121e98363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061280a565b505050565b60008082840190508381101561226c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600080607260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154119050919050565b60006122d66122d161202a565b611ca2565b90506000607260006122e661202a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061234f606a54612341836000015460695461207c90919063ffffffff16565b61210290919063ffffffff16565b81600101819055506000816003015414158015612370575080600301544210155b1561238057600081600301819055505b600082111561249a57428160020181905550606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f196123d861202a565b846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561242c57600080fd5b505af1158015612440573d6000803e3d6000fd5b5050505061244c61202a565b73ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4836040518082815260200191505060405180910390a25b5050565b612559846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061280a565b50505050565b6000803090506000813b9050600081149250505090565b600060019054906101000a900460ff1680612595575061259461255f565b5b806125ab575060008054906101000a900460ff16155b612600576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612fcf602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612650576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6126586128f9565b6126606129f7565b80156126815760008060016101000a81548160ff0219169083151502179055505b50565b6000838311158290612731576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126f65780820151818401526020810190506126db565b50505050905090810190601f1680156127235780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080831182906127f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127b557808201518184015260208101905061279a565b50505050905090810190601f1680156127e25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816127fc57fe5b049050809150509392505050565b600061286c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612b9e9092919063ffffffff16565b90506000815111156128f45780806020019051602081101561288d57600080fd5b81019080805190602001909291905050506128f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806131b6602a913960400191505060405180910390fd5b5b505050565b600060019054906101000a900460ff1680612918575061291761255f565b5b8061292e575060008054906101000a900460ff16155b612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612fcf602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156129d3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156129f45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612a165750612a1561255f565b5b80612a2c575060008054906101000a900460ff16155b612a81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612fcf602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612ad1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000612adb61202a565b905080603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508015612b9b5760008060016101000a81548160ff0219169083151502179055505b50565b6060612bad8484600085612bb6565b90509392505050565b606082471015612c11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612fa96026913960400191505060405180910390fd5b612c1a85612d5e565b612c8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612cdb5780518252602082019150602081019050602083039250612cb8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612d3d576040519150601f19603f3d011682016040523d82523d6000602084013e612d42565b606091505b5091509150612d52828286612d71565b92505050949350505050565b600080823b905060008111915050919050565b60608315612d8157829050612e36565b600083511115612d945782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612dfb578082015181840152602081019050612de0565b50505050905090810190601f168015612e285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b939250505056fe56654a6f655374616b696e673a2063616e6e6f74207769746864726177206772656174657220616d6f756e74206f66204a4f45207468616e2063757272656e746c79207374616b656456654a6f655374616b696e673a206578706563746564206e6577205f6d617843617050637420746f206265206e6f6e2d7a65726f20616e64203c3d20313030303030303056654a6f655374616b696e673a20657870656374656420776974686472617720616d6f756e7420746f2062652067726561746572207468616e207a65726f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737356654a6f655374616b696e673a206578706563746564205f737065656455705468726573686f6c6420746f206265203e203020616e64203c3d2031303056654a6f655374616b696e673a206578706563746564206465706f73697420616d6f756e7420746f2062652067726561746572207468616e207a65726f416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656456654a6f655374616b696e673a2063616e6e6f7420636c61696d2076654a4f45207768656e206e6f204a4f45206973207374616b6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7756654a6f655374616b696e673a20756e6578706563746564207a65726f206164647265737320666f72205f76654a6f6556654a6f655374616b696e673a206578706563746564205f7370656564557056654a6f65506572536861726550657253656320746f206265203c3d203165333656654a6f655374616b696e673a206578706563746564205f6d617843617050637420746f206265206e6f6e2d7a65726f20616e64203c3d20313030303030303056654a6f655374616b696e673a20756e6578706563746564207a65726f206164647265737320666f72205f6a6f6556654a6f655374616b696e673a206578706563746564205f737065656455704475726174696f6e20746f206265203c3d20333635206461797356654a6f655374616b696e673a206578706563746564206e6577205f6d617843617050637420746f2062652067726561746572207468616e206578697374696e67206d61784361705063745361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656456654a6f655374616b696e673a206578706563746564205f76654a6f65506572536861726550657253656320746f206265203c3d2031653336a26469706673582212206e980008aa9998ba5177f88c939e7223a7db1bd35b79f9e1d2befa697827798c64736f6c63430007060033",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "deposit(uint256)": {
        "params": {
          "_amount": "The amount of JOE to deposit"
        }
      },
      "getPendingVeJoe(address)": {
        "params": {
          "_user": "The user to lookup"
        },
        "returns": {
          "_0": "The number of pending veJOE tokens for `_user`"
        }
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_joe": "Address of the JOE token contract",
          "_maxCapPct": "Maximum limit of veJOE user can have as percentage points of staked JOE",
          "_speedUpDuration": "Length of time a user receives speed up benefits",
          "_speedUpThreshold": "Percentage of total staked JOE user has to deposit receive speed up",
          "_speedUpVeJoePerSharePerSec": "Similar to `_veJoePerSharePerSec` but for speed up",
          "_veJoe": "Address of the veJOE token contract",
          "_veJoePerSharePerSec": "veJOE per sec per JOE staked, scaled to `VEJOE_PER_SHARE_PER_SEC_PRECISION`"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMaxCapPct(uint256)": {
        "params": {
          "_maxCapPct": "The new maxCapPct"
        }
      },
      "setSpeedUpThreshold(uint256)": {
        "params": {
          "_speedUpThreshold": "The new speedUpThreshold"
        }
      },
      "setVeJoePerSharePerSec(uint256)": {
        "params": {
          "_veJoePerSharePerSec": "The new veJoePerSharePerSec"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of JOE to unstake"
        }
      }
    },
    "stateVariables": {
      "speedUpThreshold": {
        "details": "Specifically, user has to deposit at least `speedUpThreshold/100 * userStakedJoe` JOE. The only exception is the user will also receive speed up benefits if they are depositing with zero balance"
      }
    },
    "title": "Vote Escrow Joe Staking",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ACC_VEJOE_PER_SHARE_PRECISION()": {
        "notice": "Precision of `accVeJoePerShare`"
      },
      "VEJOE_PER_SHARE_PER_SEC_PRECISION()": {
        "notice": "Precision of `veJoePerSharePerSec`"
      },
      "accVeJoePerShare()": {
        "notice": "The accrued veJoe per share, scaled to `ACC_VEJOE_PER_SHARE_PRECISION`"
      },
      "claim()": {
        "notice": "Claim any pending veJOE"
      },
      "deposit(uint256)": {
        "notice": "Deposits JOE to start staking for veJOE. Note that any pending veJOE will also be claimed in the process."
      },
      "getPendingVeJoe(address)": {
        "notice": "Get the pending amount of veJOE for a given user"
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize with needed parameters"
      },
      "lastRewardTimestamp()": {
        "notice": "The last time that the reward variables were updated"
      },
      "maxCapPct()": {
        "notice": "The maximum limit of veJOE user can have as percentage points of staked JOE For example, if user has `n` JOE staked, they can own a maximum of `n * maxCapPct / 100` veJOE."
      },
      "setMaxCapPct(uint256)": {
        "notice": "Set maxCapPct"
      },
      "setSpeedUpThreshold(uint256)": {
        "notice": "Set speedUpThreshold"
      },
      "setVeJoePerSharePerSec(uint256)": {
        "notice": "Set veJoePerSharePerSec"
      },
      "speedUpDuration()": {
        "notice": "The length of time a user receives speed up benefits"
      },
      "speedUpThreshold()": {
        "notice": "Percentage of user's current staked JOE user has to deposit in order to start receiving speed up benefits, in parts per 100."
      },
      "speedUpVeJoePerSharePerSec()": {
        "notice": "Speed up veJOE per sec per JOE staked, scaled to `VEJOE_PER_SHARE_PER_SEC_PRECISION`"
      },
      "updateRewardVars()": {
        "notice": "Update reward variables"
      },
      "upperLimitMaxCapPct()": {
        "notice": "The upper limit of `maxCapPct`"
      },
      "upperLimitVeJoePerSharePerSec()": {
        "notice": "The upper limit of `veJoePerSharePerSec` and `speedUpVeJoePerSharePerSec`"
      },
      "veJoePerSharePerSec()": {
        "notice": "veJOE per sec per JOE staked, scaled to `VEJOE_PER_SHARE_PER_SEC_PRECISION`"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw staked JOE. Note that unstaking any amount of JOE means you will lose all of your current veJOE."
      }
    },
    "notice": "Stake JOE to earn veJOE, which you can use to earn higher farm yields and gain voting power. Note that unstaking any amount of JOE will burn all of your existing veJOE.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 376,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 379,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 43,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 55,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 173,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4600,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "joe",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20Upgradeable)519"
      },
      {
        "astId": 4602,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "veJoe",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(VeJoeToken)5616"
      },
      {
        "astId": 4605,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "maxCapPct",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 4608,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "upperLimitMaxCapPct",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 4611,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "accVeJoePerShare",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 4614,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "ACC_VEJOE_PER_SHARE_PRECISION",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 4617,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 4620,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "veJoePerSharePerSec",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 4623,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "speedUpVeJoePerSharePerSec",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 4626,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "upperLimitVeJoePerSharePerSec",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 4629,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "VEJOE_PER_SHARE_PER_SEC_PRECISION",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 4632,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "speedUpThreshold",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 4635,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "speedUpDuration",
        "offset": 0,
        "slot": "113",
        "type": "t_uint256"
      },
      {
        "astId": 4639,
        "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
        "label": "userInfos",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_address,t_struct(UserInfo)4598_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)519": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(VeJoeToken)5616": {
        "encoding": "inplace",
        "label": "contract VeJoeToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)4598_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VeJoeStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)4598_storage"
      },
      "t_struct(UserInfo)4598_storage": {
        "encoding": "inplace",
        "label": "struct VeJoeStaking.UserInfo",
        "members": [
          {
            "astId": 4591,
            "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4593,
            "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4595,
            "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
            "label": "lastClaimTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4597,
            "contract": "contracts/VeJoeStaking.sol:VeJoeStaking",
            "label": "speedUpEndTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}