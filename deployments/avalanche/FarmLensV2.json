{
  "address": "0x317946da018248D7dDBF4ABdb3170F32Aa40C752",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_joe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wavax",
          "type": "address"
        },
        {
          "internalType": "contract IJoePair",
          "name": "_wavaxUsdte",
          "type": "address"
        },
        {
          "internalType": "contract IJoePair",
          "name": "_wavaxUsdce",
          "type": "address"
        },
        {
          "internalType": "contract IJoePair",
          "name": "_wavaxUsdc",
          "type": "address"
        },
        {
          "internalType": "contract IJoeFactory",
          "name": "_joeFactory",
          "type": "address"
        },
        {
          "internalType": "contract IMasterChef",
          "name": "_chefv2",
          "type": "address"
        },
        {
          "internalType": "contract IMasterChef",
          "name": "_chefv3",
          "type": "address"
        },
        {
          "internalType": "contract IBoostedMasterchef",
          "name": "_bmcj",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bmcj",
      "outputs": [
        {
          "internalType": "contract IBoostedMasterchef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chefv2",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chefv3",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "whitelistedPidsV2",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "whitelistedPidsV3",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "whitelistedPidsBMCJ",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllFarmData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "avaxPriceUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "joePriceUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocChefV2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocChefV3",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocBMCJ",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "joePerSecChefV2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "joePerSecChefV3",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "joePerSecBMCJ",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "lpAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token0Address",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token1Address",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "token0Symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "token1Symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "reserveUsd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupplyScaled",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "chefAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chefBalanceScaled",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "chefTotalAlloc",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "chefJoePerSec",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FarmLensV2.FarmInfo[]",
              "name": "farmInfosV2",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "lpAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token0Address",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token1Address",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "token0Symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "token1Symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "reserveUsd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupplyScaled",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "chefAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chefBalanceScaled",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "chefTotalAlloc",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "chefJoePerSec",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FarmLensV2.FarmInfo[]",
              "name": "farmInfosV3",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "lpAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token0Address",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token1Address",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "token0Symbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "token1Symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "reserveUsd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalSupplyScaled",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "chefAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "chefBalanceScaled",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "chefTotalAlloc",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "chefJoePerSec",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "baseAPR",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boostedAPR",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boostFactor",
                  "type": "uint256"
                }
              ],
              "internalType": "struct FarmLensV2.FarmInfoBMCJ[]",
              "name": "farmInfosBMCJ",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct FarmLensV2.AllFarmData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvaxPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBoostedMasterchef",
          "name": "chef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "whitelistedPids",
          "type": "uint256[]"
        }
      ],
      "name": "getBMCJFarmInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1Address",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "token0Symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "token1Symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reserveUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupplyScaled",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "chefAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "chefBalanceScaled",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chefTotalAlloc",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chefJoePerSec",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boostedAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boostFactor",
              "type": "uint256"
            }
          ],
          "internalType": "struct FarmLensV2.FarmInfoBMCJ[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getDerivedAvaxPriceOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "chef",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "whitelistedPids",
          "type": "uint256[]"
        }
      ],
      "name": "getMCFarmInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lpAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1Address",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "token0Symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "token1Symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reserveUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupplyScaled",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "chefAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "chefBalanceScaled",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chefTotalAlloc",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chefJoePerSec",
              "type": "uint256"
            }
          ],
          "internalType": "struct FarmLensV2.FarmInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joeFactory",
      "outputs": [
        {
          "internalType": "contract IJoeFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wavax",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wavaxUsdc",
      "outputs": [
        {
          "internalType": "contract IJoePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wavaxUsdce",
      "outputs": [
        {
          "internalType": "contract IJoePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wavaxUsdte",
      "outputs": [
        {
          "internalType": "contract IJoePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b3c64763a0bba30b3e357e82677689902b55aac189a5af474b2ff0157fa35c2",
  "receipt": {
    "to": null,
    "from": "0x85CF8C61830c276b7D5ee46A7C753BF2464EC25d",
    "contractAddress": "0x317946da018248D7dDBF4ABdb3170F32Aa40C752",
    "transactionIndex": 0,
    "gasUsed": "2517675",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0e36370a9f6de9fb2124eb80621ec2f93b892266b0a7af3e1761a484c83b946f",
    "transactionHash": "0x1b3c64763a0bba30b3e357e82677689902b55aac189a5af474b2ff0157fa35c2",
    "logs": [],
    "blockNumber": 12283251,
    "cumulativeGasUsed": "2517675",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    "0xeD8CBD9F0cE3C6986b22002F03c6475CEb7a6256",
    "0xa389f9430876455c36478deea9769b7ca4e3ddb1",
    "0xf4003F4efBE8691B60249E6afbD307aBE7758adb",
    "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10",
    "0xd6a4F121CA35509aF06A0Be99093d08462f53052",
    "0x188bED1968b795d5c9022F6a0bb5931Ac4c18F00",
    "0x4483f0b6e2F5486D06958C20f8C39A7aBe87bf8F"
  ],
  "numDeployments": 1,
  "solcInputHash": "0a6695ae9c10df28328edf6c934ea56d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_joe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wavax\",\"type\":\"address\"},{\"internalType\":\"contract IJoePair\",\"name\":\"_wavaxUsdte\",\"type\":\"address\"},{\"internalType\":\"contract IJoePair\",\"name\":\"_wavaxUsdce\",\"type\":\"address\"},{\"internalType\":\"contract IJoePair\",\"name\":\"_wavaxUsdc\",\"type\":\"address\"},{\"internalType\":\"contract IJoeFactory\",\"name\":\"_joeFactory\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChef\",\"name\":\"_chefv2\",\"type\":\"address\"},{\"internalType\":\"contract IMasterChef\",\"name\":\"_chefv3\",\"type\":\"address\"},{\"internalType\":\"contract IBoostedMasterchef\",\"name\":\"_bmcj\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bmcj\",\"outputs\":[{\"internalType\":\"contract IBoostedMasterchef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chefv2\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chefv3\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"whitelistedPidsV2\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"whitelistedPidsV3\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"whitelistedPidsBMCJ\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllFarmData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"avaxPriceUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joePriceUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocChefV2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocChefV3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocBMCJ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joePerSecChefV2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joePerSecChefV3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joePerSecBMCJ\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reserveUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyScaled\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chefBalanceScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chefTotalAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chefJoePerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmLensV2.FarmInfo[]\",\"name\":\"farmInfosV2\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reserveUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyScaled\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chefBalanceScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chefTotalAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chefJoePerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmLensV2.FarmInfo[]\",\"name\":\"farmInfosV3\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reserveUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyScaled\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chefBalanceScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chefTotalAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chefJoePerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmLensV2.FarmInfoBMCJ[]\",\"name\":\"farmInfosBMCJ\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FarmLensV2.AllFarmData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvaxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBoostedMasterchef\",\"name\":\"chef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"whitelistedPids\",\"type\":\"uint256[]\"}],\"name\":\"getBMCJFarmInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reserveUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyScaled\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chefBalanceScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chefTotalAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chefJoePerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmLensV2.FarmInfoBMCJ[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDerivedAvaxPriceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"chef\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"whitelistedPids\",\"type\":\"uint256[]\"}],\"name\":\"getMCFarmInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"token0Symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token1Symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reserveUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyScaled\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chefAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chefBalanceScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chefTotalAlloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chefJoePerSec\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmLensV2.FarmInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joeFactory\",\"outputs\":[{\"internalType\":\"contract IJoeFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wavax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wavaxUsdc\",\"outputs\":[{\"internalType\":\"contract IJoePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wavaxUsdce\",\"outputs\":[{\"internalType\":\"contract IJoePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wavaxUsdte\",\"outputs\":[{\"internalType\":\"contract IJoePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAllFarmData(uint256[],uint256[],uint256[],address)\":{\"params\":{\"user\":\"The address of the user, if address(0), returns global info\",\"whitelistedPidsBMCJ\":\"Array of all ids of pools that are whitelisted in BMCJ\",\"whitelistedPidsV2\":\"Array of all ids of pools that are whitelisted in chefV2\",\"whitelistedPidsV3\":\"Array of all ids of pools that are whitelisted in chefV3\"},\"returns\":{\"_0\":\"AllFarmData The information of all the whitelisted farms of MCV2, MCV3 and BMCJ\"}},\"getAvaxPrice()\":{\"returns\":{\"_0\":\"uint256 the avax price, scaled to 18 decimals\"}},\"getBMCJFarmInfos(address,address,uint256[])\":{\"params\":{\"chef\":\"The address of the MasterChef\",\"user\":\"The address of the user, if address(0), returns global info\",\"whitelistedPids\":\"Array of all ids of pools that are whitelisted and valid to have their farm data returned\"},\"returns\":{\"_0\":\"FarmInfoBMCJ The information of all the whitelisted farms of BMCJ\"}},\"getDerivedAvaxPriceOfToken(address)\":{\"params\":{\"token\":\"The address of the token\"},\"returns\":{\"_0\":\"uint256 the token derived price, scaled to 18 decimals\"}},\"getMCFarmInfos(address,uint256[])\":{\"params\":{\"chef\":\"The address of the MasterChef\",\"whitelistedPids\":\"Array of all ids of pools that are whitelisted and valid to have their farm data returned\"},\"returns\":{\"_0\":\"FarmInfo The information of all the whitelisted farms of MCV2 or MCV3\"}},\"getTokenPrice(address)\":{\"params\":{\"token\":\"The address of the token\"},\"returns\":{\"_0\":\"uint256 the USD price of token, scaled to 18 decimals\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAllFarmData(uint256[],uint256[],uint256[],address)\":{\"notice\":\"Get all data needed for useFarms hook.\"},\"getAvaxPrice()\":{\"notice\":\"Returns the price of avax in usd\"},\"getBMCJFarmInfos(address,address,uint256[])\":{\"notice\":\"Returns the farm pairs data for BoostedMasterChefJoe\"},\"getDerivedAvaxPriceOfToken(address)\":{\"notice\":\"Returns the derived price of token, it needs to be paired with wavax\"},\"getMCFarmInfos(address,uint256[])\":{\"notice\":\"Returns the farm pairs data for MCV2 and MCV3\"},\"getTokenPrice(address)\":{\"notice\":\"Returns the USD price of token, it needs to be paired with wavax\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/traderjoe/FarmLensV2.sol\":\"FarmLensV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    // EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa3fb82796e80f566a5c47f9a1f2ade7de7f390dfdc06bea5375112b9f9314f40\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary SafeERC20 {\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: Transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdd77ee6d503b5396208d64e811ee89ca55389c62071003cc223f4ea0029c10ac\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"SafeMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"SafeMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"SafeMath: Mul Overflow\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b > 0, \\\"SafeMath: Div by Zero\\\");\\n        c = a / b;\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"SafeMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n}\\n\\nlibrary SafeMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"SafeMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"SafeMath: Underflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8b8dcb649a07667a9a97c050a374a82389e7a19254abaebedf399c00619042a8\",\"license\":\"MIT\"},\"contracts/traderjoe/FarmLensV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IJoeERC20.sol\\\";\\nimport \\\"./interfaces/IJoePair.sol\\\";\\nimport \\\"./interfaces/IJoeFactory.sol\\\";\\n\\ninterface IMasterChef {\\n    struct PoolInfo {\\n        IJoeERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. JOE to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that JOE distribution occurs.\\n        uint256 accJoePerShare; // Accumulated JOE per share, times 1e12. See below.\\n    }\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function joePerSec() external view returns (uint256);\\n}\\n\\ninterface IBoostedMasterchef {\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 factor;\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken;\\n        uint96 allocPoint;\\n        uint256 accJoePerShare;\\n        uint256 accJoePerFactorPerShare;\\n        uint64 lastRewardTimestamp;\\n        address rewarder;\\n        uint32 veJoeShareBp;\\n        uint256 totalFactor;\\n        uint256 totalLpSupply;\\n    }\\n\\n    function userInfo(uint256 _pid, address user) external view returns (UserInfo memory);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function joePerSec() external view returns (uint256);\\n}\\n\\ncontract FarmLensV2 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct FarmInfo {\\n        uint256 id;\\n        uint256 allocPoint;\\n        address lpAddress;\\n        address token0Address;\\n        address token1Address;\\n        string token0Symbol;\\n        string token1Symbol;\\n        uint256 reserveUsd;\\n        uint256 totalSupplyScaled;\\n        address chefAddress;\\n        uint256 chefBalanceScaled;\\n        uint256 chefTotalAlloc;\\n        uint256 chefJoePerSec;\\n    }\\n\\n    struct FarmInfoBMCJ {\\n        uint256 id;\\n        uint256 allocPoint;\\n        address lpAddress;\\n        address token0Address;\\n        address token1Address;\\n        string token0Symbol;\\n        string token1Symbol;\\n        uint256 reserveUsd;\\n        uint256 totalSupplyScaled;\\n        address chefAddress;\\n        uint256 chefBalanceScaled;\\n        uint256 chefTotalAlloc;\\n        uint256 chefJoePerSec;\\n        uint256 baseAPR;\\n        uint256 boostedAPR;\\n        uint256 boostFactor;\\n    }\\n\\n    struct AllFarmData {\\n        uint256 avaxPriceUsd;\\n        uint256 joePriceUsd;\\n        uint256 totalAllocChefV2;\\n        uint256 totalAllocChefV3;\\n        uint256 totalAllocBMCJ;\\n        uint256 joePerSecChefV2;\\n        uint256 joePerSecChefV3;\\n        uint256 joePerSecBMCJ;\\n        FarmInfo[] farmInfosV2;\\n        FarmInfo[] farmInfosV3;\\n        FarmInfoBMCJ[] farmInfosBMCJ;\\n    }\\n\\n    struct GlobalInfo {\\n        address chef;\\n        uint256 totalAlloc;\\n        uint256 joePerSec;\\n    }\\n\\n    address public immutable joe; // 0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd;\\n    address public immutable wavax; // 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    IJoePair public immutable wavaxUsdte; // 0xeD8CBD9F0cE3C6986b22002F03c6475CEb7a6256\\n    IJoePair public immutable wavaxUsdce; // 0xA389f9430876455C36478DeEa9769B7Ca4E3DDB1\\n    IJoePair public immutable wavaxUsdc; // 0xf4003f4efbe8691b60249e6afbd307abe7758adb\\n    IJoeFactory public immutable joeFactory; // 0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10\\n    IMasterChef public immutable chefv2; // 0xd6a4F121CA35509aF06A0Be99093d08462f53052\\n    IMasterChef public immutable chefv3; // 0x188bED1968b795d5c9022F6a0bb5931Ac4c18F00\\n    IBoostedMasterchef public immutable bmcj; // Not deployed yet\\n\\n    constructor(\\n        address _joe,\\n        address _wavax,\\n        IJoePair _wavaxUsdte,\\n        IJoePair _wavaxUsdce,\\n        IJoePair _wavaxUsdc,\\n        IJoeFactory _joeFactory,\\n        IMasterChef _chefv2,\\n        IMasterChef _chefv3,\\n        IBoostedMasterchef _bmcj\\n    ) public {\\n        joe = _joe;\\n        wavax = _wavax;\\n        wavaxUsdte = _wavaxUsdte;\\n        wavaxUsdce = _wavaxUsdce;\\n        wavaxUsdc = _wavaxUsdc;\\n        joeFactory = _joeFactory;\\n        chefv2 = _chefv2;\\n        chefv3 = _chefv3;\\n        bmcj = _bmcj;\\n    }\\n\\n    /// @notice Returns the price of avax in usd\\n    /// @return uint256 the avax price, scaled to 18 decimals\\n    function getAvaxPrice() external view returns (uint256) {\\n        return _getAvaxPrice();\\n    }\\n\\n    /// @notice Returns the derived price of token, it needs to be paired with wavax\\n    /// @param token The address of the token\\n    /// @return uint256 the token derived price, scaled to 18 decimals\\n    function getDerivedAvaxPriceOfToken(address token) external view returns (uint256) {\\n        return _getDerivedAvaxPriceOfToken(token);\\n    }\\n\\n    /// @notice Returns the USD price of token, it needs to be paired with wavax\\n    /// @param token The address of the token\\n    /// @return uint256 the USD price of token, scaled to 18 decimals\\n    function getTokenPrice(address token) external view returns (uint256) {\\n        return _getDerivedAvaxPriceOfToken(token) * _getAvaxPrice();\\n    }\\n\\n    /// @notice Returns the farm pairs data for MCV2 and MCV3\\n    /// @param chef The address of the MasterChef\\n    /// @param whitelistedPids Array of all ids of pools that are whitelisted and valid to have their farm data returned\\n    /// @return FarmInfo The information of all the whitelisted farms of MCV2 or MCV3\\n    function getMCFarmInfos(IMasterChef chef, uint256[] calldata whitelistedPids)\\n        external\\n        view\\n        returns (FarmInfo[] memory)\\n    {\\n        require(chef == chefv2 || chef == chefv3, \\\"FarmLensV2: only for MCV2 and MCV3\\\");\\n\\n        uint256 avaxPrice = _getAvaxPrice();\\n        return _getMCFarmInfos(chef, avaxPrice, whitelistedPids);\\n    }\\n\\n    /// @notice Returns the farm pairs data for BoostedMasterChefJoe\\n    /// @param chef The address of the MasterChef\\n    /// @param user The address of the user, if address(0), returns global info\\n    /// @param whitelistedPids Array of all ids of pools that are whitelisted and valid to have their farm data returned\\n    /// @return FarmInfoBMCJ The information of all the whitelisted farms of BMCJ\\n    function getBMCJFarmInfos(\\n        IBoostedMasterchef chef,\\n        address user,\\n        uint256[] calldata whitelistedPids\\n    ) external view returns (FarmInfoBMCJ[] memory) {\\n        require(chef == bmcj, \\\"FarmLensV2: Only for BMCJ\\\");\\n\\n        uint256 avaxPrice = _getAvaxPrice();\\n        uint256 joePrice = _getDerivedAvaxPriceOfToken(joe).mul(avaxPrice).div(1e18);\\n        return _getBMCJFarmInfos(avaxPrice, joePrice, user, whitelistedPids);\\n    }\\n\\n    /// @notice Get all data needed for useFarms hook.\\n    /// @param whitelistedPidsV2 Array of all ids of pools that are whitelisted in chefV2\\n    /// @param whitelistedPidsV3 Array of all ids of pools that are whitelisted in chefV3\\n    /// @param whitelistedPidsBMCJ Array of all ids of pools that are whitelisted in BMCJ\\n    /// @param user The address of the user, if address(0), returns global info\\n    /// @return AllFarmData The information of all the whitelisted farms of MCV2, MCV3 and BMCJ\\n    function getAllFarmData(\\n        uint256[] calldata whitelistedPidsV2,\\n        uint256[] calldata whitelistedPidsV3,\\n        uint256[] calldata whitelistedPidsBMCJ,\\n        address user\\n    ) external view returns (AllFarmData memory) {\\n        AllFarmData memory allFarmData;\\n\\n        uint256 avaxPrice = _getAvaxPrice();\\n        uint256 joePrice = _getDerivedAvaxPriceOfToken(joe);\\n\\n        allFarmData.avaxPriceUsd = avaxPrice;\\n        allFarmData.joePriceUsd = joePrice;\\n\\n        allFarmData.totalAllocChefV2 = chefv2.totalAllocPoint();\\n        allFarmData.joePerSecChefV2 = chefv2.joePerSec();\\n\\n        allFarmData.totalAllocChefV3 = chefv3.totalAllocPoint();\\n        allFarmData.joePerSecChefV3 = chefv3.joePerSec();\\n\\n        allFarmData.totalAllocBMCJ = bmcj.totalAllocPoint();\\n        allFarmData.joePerSecBMCJ = bmcj.joePerSec();\\n\\n        allFarmData.farmInfosV2 = _getMCFarmInfos(chefv2, avaxPrice, whitelistedPidsV2);\\n        allFarmData.farmInfosV3 = _getMCFarmInfos(chefv3, avaxPrice, whitelistedPidsV3);\\n        allFarmData.farmInfosBMCJ = _getBMCJFarmInfos(joePrice, avaxPrice, user, whitelistedPidsBMCJ);\\n\\n        return allFarmData;\\n    }\\n\\n    /// @notice Returns the price of avax in usd internally\\n    /// @return uint256 the avax price, scaled to 18 decimals\\n    function _getAvaxPrice() private view returns (uint256) {\\n        // Hardcoding result of `IjoePair(wavaxUsdte).token0() != wavax`\\n        // to save gas, same for wavaxUsdce and wavaxUsdc\\n        return\\n            _getDerivedTokenPriceOfPair(wavaxUsdte, false).add(_getDerivedTokenPriceOfPair(wavaxUsdce, true)).add(\\n                _getDerivedTokenPriceOfPair(wavaxUsdc, false)\\n            ) / 3;\\n    }\\n\\n    /// @notice Returns the derived price of token in the other token\\n    /// @param pair The address of the pair\\n    /// @param derivedtoken0 If price should be derived from token0 if true, or token1 if false\\n    /// @return uint256 the derived price, scaled to 18 decimals\\n    function _getDerivedTokenPriceOfPair(IJoePair pair, bool derivedtoken0) private view returns (uint256) {\\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n        uint256 decimals0 = IERC20(pair.token0()).safeDecimals();\\n        uint256 decimals1 = IERC20(pair.token1()).safeDecimals();\\n\\n        if (derivedtoken0) {\\n            return _scaleTo(reserve0, decimals1.add(18).sub(decimals0)).div(reserve1);\\n        } else {\\n            return _scaleTo(reserve1, decimals0.add(18).sub(decimals1)).div(reserve0);\\n        }\\n    }\\n\\n    /// @notice Returns the derived price of token, it needs to be paired with wavax\\n    /// @param token The address of the token\\n    /// @return uint256 the token derived price, scaled to 18 decimals\\n    function _getDerivedAvaxPriceOfToken(address token) private view returns (uint256) {\\n        if (token == wavax) {\\n            return 1e18;\\n        }\\n        IJoePair pair = IJoePair(joeFactory.getPair(token, wavax));\\n        if (address(pair) == address(0)) {\\n            return 0;\\n        }\\n        // instead of testing wavax == pair.token0(), we do the opposite to save gas\\n        return _getDerivedTokenPriceOfPair(pair, token == pair.token1());\\n    }\\n\\n    /// @notice Returns the amount scaled to decimals\\n    /// @param amount The amount\\n    /// @param decimals The decimals to scale `amount`\\n    /// @return uint256 The amount scaled to decimals\\n    function _scaleTo(uint256 amount, uint256 decimals) private pure returns (uint256) {\\n        if (decimals == 0) return amount;\\n        return amount.mul(10**decimals);\\n    }\\n\\n    /// @notice Returns the derived avax liquidity, at least one of the token needs to be paired with wavax\\n    /// @param pair The address of the pair\\n    /// @return uint256 the derived price of pair's liquidity, scaled to 18 decimals\\n    function _getDerivedAvaxLiquidityOfPair(IJoePair pair) private view returns (uint256) {\\n        address _wavax = wavax;\\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n        IERC20 token0 = IERC20(pair.token0());\\n        IERC20 token1 = IERC20(pair.token1());\\n        uint256 decimals0 = token0.safeDecimals();\\n        uint256 decimals1 = token1.safeDecimals();\\n\\n        reserve0 = _scaleTo(reserve0, uint256(18).sub(decimals0));\\n        reserve1 = _scaleTo(reserve1, uint256(18).sub(decimals1));\\n\\n        uint256 token0DerivedAvaxPrice;\\n        uint256 token1DerivedAvaxPrice;\\n        if (address(token0) == _wavax) {\\n            token0DerivedAvaxPrice = 1e18;\\n            token1DerivedAvaxPrice = _getDerivedTokenPriceOfPair(pair, true);\\n        } else if (address(token1) == _wavax) {\\n            token0DerivedAvaxPrice = _getDerivedTokenPriceOfPair(pair, false);\\n            token1DerivedAvaxPrice = 1e18;\\n        } else {\\n            token0DerivedAvaxPrice = _getDerivedAvaxPriceOfToken(address(token0));\\n            token1DerivedAvaxPrice = _getDerivedAvaxPriceOfToken(address(token1));\\n            // If one token isn't paired with wavax, then we hope that the second one is.\\n            // E.g, TOKEN/USDC, token might not be paired with wavax, but USDC is.\\n            // If both aren't paired with wavax, return 0\\n            if (token0DerivedAvaxPrice == 0) return reserve1.mul(token1DerivedAvaxPrice).mul(2) / 1e18;\\n            if (token1DerivedAvaxPrice == 0) return reserve0.mul(token0DerivedAvaxPrice).mul(2) / 1e18;\\n        }\\n        return reserve0.mul(token0DerivedAvaxPrice).add(reserve1.mul(token1DerivedAvaxPrice)) / 1e18;\\n    }\\n\\n    /// @notice Private function to return the farm pairs data for a given MasterChef (V2 or V3)\\n    /// @param chef The address of the MasterChef\\n    /// @param avaxPrice The avax price as a parameter to save gas\\n    /// @param whitelistedPids Array of all ids of pools that are whitelisted and valid to have their farm data returned\\n    /// @return FarmInfo The information of all the whitelisted farms of MCV2 or MCV3\\n    function _getMCFarmInfos(\\n        IMasterChef chef,\\n        uint256 avaxPrice,\\n        uint256[] calldata whitelistedPids\\n    ) private view returns (FarmInfo[] memory) {\\n        uint256 whitelistLength = whitelistedPids.length;\\n        FarmInfo[] memory farmInfos = new FarmInfo[](whitelistLength);\\n\\n        uint256 chefTotalAlloc = chef.totalAllocPoint();\\n        uint256 chefJoePerSec = chef.joePerSec();\\n\\n        for (uint256 i; i < whitelistLength; i++) {\\n            uint256 pid = whitelistedPids[i];\\n            IMasterChef.PoolInfo memory pool = chef.poolInfo(pid);\\n\\n            farmInfos[i] = _getMCFarmInfo(\\n                chef,\\n                avaxPrice,\\n                pid,\\n                IJoePair(address(pool.lpToken)),\\n                pool.allocPoint,\\n                chefTotalAlloc,\\n                chefJoePerSec\\n            );\\n        }\\n\\n        return farmInfos;\\n    }\\n\\n    /// @notice Helper function to return the farm info of a given pool\\n    /// @param chef The address of the MasterChef\\n    /// @param avaxPrice The avax price as a parameter to save gas\\n    /// @param pid The pid of the pool\\n    /// @param lpToken The lpToken of the pool\\n    /// @param allocPoint The allocPoint of the pool\\n    /// @return FarmInfo The information of all the whitelisted farms of MCV2 or MCV3\\n    function _getMCFarmInfo(\\n        IMasterChef chef,\\n        uint256 avaxPrice,\\n        uint256 pid,\\n        IJoePair lpToken,\\n        uint256 allocPoint,\\n        uint256 totalAllocPoint,\\n        uint256 chefJoePerSec\\n    ) private view returns (FarmInfo memory) {\\n        uint256 decimals = lpToken.decimals();\\n        uint256 totalSupplyScaled = _scaleTo(lpToken.totalSupply(), 18 - decimals);\\n        uint256 chefBalanceScaled = _scaleTo(lpToken.balanceOf(address(chef)), 18 - decimals);\\n        uint256 reserveUSD = _getDerivedAvaxLiquidityOfPair(lpToken) * avaxPrice;\\n        IERC20 token0 = IERC20(lpToken.token0());\\n        IERC20 token1 = IERC20(lpToken.token1());\\n\\n        return\\n            FarmInfo({\\n                id: pid,\\n                allocPoint: allocPoint,\\n                lpAddress: address(lpToken),\\n                token0Address: address(token0),\\n                token1Address: address(token1),\\n                token0Symbol: token0.safeSymbol(),\\n                token1Symbol: token1.safeSymbol(),\\n                reserveUsd: reserveUSD,\\n                totalSupplyScaled: totalSupplyScaled,\\n                chefBalanceScaled: chefBalanceScaled,\\n                chefAddress: address(chef),\\n                chefTotalAlloc: totalAllocPoint,\\n                chefJoePerSec: chefJoePerSec\\n            });\\n    }\\n\\n    /// @notice Private function to return the farm pairs data for boostedMasterChef\\n    /// @param avaxPrice The avax price as a parameter to save gas\\n    /// @param joePrice The joe price as a parameter to save gas\\n    /// @param user The address of the user, if address(0), returns global info\\n    /// @param whitelistedPids Array of all ids of pools that are whitelisted and valid to have their farm data returned\\n    /// @return FarmInfoBMCJ The information of all the whitelisted farms of BMCJ\\n    function _getBMCJFarmInfos(\\n        uint256 avaxPrice,\\n        uint256 joePrice,\\n        address user,\\n        uint256[] calldata whitelistedPids\\n    ) private view returns (FarmInfoBMCJ[] memory) {\\n        GlobalInfo memory globalInfo = GlobalInfo(address(bmcj), bmcj.totalAllocPoint(), bmcj.joePerSec());\\n\\n        uint256 whitelistLength = whitelistedPids.length;\\n        FarmInfoBMCJ[] memory farmInfos = new FarmInfoBMCJ[](whitelistLength);\\n\\n        for (uint256 i; i < whitelistLength; i++) {\\n            uint256 pid = whitelistedPids[i];\\n            IBoostedMasterchef.PoolInfo memory pool = IBoostedMasterchef(globalInfo.chef).poolInfo(pid);\\n            IBoostedMasterchef.UserInfo memory userInfo;\\n            if (user != address(0)) {\\n                userInfo = IBoostedMasterchef(globalInfo.chef).userInfo(pid, user);\\n            } else {\\n                userInfo = IBoostedMasterchef.UserInfo({\\n                    amount: pool.totalLpSupply,\\n                    rewardDebt: 0,\\n                    factor: pool.totalFactor\\n                });\\n            }\\n\\n            farmInfos[i] = _getBMCJFarmInfo(\\n                avaxPrice,\\n                globalInfo.joePerSec.mul(joePrice) / 1e18,\\n                globalInfo.totalAlloc,\\n                pool,\\n                userInfo\\n            );\\n            farmInfos[i].id = pid;\\n            farmInfos[i].chefAddress = globalInfo.chef;\\n            farmInfos[i].chefTotalAlloc = globalInfo.totalAlloc;\\n            farmInfos[i].chefJoePerSec = globalInfo.joePerSec;\\n        }\\n\\n        return farmInfos;\\n    }\\n\\n    /// @notice Helper function to return the farm info of a given pool of BMCJ\\n    /// @param avaxPrice The avax price as a parameter to save gas\\n    /// @param usdPerSec The usd per sec emitted to BMCJ\\n    /// @param pool The pool\\n    /// @param userInfo The userInfo\\n    /// @return farmInfo The information of all the whitelisted farms of MCV2 or MCV3\\n    function _getBMCJFarmInfo(\\n        uint256 avaxPrice,\\n        uint256 usdPerSec,\\n        uint256 totalAlloc,\\n        IBoostedMasterchef.PoolInfo memory pool,\\n        IBoostedMasterchef.UserInfo memory userInfo\\n    ) private view returns (FarmInfoBMCJ memory farmInfo) {\\n        uint256 reserveUSD;\\n        {\\n            IJoePair lpToken = IJoePair(address(pool.lpToken));\\n            reserveUSD = _getDerivedAvaxLiquidityOfPair(lpToken).mul(avaxPrice);\\n            IERC20 token0 = IERC20(lpToken.token0());\\n            IERC20 token1 = IERC20(lpToken.token1());\\n\\n            farmInfo.allocPoint = pool.allocPoint;\\n            farmInfo.lpAddress = address(lpToken);\\n            farmInfo.token0Address = address(token0);\\n            farmInfo.token1Address = address(token1);\\n            farmInfo.token0Symbol = token0.safeSymbol();\\n            farmInfo.token1Symbol = token1.safeSymbol();\\n            farmInfo.reserveUsd = reserveUSD;\\n            farmInfo.totalSupplyScaled = lpToken.totalSupply();\\n            farmInfo.chefBalanceScaled = pool.totalLpSupply;\\n            if (pool.veJoeShareBp == 10_000){\\n                farmInfo.boostFactor = ~uint256(0);\\n            } else {\\n                // can't over or underflow, so normal math is fine\\n                farmInfo.boostFactor = pool.veJoeShareBp * 10_000 / (10_000 - pool.veJoeShareBp) + 10_000;\\n            }\\n        }\\n\\n        // LP are always 18 decimals\\n\\n        if (pool.totalLpSupply != 0 && totalAlloc != 0) {\\n            uint256 userBalanceUSD = userInfo.amount.mul(reserveUSD).div(pool.totalLpSupply);\\n\\n            if (userBalanceUSD == 0) {\\n                return farmInfo;\\n            }\\n\\n            // 1e14 instead of 1e18 because we would have divided by 10_000 right after that\\n            farmInfo.baseAPR = usdPerSec.mul(365 days * 1e14).mul(10_000 - pool.veJoeShareBp).mul(pool.allocPoint).div(\\n                totalAlloc.mul(userBalanceUSD)\\n            );\\n\\n            if (pool.totalFactor != 0) {\\n                // We do the math in 2 steps to avoid\\n                // StackTooDeep error\\n                uint256 usdPerUserVeJoe = usdPerSec.mul(pool.veJoeShareBp).mul(userInfo.factor).mul(365 days * 1e14);\\n                // Early div to prevent overflow\\n                farmInfo.boostedAPR = usdPerUserVeJoe.div(pool.totalFactor).mul(pool.allocPoint).div(\\n                    totalAlloc.mul(userBalanceUSD)\\n                );\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe38f814e8cf5b8a0610d532f27dec83883105eff9a3a90962d891105e510e35b\",\"license\":\"MIT\"},\"contracts/traderjoe/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IERC20Joe {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5d59683ac059dc8c7a528d9243a0434d727bcddd4e477d4b26d50ae4f78ea05\",\"license\":\"GPL-3.0\"},\"contracts/traderjoe/interfaces/IJoeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IJoeERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0f9b1de8137e61afcf2c09fde27dc657da98b7c19c1811fd205ffbe877490d36\",\"license\":\"GPL-3.0\"},\"contracts/traderjoe/interfaces/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0x0e31007ead341ae106c1ca874629b527886427f7f47641d96e0d172720f2c3ca\",\"license\":\"GPL-3.0\"},\"contracts/traderjoe/interfaces/IJoePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IJoePair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xd4d926f79ca1de45dc3f8a7e8244d62a54522cb1a3f38d881979319363ee1387\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b5060405162002f0138038062002f0183398101604081905262000035916200008f565b6001600160601b03196060998a1b811660805297891b881660a05295881b871660c05293871b861660e05291861b851661010052851b841661012052841b831661014052831b82166101605290911b16610180526200017e565b60008060008060008060008060006101208a8c031215620000ae578485fd5b8951620000bb8162000165565b60208b0151909950620000ce8162000165565b60408b0151909850620000e18162000165565b60608b0151909750620000f48162000165565b60808b0151909650620001078162000165565b60a08b01519095506200011a8162000165565b60c08b01519094506200012d8162000165565b60e08b0151909350620001408162000165565b6101008b0151909250620001548162000165565b809150509295985092959850929598565b6001600160a01b03811681146200017b57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c6101805160601c612c8d62000274600039806101f5528061052352806105bd52806108485280610e045280610e335280610ec952508061023d52806103ef5280610489528061068852806107a65250806102ce5280610355528061065652806106d9528061076b5250806107455280610a675250806107215280610970525080610906528061099e5250806106fd52806109c95250806102195280610a065280610a965280611be8525080610282528061082252806108ba5250612c8d6000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638a38466e11610097578063cff5dd3311610066578063cff5dd33146101b0578063d02641a0146101b8578063eee5c276146101d8578063f97a496c146101eb576100f5565b80638a38466e146101605780639bbf1deb14610168578063b985a3a014610188578063ce7a198914610190576100f5565b806335541641116100d357806335541641146101285780634e57afe014610148578063685f02e71461015057806387dabe4614610158576100f5565b80630d1dcd9a146100fa578063117be4c2146101185780632c9e2b0514610120575b600080fd5b6101026101f3565b60405161010f9190612920565b60405180910390f35b610102610217565b61010261023b565b61013b6101363660046122d3565b61025f565b60405161010f9190612af6565b6101026106d7565b6101026106fb565b61010261071f565b610102610743565b61017b6101763660046123e0565b610767565b60405161010f91906129ae565b610102610820565b6101a361019e36600461237d565b610844565b60405161010f919061294e565b610102610904565b6101cb6101c636600461229b565b610928565b60405161010f9190612bb3565b6101cb6101e636600461229b565b610944565b6101cb610955565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b610267611fb5565b61026f611fb5565b6000610279610964565b905060006102a67f0000000000000000000000000000000000000000000000000000000000000000610a02565b8284526020808501829052604080516317caf6f160e01b815290519293506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926317caf6f192600480840193919291829003018186803b15801561031257600080fd5b505afa158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190612646565b8360400181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ac57600080fd5b505afa1580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e49190612646565b8360a00181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190612646565b8360600181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e057600080fd5b505afa1580156104f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105189190612646565b8360c00181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561057a57600080fd5b505afa15801561058e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b29190612646565b8360800181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b15801561061457600080fd5b505afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190612646565b60e084015261067d7f0000000000000000000000000000000000000000000000000000000000000000838d8d610bbd565b6101008401526106af7f0000000000000000000000000000000000000000000000000000000000000000838b8b610bbd565b6101208401526106c28183878a8a610ded565b61014084015250909998505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614806107da57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b6107ff5760405162461bcd60e51b81526004016107f690612a55565b60405180910390fd5b6000610809610964565b905061081785828686610bbd565b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316146108975760405162461bcd60e51b81526004016107f6906129f1565b60006108a1610964565b905060006108ea670de0b6b3a76400006108e4846108de7f0000000000000000000000000000000000000000000000000000000000000000610a02565b9061121e565b90611255565b90506108f98282888888610ded565b979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610932610964565b61093b83610a02565b0290505b919050565b600061094f82610a02565b92915050565b600061095f610964565b905090565b600060036109f56109967f00000000000000000000000000000000000000000000000000000000000000006000611287565b6109ef6109c47f00000000000000000000000000000000000000000000000000000000000000006001611287565b6109ef7f00000000000000000000000000000000000000000000000000000000000000006000611287565b90611426565b816109fc57fe5b04905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610a4d5750670de0b6b3a764000061093f565b60405163e6a4390560e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590610abe9086907f000000000000000000000000000000000000000000000000000000000000000090600401612934565b60206040518083038186803b158015610ad657600080fd5b505afa158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e91906122b7565b90506001600160a01b038116610b2857600091505061093f565b610bb681826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6557600080fd5b505afa158015610b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9d91906122b7565b6001600160a01b0316856001600160a01b031614611287565b9392505050565b606081818167ffffffffffffffff81118015610bd857600080fd5b50604051908082528060200260200182016040528015610c1257816020015b610bff61200f565b815260200190600190039081610bf75790505b5090506000876001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5057600080fd5b505afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c889190612646565b90506000886001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc557600080fd5b505afa158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfd9190612646565b905060005b84811015610ddf576000888883818110610d1857fe5b905060200201359050610d2961209b565b604051631526fe2760e01b81526001600160a01b038d1690631526fe2790610d55908590600401612bb3565b60806040518083038186803b158015610d6d57600080fd5b505afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906124bf565b9050610dbe8c8c84846000015185602001518a8a611449565b868481518110610dca57fe5b60209081029190910101525050600101610d02565b509198975050505050505050565b6060610df76120cc565b60405180606001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8a57600080fd5b505afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190612646565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2057600080fd5b505afa158015610f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f589190612646565b905290508260608167ffffffffffffffff81118015610f7657600080fd5b50604051908082528060200260200182016040528015610fb057816020015b610f9d6120f6565b815260200190600190039081610f955790505b50905060005b82811015611211576000878783818110610fcc57fe5b905060200201359050610fdd612197565b8551604051631526fe2760e01b81526001600160a01b0390911690631526fe279061100c908590600401612bb3565b6101206040518083038186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d9190612511565b90506110676121e3565b6001600160a01b038b16156110fe5786516040516393f1a40b60e01b81526001600160a01b03909116906393f1a40b906110a79086908f90600401612bbc565b60606040518083038186803b1580156110bf57600080fd5b505afa1580156110d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f791906125b5565b9050611126565b60405180606001604052808361010001518152602001600081526020018360e0015181525090505b61115e8d670de0b6b3a764000061114a8f8b6040015161121e90919063ffffffff16565b8161115157fe5b0489602001518585611780565b85858151811061116a57fe5b60200260200101819052508285858151811061118257fe5b6020908102919091010151528651855186908690811061119e57fe5b602002602001015161012001906001600160a01b031690816001600160a01b03168152505086602001518585815181106111d457fe5b602002602001015161016001818152505086604001518585815181106111f657fe5b60209081029190910101516101800152505050600101610fb6565b5098975050505050505050565b60008115806112395750508082028282828161123657fe5b04145b61094f5760405162461bcd60e51b81526004016107f690612ac6565b60008082116112765760405162461bcd60e51b81526004016107f690612a97565b81838161127f57fe5b049392505050565b6000806000846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156112c557600080fd5b505afa1580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd91906125f2565b506001600160701b031691506001600160701b031691506000611398866001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561135257600080fd5b505afa158015611366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138a91906122b7565b6001600160a01b0316611ae3565b60ff16905060006113db876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561135257600080fd5b60ff169050851561141357611408836108e486611403866113fd876012611426565b90611ba4565b611bc7565b94505050505061094f565b611408846108e485611403856113fd8860125b8181018181101561094f5760405162461bcd60e51b81526004016107f6906129c1565b61145161200f565b6000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561148c57600080fd5b505afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c4919061265e565b60ff1690506000611548876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561150757600080fd5b505afa15801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f9190612646565b83601203611bc7565b905060006115d4886001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040161157b9190612920565b60206040518083038186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190612646565b84601203611bc7565b905060008a6115e28a611be3565b0290506000896001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561162057600080fd5b505afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165891906122b7565b905060008a6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561169557600080fd5b505afa1580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd91906122b7565b9050604051806101a001604052808d81526020018b81526020018c6001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b03168152602001611726846001600160a01b0316611ee2565b815260200161173d836001600160a01b0316611ee2565b81526020018481526020018681526020018f6001600160a01b031681526020018581526020018a8152602001898152509650505050505050979650505050505050565b6117886120f6565b825160009061179a886108de83611be3565b91506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156117d757600080fd5b505afa1580156117eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180f91906122b7565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561184c57600080fd5b505afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188491906122b7565b6020808901516001600160601b0316908701526001600160a01b0380851660408801528381166060880181905290821660808801529091506118c590611ee2565b60a08601526118dc6001600160a01b038216611ee2565b8560c00181905250838560e0018181525050826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192757600080fd5b505afa15801561193b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195f9190612646565b6101008681019190915287015161014086015260c087015163ffffffff166127101415611994576000196101e08601526119c6565b60c087015163ffffffff6127108281038216920216816119b057fe5b046127100163ffffffff16856101e00181815250505b505050610100840151158015906119dc57508415155b15611ad95761010084015183516000916119fa916108e4908561121e565b905080611a08575050610817565b611a54611a15878361121e565b6108e487602001516001600160601b03166108de8960c001516127100363ffffffff166108de68aaf4fddb82d7e000008e61121e90919063ffffffff16565b6101a084015260e085015115611ad7576000611a9868aaf4fddb82d7e000006108de87604001516108de8a60c0015163ffffffff168d61121e90919063ffffffff16565b9050611acf611aa7888461121e565b6108e488602001516001600160601b03166108de8a60e001518661125590919063ffffffff16565b6101c0850152505b505b5095945050505050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916060916001600160a01b03861691611b2a9190612904565b600060405180830381855afa9150503d8060008114611b65576040519150601f19603f3d011682016040523d82523d6000602084013e611b6a565b606091505b5091509150818015611b7d575080516020145b611b88576012611b9c565b80806020019051810190611b9c919061265e565b949350505050565b8082038281111561094f5760405162461bcd60e51b81526004016107f690612a28565b600081611bd557508161094f565b610bb683600a84900a61121e565b6000807f00000000000000000000000000000000000000000000000000000000000000009050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611c4557600080fd5b505afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d91906125f2565b506001600160701b031691506001600160701b031691506000856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611ccf57600080fd5b505afa158015611ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0791906122b7565b90506000866001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4457600080fd5b505afa158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c91906122b7565b90506000611d92836001600160a01b0316611ae3565b60ff1690506000611dab836001600160a01b0316611ae3565b60ff169050611dbf86611403601285611ba4565b9550611dd085611403601284611ba4565b9450600080886001600160a01b0316866001600160a01b03161415611e0c57670de0b6b3a76400009150611e058b6001611287565b9050611eab565b886001600160a01b0316856001600160a01b03161415611e4357611e318b6000611287565b9150670de0b6b3a76400009050611eab565b611e4c86610a02565b9150611e5785610a02565b905081611e8e57670de0b6b3a7640000611e7660026108de8a8561121e565b81611e7d57fe5b04995050505050505050505061093f565b80611eab57670de0b6b3a7640000611e7660026108de8b8661121e565b670de0b6b3a7640000611ecb611ec1898461121e565b6109ef8b8661121e565b81611ed257fe5b049b9a5050505050505050505050565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b03861691611f299190612904565b600060405180830381855afa9150503d8060008114611f64576040519150601f19603f3d011682016040523d82523d6000602084013e611f69565b606091505b5091509150818015611f7c575060008151115b611fa157604051806040016040528060038152602001623f3f3f60e81b815250611b9c565b80806020019051810190611b9c9190612433565b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001606081525090565b604051806101a00160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b604051806102000160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b60405180606001604052806000815260200160008152602001600081525090565b805161094f81612c2a565b60008083601f840112612220578182fd5b50813567ffffffffffffffff811115612237578182fd5b602083019150836020808302850101111561225157600080fd5b9250929050565b805163ffffffff8116811461094f57600080fd5b805167ffffffffffffffff8116811461094f57600080fd5b80516001600160601b038116811461094f57600080fd5b6000602082840312156122ac578081fd5b8135610bb681612c2a565b6000602082840312156122c8578081fd5b8151610bb681612c2a565b60008060008060008060006080888a0312156122ed578283fd5b873567ffffffffffffffff80821115612304578485fd5b6123108b838c0161220f565b909950975060208a0135915080821115612328578485fd5b6123348b838c0161220f565b909750955060408a013591508082111561234c578485fd5b506123598a828b0161220f565b909450925050606088013561236d81612c2a565b8091505092959891949750929550565b60008060008060608587031215612392578384fd5b843561239d81612c2a565b935060208501356123ad81612c2a565b9250604085013567ffffffffffffffff8111156123c8578283fd5b6123d48782880161220f565b95989497509550505050565b6000806000604084860312156123f4578283fd5b83356123ff81612c2a565b9250602084013567ffffffffffffffff81111561241a578283fd5b6124268682870161220f565b9497909650939450505050565b600060208284031215612444578081fd5b815167ffffffffffffffff8082111561245b578283fd5b818401915084601f83011261246e578283fd5b81518181111561247c578384fd5b61248f601f8201601f1916602001612bd3565b91508082528560208285010111156124a5578384fd5b6124b6816020840160208601612bfa565b50949350505050565b6000608082840312156124d0578081fd5b6124da6080612bd3565b82516124e581612c2a565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b6000610120808385031215612524578182fd5b61252d81612bd3565b90506125398484612204565b81526125488460208501612284565b6020820152604083015160408201526060830151606082015261256e846080850161226c565b60808201526125808460a08501612204565b60a08201526125928460c08501612258565b60c082015260e08381015190820152610100928301519281019290925250919050565b6000606082840312156125c6578081fd5b6125d06060612bd3565b8251815260208301516020820152604083015160408201528091505092915050565b600080600060608486031215612606578081fd5b835161261181612c42565b602085015190935061262281612c42565b604085015190925063ffffffff8116811461263b578182fd5b809150509250925092565b600060208284031215612657578081fd5b5051919050565b60006020828403121561266f578081fd5b815160ff81168114610bb6578182fd5b6000610200825184526020830151602085015260408301516126a46040860182612774565b5060608301516126b76060860182612774565b5060808301516126ca6080860182612774565b5060a08301518160a08601526126e2828601826128d8565b91505060c083015184820360c08601526126fc82826128d8565b91505060e083015160e08501526101008084015181860152506101208084015161272882870182612774565b50506101408381015190850152610160808401519085015261018080840151908501526101a080840151908501526101c080840151908501526101e09283015192909301919091525090565b6001600160a01b03169052565b6000815180845260208085019450848183028601828601855b858110156127c45783830389526127b283835161267f565b9885019892509084019060010161279a565b5090979650505050505050565b6000815180845260208085019450848183028601828601855b858110156127c457838303895281516101a081518552868201518786015260408083015161281a82880182612774565b505060608083015161282e82880182612774565b505060808083015161284282880182612774565b505060a080830151828288015261285b838801826128d8565b9250505060c0808301518683038288015261287683826128d8565b9250505060e0808301518187015250610100808301518187015250610120808301516128a482880182612774565b50506101408281015190860152610160808301519086015261018091820151919094015297840197908401906001016127ea565b600081518084526128f0816020860160208601612bfa565b601f01601f19169290920160200192915050565b60008251612916818460208701612bfa565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156129a157603f1988860301845261298f85835161267f565b94509285019290850190600101612973565b5092979650505050505050565b600060208252610bb660208301846127d1565b602080825260169082015275536166654d6174683a20416464204f766572666c6f7760501b604082015260600190565b60208082526019908201527f4661726d4c656e7356323a204f6e6c7920666f7220424d434a00000000000000604082015260600190565b602080825260139082015272536166654d6174683a20556e646572666c6f7760681b604082015260600190565b60208082526022908201527f4661726d4c656e7356323a206f6e6c7920666f72204d43563220616e64204d43604082015261563360f01b606082015260800190565b602080825260159082015274536166654d6174683a20446976206279205a65726f60581b604082015260600190565b602080825260169082015275536166654d6174683a204d756c204f766572666c6f7760501b604082015260600190565b60006020825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008181850152808501519150506101606101208181860152612b6c6101808601846127d1565b9250808601519050601f19610140818786030181880152612b8d85846127d1565b908801518782039092018488015293509050612ba98382612781565b9695505050505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b60405181810167ffffffffffffffff81118282101715612bf257600080fd5b604052919050565b60005b83811015612c15578181015183820152602001612bfd565b83811115612c24576000848401525b50505050565b6001600160a01b0381168114612c3f57600080fd5b50565b6001600160701b0381168114612c3f57600080fdfea2646970667358221220da89882c1908bae40fdc8facc1904fff368078ea7888d185f1f955e8113539bb64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638a38466e11610097578063cff5dd3311610066578063cff5dd33146101b0578063d02641a0146101b8578063eee5c276146101d8578063f97a496c146101eb576100f5565b80638a38466e146101605780639bbf1deb14610168578063b985a3a014610188578063ce7a198914610190576100f5565b806335541641116100d357806335541641146101285780634e57afe014610148578063685f02e71461015057806387dabe4614610158576100f5565b80630d1dcd9a146100fa578063117be4c2146101185780632c9e2b0514610120575b600080fd5b6101026101f3565b60405161010f9190612920565b60405180910390f35b610102610217565b61010261023b565b61013b6101363660046122d3565b61025f565b60405161010f9190612af6565b6101026106d7565b6101026106fb565b61010261071f565b610102610743565b61017b6101763660046123e0565b610767565b60405161010f91906129ae565b610102610820565b6101a361019e36600461237d565b610844565b60405161010f919061294e565b610102610904565b6101cb6101c636600461229b565b610928565b60405161010f9190612bb3565b6101cb6101e636600461229b565b610944565b6101cb610955565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b610267611fb5565b61026f611fb5565b6000610279610964565b905060006102a67f0000000000000000000000000000000000000000000000000000000000000000610a02565b8284526020808501829052604080516317caf6f160e01b815290519293506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926317caf6f192600480840193919291829003018186803b15801561031257600080fd5b505afa158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a9190612646565b8360400181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ac57600080fd5b505afa1580156103c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e49190612646565b8360a00181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190612646565b8360600181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e057600080fd5b505afa1580156104f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105189190612646565b8360c00181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561057a57600080fd5b505afa15801561058e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b29190612646565b8360800181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b15801561061457600080fd5b505afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190612646565b60e084015261067d7f0000000000000000000000000000000000000000000000000000000000000000838d8d610bbd565b6101008401526106af7f0000000000000000000000000000000000000000000000000000000000000000838b8b610bbd565b6101208401526106c28183878a8a610ded565b61014084015250909998505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614806107da57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316145b6107ff5760405162461bcd60e51b81526004016107f690612a55565b60405180910390fd5b6000610809610964565b905061081785828686610bbd565b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316146108975760405162461bcd60e51b81526004016107f6906129f1565b60006108a1610964565b905060006108ea670de0b6b3a76400006108e4846108de7f0000000000000000000000000000000000000000000000000000000000000000610a02565b9061121e565b90611255565b90506108f98282888888610ded565b979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610932610964565b61093b83610a02565b0290505b919050565b600061094f82610a02565b92915050565b600061095f610964565b905090565b600060036109f56109967f00000000000000000000000000000000000000000000000000000000000000006000611287565b6109ef6109c47f00000000000000000000000000000000000000000000000000000000000000006001611287565b6109ef7f00000000000000000000000000000000000000000000000000000000000000006000611287565b90611426565b816109fc57fe5b04905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610a4d5750670de0b6b3a764000061093f565b60405163e6a4390560e01b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590610abe9086907f000000000000000000000000000000000000000000000000000000000000000090600401612934565b60206040518083038186803b158015610ad657600080fd5b505afa158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e91906122b7565b90506001600160a01b038116610b2857600091505061093f565b610bb681826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6557600080fd5b505afa158015610b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9d91906122b7565b6001600160a01b0316856001600160a01b031614611287565b9392505050565b606081818167ffffffffffffffff81118015610bd857600080fd5b50604051908082528060200260200182016040528015610c1257816020015b610bff61200f565b815260200190600190039081610bf75790505b5090506000876001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5057600080fd5b505afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c889190612646565b90506000886001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc557600080fd5b505afa158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfd9190612646565b905060005b84811015610ddf576000888883818110610d1857fe5b905060200201359050610d2961209b565b604051631526fe2760e01b81526001600160a01b038d1690631526fe2790610d55908590600401612bb3565b60806040518083038186803b158015610d6d57600080fd5b505afa158015610d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da591906124bf565b9050610dbe8c8c84846000015185602001518a8a611449565b868481518110610dca57fe5b60209081029190910101525050600101610d02565b509198975050505050505050565b6060610df76120cc565b60405180606001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8a57600080fd5b505afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190612646565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2057600080fd5b505afa158015610f34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f589190612646565b905290508260608167ffffffffffffffff81118015610f7657600080fd5b50604051908082528060200260200182016040528015610fb057816020015b610f9d6120f6565b815260200190600190039081610f955790505b50905060005b82811015611211576000878783818110610fcc57fe5b905060200201359050610fdd612197565b8551604051631526fe2760e01b81526001600160a01b0390911690631526fe279061100c908590600401612bb3565b6101206040518083038186803b15801561102557600080fd5b505afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d9190612511565b90506110676121e3565b6001600160a01b038b16156110fe5786516040516393f1a40b60e01b81526001600160a01b03909116906393f1a40b906110a79086908f90600401612bbc565b60606040518083038186803b1580156110bf57600080fd5b505afa1580156110d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f791906125b5565b9050611126565b60405180606001604052808361010001518152602001600081526020018360e0015181525090505b61115e8d670de0b6b3a764000061114a8f8b6040015161121e90919063ffffffff16565b8161115157fe5b0489602001518585611780565b85858151811061116a57fe5b60200260200101819052508285858151811061118257fe5b6020908102919091010151528651855186908690811061119e57fe5b602002602001015161012001906001600160a01b031690816001600160a01b03168152505086602001518585815181106111d457fe5b602002602001015161016001818152505086604001518585815181106111f657fe5b60209081029190910101516101800152505050600101610fb6565b5098975050505050505050565b60008115806112395750508082028282828161123657fe5b04145b61094f5760405162461bcd60e51b81526004016107f690612ac6565b60008082116112765760405162461bcd60e51b81526004016107f690612a97565b81838161127f57fe5b049392505050565b6000806000846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156112c557600080fd5b505afa1580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd91906125f2565b506001600160701b031691506001600160701b031691506000611398866001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561135257600080fd5b505afa158015611366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138a91906122b7565b6001600160a01b0316611ae3565b60ff16905060006113db876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561135257600080fd5b60ff169050851561141357611408836108e486611403866113fd876012611426565b90611ba4565b611bc7565b94505050505061094f565b611408846108e485611403856113fd8860125b8181018181101561094f5760405162461bcd60e51b81526004016107f6906129c1565b61145161200f565b6000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561148c57600080fd5b505afa1580156114a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c4919061265e565b60ff1690506000611548876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561150757600080fd5b505afa15801561151b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153f9190612646565b83601203611bc7565b905060006115d4886001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040161157b9190612920565b60206040518083038186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190612646565b84601203611bc7565b905060008a6115e28a611be3565b0290506000896001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561162057600080fd5b505afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165891906122b7565b905060008a6001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561169557600080fd5b505afa1580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd91906122b7565b9050604051806101a001604052808d81526020018b81526020018c6001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b03168152602001611726846001600160a01b0316611ee2565b815260200161173d836001600160a01b0316611ee2565b81526020018481526020018681526020018f6001600160a01b031681526020018581526020018a8152602001898152509650505050505050979650505050505050565b6117886120f6565b825160009061179a886108de83611be3565b91506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156117d757600080fd5b505afa1580156117eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180f91906122b7565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561184c57600080fd5b505afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188491906122b7565b6020808901516001600160601b0316908701526001600160a01b0380851660408801528381166060880181905290821660808801529091506118c590611ee2565b60a08601526118dc6001600160a01b038216611ee2565b8560c00181905250838560e0018181525050826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192757600080fd5b505afa15801561193b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195f9190612646565b6101008681019190915287015161014086015260c087015163ffffffff166127101415611994576000196101e08601526119c6565b60c087015163ffffffff6127108281038216920216816119b057fe5b046127100163ffffffff16856101e00181815250505b505050610100840151158015906119dc57508415155b15611ad95761010084015183516000916119fa916108e4908561121e565b905080611a08575050610817565b611a54611a15878361121e565b6108e487602001516001600160601b03166108de8960c001516127100363ffffffff166108de68aaf4fddb82d7e000008e61121e90919063ffffffff16565b6101a084015260e085015115611ad7576000611a9868aaf4fddb82d7e000006108de87604001516108de8a60c0015163ffffffff168d61121e90919063ffffffff16565b9050611acf611aa7888461121e565b6108e488602001516001600160601b03166108de8a60e001518661125590919063ffffffff16565b6101c0850152505b505b5095945050505050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b179052905160009182916060916001600160a01b03861691611b2a9190612904565b600060405180830381855afa9150503d8060008114611b65576040519150601f19603f3d011682016040523d82523d6000602084013e611b6a565b606091505b5091509150818015611b7d575080516020145b611b88576012611b9c565b80806020019051810190611b9c919061265e565b949350505050565b8082038281111561094f5760405162461bcd60e51b81526004016107f690612a28565b600081611bd557508161094f565b610bb683600a84900a61121e565b6000807f00000000000000000000000000000000000000000000000000000000000000009050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015611c4557600080fd5b505afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d91906125f2565b506001600160701b031691506001600160701b031691506000856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611ccf57600080fd5b505afa158015611ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0791906122b7565b90506000866001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4457600080fd5b505afa158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c91906122b7565b90506000611d92836001600160a01b0316611ae3565b60ff1690506000611dab836001600160a01b0316611ae3565b60ff169050611dbf86611403601285611ba4565b9550611dd085611403601284611ba4565b9450600080886001600160a01b0316866001600160a01b03161415611e0c57670de0b6b3a76400009150611e058b6001611287565b9050611eab565b886001600160a01b0316856001600160a01b03161415611e4357611e318b6000611287565b9150670de0b6b3a76400009050611eab565b611e4c86610a02565b9150611e5785610a02565b905081611e8e57670de0b6b3a7640000611e7660026108de8a8561121e565b81611e7d57fe5b04995050505050505050505061093f565b80611eab57670de0b6b3a7640000611e7660026108de8b8661121e565b670de0b6b3a7640000611ecb611ec1898461121e565b6109ef8b8661121e565b81611ed257fe5b049b9a5050505050505050505050565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b03861691611f299190612904565b600060405180830381855afa9150503d8060008114611f64576040519150601f19603f3d011682016040523d82523d6000602084013e611f69565b606091505b5091509150818015611f7c575060008151115b611fa157604051806040016040528060038152602001623f3f3f60e81b815250611b9c565b80806020019051810190611b9c9190612433565b60405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160608152602001606081525090565b604051806101a00160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b604051806102000160405280600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b60405180606001604052806000815260200160008152602001600081525090565b805161094f81612c2a565b60008083601f840112612220578182fd5b50813567ffffffffffffffff811115612237578182fd5b602083019150836020808302850101111561225157600080fd5b9250929050565b805163ffffffff8116811461094f57600080fd5b805167ffffffffffffffff8116811461094f57600080fd5b80516001600160601b038116811461094f57600080fd5b6000602082840312156122ac578081fd5b8135610bb681612c2a565b6000602082840312156122c8578081fd5b8151610bb681612c2a565b60008060008060008060006080888a0312156122ed578283fd5b873567ffffffffffffffff80821115612304578485fd5b6123108b838c0161220f565b909950975060208a0135915080821115612328578485fd5b6123348b838c0161220f565b909750955060408a013591508082111561234c578485fd5b506123598a828b0161220f565b909450925050606088013561236d81612c2a565b8091505092959891949750929550565b60008060008060608587031215612392578384fd5b843561239d81612c2a565b935060208501356123ad81612c2a565b9250604085013567ffffffffffffffff8111156123c8578283fd5b6123d48782880161220f565b95989497509550505050565b6000806000604084860312156123f4578283fd5b83356123ff81612c2a565b9250602084013567ffffffffffffffff81111561241a578283fd5b6124268682870161220f565b9497909650939450505050565b600060208284031215612444578081fd5b815167ffffffffffffffff8082111561245b578283fd5b818401915084601f83011261246e578283fd5b81518181111561247c578384fd5b61248f601f8201601f1916602001612bd3565b91508082528560208285010111156124a5578384fd5b6124b6816020840160208601612bfa565b50949350505050565b6000608082840312156124d0578081fd5b6124da6080612bd3565b82516124e581612c2a565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b6000610120808385031215612524578182fd5b61252d81612bd3565b90506125398484612204565b81526125488460208501612284565b6020820152604083015160408201526060830151606082015261256e846080850161226c565b60808201526125808460a08501612204565b60a08201526125928460c08501612258565b60c082015260e08381015190820152610100928301519281019290925250919050565b6000606082840312156125c6578081fd5b6125d06060612bd3565b8251815260208301516020820152604083015160408201528091505092915050565b600080600060608486031215612606578081fd5b835161261181612c42565b602085015190935061262281612c42565b604085015190925063ffffffff8116811461263b578182fd5b809150509250925092565b600060208284031215612657578081fd5b5051919050565b60006020828403121561266f578081fd5b815160ff81168114610bb6578182fd5b6000610200825184526020830151602085015260408301516126a46040860182612774565b5060608301516126b76060860182612774565b5060808301516126ca6080860182612774565b5060a08301518160a08601526126e2828601826128d8565b91505060c083015184820360c08601526126fc82826128d8565b91505060e083015160e08501526101008084015181860152506101208084015161272882870182612774565b50506101408381015190850152610160808401519085015261018080840151908501526101a080840151908501526101c080840151908501526101e09283015192909301919091525090565b6001600160a01b03169052565b6000815180845260208085019450848183028601828601855b858110156127c45783830389526127b283835161267f565b9885019892509084019060010161279a565b5090979650505050505050565b6000815180845260208085019450848183028601828601855b858110156127c457838303895281516101a081518552868201518786015260408083015161281a82880182612774565b505060608083015161282e82880182612774565b505060808083015161284282880182612774565b505060a080830151828288015261285b838801826128d8565b9250505060c0808301518683038288015261287683826128d8565b9250505060e0808301518187015250610100808301518187015250610120808301516128a482880182612774565b50506101408281015190860152610160808301519086015261018091820151919094015297840197908401906001016127ea565b600081518084526128f0816020860160208601612bfa565b601f01601f19169290920160200192915050565b60008251612916818460208701612bfa565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156129a157603f1988860301845261298f85835161267f565b94509285019290850190600101612973565b5092979650505050505050565b600060208252610bb660208301846127d1565b602080825260169082015275536166654d6174683a20416464204f766572666c6f7760501b604082015260600190565b60208082526019908201527f4661726d4c656e7356323a204f6e6c7920666f7220424d434a00000000000000604082015260600190565b602080825260139082015272536166654d6174683a20556e646572666c6f7760681b604082015260600190565b60208082526022908201527f4661726d4c656e7356323a206f6e6c7920666f72204d43563220616e64204d43604082015261563360f01b606082015260800190565b602080825260159082015274536166654d6174683a20446976206279205a65726f60581b604082015260600190565b602080825260169082015275536166654d6174683a204d756c204f766572666c6f7760501b604082015260600190565b60006020825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008181850152808501519150506101606101208181860152612b6c6101808601846127d1565b9250808601519050601f19610140818786030181880152612b8d85846127d1565b908801518782039092018488015293509050612ba98382612781565b9695505050505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b60405181810167ffffffffffffffff81118282101715612bf257600080fd5b604052919050565b60005b83811015612c15578181015183820152602001612bfd565b83811115612c24576000848401525b50505050565b6001600160a01b0381168114612c3f57600080fd5b50565b6001600160701b0381168114612c3f57600080fdfea2646970667358221220da89882c1908bae40fdc8facc1904fff368078ea7888d185f1f955e8113539bb64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAllFarmData(uint256[],uint256[],uint256[],address)": {
        "params": {
          "user": "The address of the user, if address(0), returns global info",
          "whitelistedPidsBMCJ": "Array of all ids of pools that are whitelisted in BMCJ",
          "whitelistedPidsV2": "Array of all ids of pools that are whitelisted in chefV2",
          "whitelistedPidsV3": "Array of all ids of pools that are whitelisted in chefV3"
        },
        "returns": {
          "_0": "AllFarmData The information of all the whitelisted farms of MCV2, MCV3 and BMCJ"
        }
      },
      "getAvaxPrice()": {
        "returns": {
          "_0": "uint256 the avax price, scaled to 18 decimals"
        }
      },
      "getBMCJFarmInfos(address,address,uint256[])": {
        "params": {
          "chef": "The address of the MasterChef",
          "user": "The address of the user, if address(0), returns global info",
          "whitelistedPids": "Array of all ids of pools that are whitelisted and valid to have their farm data returned"
        },
        "returns": {
          "_0": "FarmInfoBMCJ The information of all the whitelisted farms of BMCJ"
        }
      },
      "getDerivedAvaxPriceOfToken(address)": {
        "params": {
          "token": "The address of the token"
        },
        "returns": {
          "_0": "uint256 the token derived price, scaled to 18 decimals"
        }
      },
      "getMCFarmInfos(address,uint256[])": {
        "params": {
          "chef": "The address of the MasterChef",
          "whitelistedPids": "Array of all ids of pools that are whitelisted and valid to have their farm data returned"
        },
        "returns": {
          "_0": "FarmInfo The information of all the whitelisted farms of MCV2 or MCV3"
        }
      },
      "getTokenPrice(address)": {
        "params": {
          "token": "The address of the token"
        },
        "returns": {
          "_0": "uint256 the USD price of token, scaled to 18 decimals"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAllFarmData(uint256[],uint256[],uint256[],address)": {
        "notice": "Get all data needed for useFarms hook."
      },
      "getAvaxPrice()": {
        "notice": "Returns the price of avax in usd"
      },
      "getBMCJFarmInfos(address,address,uint256[])": {
        "notice": "Returns the farm pairs data for BoostedMasterChefJoe"
      },
      "getDerivedAvaxPriceOfToken(address)": {
        "notice": "Returns the derived price of token, it needs to be paired with wavax"
      },
      "getMCFarmInfos(address,uint256[])": {
        "notice": "Returns the farm pairs data for MCV2 and MCV3"
      },
      "getTokenPrice(address)": {
        "notice": "Returns the USD price of token, it needs to be paired with wavax"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}