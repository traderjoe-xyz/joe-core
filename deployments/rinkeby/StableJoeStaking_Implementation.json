{
  "address": "0xB4BEe844c06B2e751A7234312E434bd6EF07a4ce",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        }
      ],
      "name": "DepositFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RewardTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RewardTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_REWARD_PER_SHARE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_FEE_PERCENT_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "addRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_joe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositFeePercent",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRewardToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joe",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastRewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositFeePercent",
          "type": "uint256"
        }
      ],
      "name": "setDepositFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfae606b9c9c2fccf7c73fa8c29aca6ab3c6f8da8b02b1f6f5cdf440494de795b",
  "receipt": {
    "to": null,
    "from": "0x1d9D82344E76769EB727521822D1EacB834A9024",
    "contractAddress": "0xB4BEe844c06B2e751A7234312E434bd6EF07a4ce",
    "transactionIndex": 0,
    "gasUsed": "1870396",
    "logsBloom": "0x
    "blockHash": "0x41a01c7aad9cfa2cb4cc9ccf3ca24a7d40045d5d3e177c86109e7214173f17ba",
    "transactionHash": "0xfae606b9c9c2fccf7c73fa8c29aca6ab3c6f8da8b02b1f6f5cdf440494de795b",
    "logs": [],
    "blockNumber": 10219080,
    "cumulativeGasUsed": "1870396",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a3bfb80b24d8bb17964a24c16818d6bb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"}],\"name\":\"DepositFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_REWARD_PER_SHARE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_FEE_PERCENT_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_joe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFeePercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joe\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFeePercent\",\"type\":\"uint256\"}],\"name\":\"setDepositFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Trader Joe\",\"kind\":\"dev\",\"methods\":{\"addRewardToken(address)\":{\"params\":{\"_rewardToken\":\"The address of the reward token\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"The amount of JOE to deposit\"}},\"getUserInfo(address,address)\":{\"params\":{\"_rewardToken\":\"The address of the reward token\",\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"The amount of JOE user has deposited\",\"_1\":\"The reward debt for the chosen token\"}},\"initialize(address,address,address,uint256)\":{\"details\":\"This contract needs to receive an ERC20 `_rewardToken` in order to distribute them (with MoneyMaker in our case)\",\"params\":{\"_depositFeePercent\":\"The deposit fee percent, scalled to 1e18, e.g. 3% is 3e16\",\"_feeCollector\":\"The address where deposit fees will be sent\",\"_joe\":\"The address of the JOE token\",\"_rewardToken\":\"The address of the ERC20 reward token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingReward(address,address)\":{\"params\":{\"_token\":\"The address of the token\",\"_user\":\"The address of the user\"},\"returns\":{\"_0\":\"`_user`'s pending reward token\"}},\"removeRewardToken(address)\":{\"params\":{\"_rewardToken\":\"The address of the reward token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardTokensLength()\":{\"returns\":{\"_0\":\"The length of the array\"}},\"setDepositFeePercent(uint256)\":{\"params\":{\"_depositFeePercent\":\"The new deposit fee percent\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateReward(address)\":{\"details\":\"Needs to be called before any deposit or withdrawal\",\"params\":{\"_token\":\"The address of the reward token\"}},\"withdraw(uint256)\":{\"params\":{\"_amount\":\"The amount of JOE to withdraw\"}}},\"stateVariables\":{\"internalJoeBalance\":{\"details\":\"Internal balance of JOE, this gets updated on user deposits / withdrawals this allows to reward users with JOE\"},\"userInfo\":{\"details\":\"Info of each user that stakes JOE\"}},\"title\":\"Stable JOE Staking\",\"version\":1},\"userdoc\":{\"events\":{\"ClaimReward(address,address,uint256)\":{\"notice\":\"Emitted when a user claims reward\"},\"Deposit(address,uint256,uint256)\":{\"notice\":\"Emitted when a user deposits JOE\"},\"DepositFeeChanged(uint256,uint256)\":{\"notice\":\"Emitted when owner changes the deposit fee percentage\"},\"EmergencyWithdraw(address,uint256)\":{\"notice\":\"Emitted when a user emergency withdraws its JOE\"},\"RewardTokenAdded(address)\":{\"notice\":\"Emitted when owner adds a token to the reward tokens list\"},\"RewardTokenRemoved(address)\":{\"notice\":\"Emitted when owner removes a token from the reward tokens list\"},\"Withdraw(address,uint256)\":{\"notice\":\"Emitted when a user withdraws JOE\"}},\"kind\":\"user\",\"methods\":{\"ACC_REWARD_PER_SHARE_PRECISION()\":{\"notice\":\"The precision of `accRewardPerShare`\"},\"DEPOSIT_FEE_PERCENT_PRECISION()\":{\"notice\":\"The precision of `depositFeePercent`\"},\"accRewardPerShare(address)\":{\"notice\":\"Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`\"},\"addRewardToken(address)\":{\"notice\":\"Add a reward token\"},\"deposit(uint256)\":{\"notice\":\"Deposit JOE for reward token allocation\"},\"depositFeePercent()\":{\"notice\":\"The deposit fee, scaled to `DEPOSIT_FEE_PERCENT_PRECISION`\"},\"emergencyWithdraw()\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY\"},\"getUserInfo(address,address)\":{\"notice\":\"Get user info\"},\"initialize(address,address,address,uint256)\":{\"notice\":\"Initialize a new StableJoeStaking contract\"},\"lastRewardBalance(address)\":{\"notice\":\"Last reward balance of `token`\"},\"pendingReward(address,address)\":{\"notice\":\"View function to see pending reward token on frontend\"},\"removeRewardToken(address)\":{\"notice\":\"Remove a reward token\"},\"rewardTokens(uint256)\":{\"notice\":\"Array of tokens that users can claim\"},\"rewardTokensLength()\":{\"notice\":\"Get the number of reward tokens\"},\"setDepositFeePercent(uint256)\":{\"notice\":\"Set the deposit fee percent\"},\"updateReward(address)\":{\"notice\":\"Update reward variables\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw JOE and harvest the rewards\"}},\"notice\":\"StableJoeStaking is a contract that allows JOE deposits and receives stablecoins sent by MoneyMaker's daily harvests. Users deposit JOE and receive a share of what has been sent by MoneyMaker based on their participation of the total deposited JOE. It is similar to a MasterChef, but we allow for claiming of different reward tokens (in case at some point we wish to change the stablecoin rewarded). Every time `updateReward(token)` is called, We distribute the balance of that tokens as rewards to users that are currently staking inside this contract, and they can claim it using `withdraw(0)`\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StableJoeStaking.sol\":\"StableJoeStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe422bf8bc61fe71acb27de4631400cdbb9b532df4de4f255eab093ac356f9745\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe9ecc18d06bcc5aa48c40a98333540248b6c1c18ecb6262329c06d3f0cbb45ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xae7044b7c89ed74327b0979ae6f317c65d87b8d17a42d0c62d698d77d5de5511\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8457e15aa90badabe0d6ef6f572f1ebd47bebf156921c825ae6e009dda15b706\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"contracts/StableJoeStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title Stable JOE Staking\\n * @author Trader Joe\\n * @notice StableJoeStaking is a contract that allows JOE deposits and receives stablecoins sent by MoneyMaker's daily\\n * harvests. Users deposit JOE and receive a share of what has been sent by MoneyMaker based on their participation of\\n * the total deposited JOE. It is similar to a MasterChef, but we allow for claiming of different reward tokens\\n * (in case at some point we wish to change the stablecoin rewarded).\\n * Every time `updateReward(token)` is called, We distribute the balance of that tokens as rewards to users that are\\n * currently staking inside this contract, and they can claim it using `withdraw(0)`\\n */\\ncontract StableJoeStaking is Initializable, OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice Info of each user\\n    struct UserInfo {\\n        uint256 amount;\\n        mapping(IERC20Upgradeable => uint256) rewardDebt;\\n        /**\\n         * @notice We do some fancy math here. Basically, any point in time, the amount of JOEs\\n         * entitled to a user but is pending to be distributed is:\\n         *\\n         *   pending reward = (user.amount * accRewardPerShare) - user.rewardDebt[token]\\n         *\\n         * Whenever a user deposits or withdraws JOE. Here's what happens:\\n         *   1. accRewardPerShare (and `lastRewardBalance`) gets updated\\n         *   2. User receives the pending reward sent to his/her address\\n         *   3. User's `amount` gets updated\\n         *   4. User's `rewardDebt[token]` gets updated\\n         */\\n    }\\n\\n    IERC20Upgradeable public joe;\\n\\n    /// @dev Internal balance of JOE, this gets updated on user deposits / withdrawals\\n    /// this allows to reward users with JOE\\n    uint256 internalJoeBalance;\\n    /// @notice Array of tokens that users can claim\\n    IERC20Upgradeable[] public rewardTokens;\\n    mapping(IERC20Upgradeable => bool) public isRewardToken;\\n    /// @notice Last reward balance of `token`\\n    mapping(IERC20Upgradeable => uint256) public lastRewardBalance;\\n\\n    address public feeCollector;\\n\\n    /// @notice The deposit fee, scaled to `DEPOSIT_FEE_PERCENT_PRECISION`\\n    uint256 public depositFeePercent;\\n    /// @notice The precision of `depositFeePercent`\\n    uint256 public DEPOSIT_FEE_PERCENT_PRECISION;\\n\\n    /// @notice Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`\\n    mapping(IERC20Upgradeable => uint256) public accRewardPerShare;\\n    /// @notice The precision of `accRewardPerShare`\\n    uint256 public ACC_REWARD_PER_SHARE_PRECISION;\\n\\n    /// @dev Info of each user that stakes JOE\\n    mapping(address => UserInfo) private userInfo;\\n\\n    /// @notice Emitted when a user deposits JOE\\n    event Deposit(address indexed user, uint256 amount, uint256 fee);\\n\\n    /// @notice Emitted when owner changes the deposit fee percentage\\n    event DepositFeeChanged(uint256 newFee, uint256 oldFee);\\n\\n    /// @notice Emitted when a user withdraws JOE\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    /// @notice Emitted when a user claims reward\\n    event ClaimReward(address indexed user, address indexed rewardToken, uint256 amount);\\n\\n    /// @notice Emitted when a user emergency withdraws its JOE\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n\\n    /// @notice Emitted when owner adds a token to the reward tokens list\\n    event RewardTokenAdded(address token);\\n\\n    /// @notice Emitted when owner removes a token from the reward tokens list\\n    event RewardTokenRemoved(address token);\\n\\n    /**\\n     * @notice Initialize a new StableJoeStaking contract\\n     * @dev This contract needs to receive an ERC20 `_rewardToken` in order to distribute them\\n     * (with MoneyMaker in our case)\\n     * @param _rewardToken The address of the ERC20 reward token\\n     * @param _joe The address of the JOE token\\n     * @param _feeCollector The address where deposit fees will be sent\\n     * @param _depositFeePercent The deposit fee percent, scalled to 1e18, e.g. 3% is 3e16\\n     */\\n    function initialize(\\n        IERC20Upgradeable _rewardToken,\\n        IERC20Upgradeable _joe,\\n        address _feeCollector,\\n        uint256 _depositFeePercent\\n    ) external initializer {\\n        __Ownable_init();\\n        require(_feeCollector != address(0), \\\"StableJoeStaking: fee collector can't be address 0\\\");\\n        require(_depositFeePercent <= 5e17, \\\"StableJoeStaking: max deposit fee can't be greater than 50%\\\");\\n\\n        joe = _joe;\\n        depositFeePercent = _depositFeePercent;\\n        feeCollector = _feeCollector;\\n\\n        isRewardToken[_rewardToken] = true;\\n        rewardTokens.push(_rewardToken);\\n        DEPOSIT_FEE_PERCENT_PRECISION = 1e18;\\n        ACC_REWARD_PER_SHARE_PRECISION = 1e24;\\n    }\\n\\n    /**\\n     * @notice Deposit JOE for reward token allocation\\n     * @param _amount The amount of JOE to deposit\\n     */\\n    function deposit(uint256 _amount) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        uint256 _fee = _amount.mul(depositFeePercent).div(DEPOSIT_FEE_PERCENT_PRECISION);\\n        uint256 _amountMinusFee = _amount.sub(_fee);\\n\\n        uint256 _previousAmount = user.amount;\\n        uint256 _newAmount = user.amount.add(_amountMinusFee);\\n        user.amount = _newAmount;\\n\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i; i < _len; i++) {\\n            IERC20Upgradeable _token = rewardTokens[i];\\n            updateReward(_token);\\n\\n            uint256 _previousRewardDebt = user.rewardDebt[_token];\\n            user.rewardDebt[_token] = _newAmount.mul(accRewardPerShare[_token]).div(ACC_REWARD_PER_SHARE_PRECISION);\\n\\n            if (_previousAmount != 0) {\\n                uint256 _pending = _previousAmount\\n                    .mul(accRewardPerShare[_token])\\n                    .div(ACC_REWARD_PER_SHARE_PRECISION)\\n                    .sub(_previousRewardDebt);\\n                if (_pending != 0) {\\n                    safeTokenTransfer(_token, msg.sender, _pending);\\n                    emit ClaimReward(msg.sender, address(_token), _pending);\\n                }\\n            }\\n        }\\n\\n        internalJoeBalance = internalJoeBalance.add(_amountMinusFee);\\n        joe.safeTransferFrom(msg.sender, feeCollector, _fee);\\n        joe.safeTransferFrom(msg.sender, address(this), _amountMinusFee);\\n        emit Deposit(msg.sender, _amountMinusFee, _fee);\\n    }\\n\\n    /**\\n     * @notice Get user info\\n     * @param _user The address of the user\\n     * @param _rewardToken The address of the reward token\\n     * @return The amount of JOE user has deposited\\n     * @return The reward debt for the chosen token\\n     */\\n    function getUserInfo(address _user, IERC20Upgradeable _rewardToken) external view returns (uint256, uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        return (user.amount, user.rewardDebt[_rewardToken]);\\n    }\\n\\n    /**\\n     * @notice Get the number of reward tokens\\n     * @return The length of the array\\n     */\\n    function rewardTokensLength() external view returns (uint256) {\\n        return rewardTokens.length;\\n    }\\n\\n    /**\\n     * @notice Add a reward token\\n     * @param _rewardToken The address of the reward token\\n     */\\n    function addRewardToken(IERC20Upgradeable _rewardToken) external onlyOwner {\\n        require(\\n            !isRewardToken[_rewardToken] && address(_rewardToken) != address(0),\\n            \\\"StableJoeStaking: token can't be added\\\"\\n        );\\n        require(rewardTokens.length < 25, \\\"StableJoeStaking: list of token too big\\\");\\n        rewardTokens.push(_rewardToken);\\n        isRewardToken[_rewardToken] = true;\\n        updateReward(_rewardToken);\\n        emit RewardTokenAdded(address(_rewardToken));\\n    }\\n\\n    /**\\n     * @notice Remove a reward token\\n     * @param _rewardToken The address of the reward token\\n     */\\n    function removeRewardToken(IERC20Upgradeable _rewardToken) external onlyOwner {\\n        require(isRewardToken[_rewardToken], \\\"StableJoeStaking: token can't be removed\\\");\\n        updateReward(_rewardToken);\\n        isRewardToken[_rewardToken] = false;\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i; i < _len; i++) {\\n            if (rewardTokens[i] == _rewardToken) {\\n                rewardTokens[i] = rewardTokens[_len - 1];\\n                rewardTokens.pop();\\n                break;\\n            }\\n        }\\n        emit RewardTokenRemoved(address(_rewardToken));\\n    }\\n\\n    /**\\n     * @notice Set the deposit fee percent\\n     * @param _depositFeePercent The new deposit fee percent\\n     */\\n    function setDepositFeePercent(uint256 _depositFeePercent) external onlyOwner {\\n        require(_depositFeePercent <= 5e17, \\\"StableJoeStaking: deposit fee can't be greater than 50%\\\");\\n        uint256 oldFee = depositFeePercent;\\n        depositFeePercent = _depositFeePercent;\\n        emit DepositFeeChanged(_depositFeePercent, oldFee);\\n    }\\n\\n    /**\\n     * @notice View function to see pending reward token on frontend\\n     * @param _user The address of the user\\n     * @param _token The address of the token\\n     * @return `_user`'s pending reward token\\n     */\\n    function pendingReward(address _user, IERC20Upgradeable _token) external view returns (uint256) {\\n        require(isRewardToken[_token], \\\"StableJoeStaking: wrong reward token\\\");\\n        UserInfo storage user = userInfo[_user];\\n        uint256 _totalJoe = internalJoeBalance;\\n        uint256 _accRewardTokenPerShare = accRewardPerShare[_token];\\n\\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\\n        uint256 _rewardBalance = _token == joe ? _currRewardBalance.sub(_totalJoe) : _currRewardBalance;\\n\\n        if (_rewardBalance != lastRewardBalance[_token] && _totalJoe != 0) {\\n            uint256 _accruedReward = _rewardBalance.sub(lastRewardBalance[_token]);\\n            _accRewardTokenPerShare = _accRewardTokenPerShare.add(\\n                _accruedReward.mul(ACC_REWARD_PER_SHARE_PRECISION).div(_totalJoe)\\n            );\\n        }\\n        return\\n            user.amount.mul(_accRewardTokenPerShare).div(ACC_REWARD_PER_SHARE_PRECISION).sub(user.rewardDebt[_token]);\\n    }\\n\\n    /**\\n     * @notice Withdraw JOE and harvest the rewards\\n     * @param _amount The amount of JOE to withdraw\\n     */\\n    function withdraw(uint256 _amount) external {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 _previousAmount = user.amount;\\n        require(_amount <= _previousAmount, \\\"StableJoeStaking: withdraw amount exceeds balance\\\");\\n        uint256 _newAmount = user.amount.sub(_amount);\\n        user.amount = _newAmount;\\n\\n        uint256 _len = rewardTokens.length;\\n        if (_previousAmount != 0) {\\n            for (uint256 i; i < _len; i++) {\\n                IERC20Upgradeable _token = rewardTokens[i];\\n                updateReward(_token);\\n\\n                uint256 _pending = _previousAmount\\n                    .mul(accRewardPerShare[_token])\\n                    .div(ACC_REWARD_PER_SHARE_PRECISION)\\n                    .sub(user.rewardDebt[_token]);\\n                user.rewardDebt[_token] = _newAmount.mul(accRewardPerShare[_token]).div(ACC_REWARD_PER_SHARE_PRECISION);\\n\\n                if (_pending != 0) {\\n                    safeTokenTransfer(_token, msg.sender, _pending);\\n                    emit ClaimReward(msg.sender, address(_token), _pending);\\n                }\\n            }\\n        }\\n\\n        internalJoeBalance = internalJoeBalance.sub(_amount);\\n        joe.safeTransfer(msg.sender, _amount);\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY\\n     */\\n    function emergencyWithdraw() external {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        uint256 _amount = user.amount;\\n        user.amount = 0;\\n        uint256 _len = rewardTokens.length;\\n        for (uint256 i; i < _len; i++) {\\n            IERC20Upgradeable _token = rewardTokens[i];\\n            user.rewardDebt[_token] = 0;\\n        }\\n        joe.safeTransfer(msg.sender, _amount);\\n        emit EmergencyWithdraw(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Update reward variables\\n     * @param _token The address of the reward token\\n     * @dev Needs to be called before any deposit or withdrawal\\n     */\\n    function updateReward(IERC20Upgradeable _token) public {\\n        require(isRewardToken[_token], \\\"StableJoeStaking: wrong reward token\\\");\\n\\n        uint256 _totalJoe = internalJoeBalance;\\n\\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\\n        uint256 _rewardBalance = _token == joe ? _currRewardBalance.sub(_totalJoe) : _currRewardBalance;\\n\\n        // Did StableJoeStaking receive any token\\n        if (_rewardBalance == lastRewardBalance[_token] || _totalJoe == 0) {\\n            return;\\n        }\\n\\n        uint256 _accruedReward = _rewardBalance.sub(lastRewardBalance[_token]);\\n\\n        accRewardPerShare[_token] = accRewardPerShare[_token].add(\\n            _accruedReward.mul(ACC_REWARD_PER_SHARE_PRECISION).div(_totalJoe)\\n        );\\n        lastRewardBalance[_token] = _rewardBalance;\\n    }\\n\\n    /**\\n     * @notice Safe token transfer function, just in case if rounding error\\n     * causes pool to not have enough reward tokens\\n     * @param _token The address of then token to transfer\\n     * @param _to The address that will receive `_amount` `rewardToken`\\n     * @param _amount The amount to send to `_to`\\n     */\\n    function safeTokenTransfer(\\n        IERC20Upgradeable _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        uint256 _currRewardBalance = _token.balanceOf(address(this));\\n        uint256 _rewardBalance = _token == joe ? _currRewardBalance.sub(internalJoeBalance) : _currRewardBalance;\\n\\n        if (_amount > _rewardBalance) {\\n            lastRewardBalance[_token] = lastRewardBalance[_token].sub(_rewardBalance);\\n            _token.safeTransfer(_to, _rewardBalance);\\n        } else {\\n            lastRewardBalance[_token] = lastRewardBalance[_token].sub(_amount);\\n            _token.safeTransfer(_to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8f97fb666c45d1d6f1e93b5a1ded000bd0f3485554d12af2dc2981788acfe1e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506120de806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80639ced7e76116100c3578063c415b95c1161007c578063c415b95c1461034c578063cc1252ae14610354578063cf756fdf1461035c578063db2e21bc14610398578063f2801fe7146103a0578063f2fde38b146103e75761014d565b80639ced7e76146102af578063a610708a146102dd578063b5fd73f8146102e5578063b6b55f251461031f578063b985a3a01461033c578063bf199e62146103445761014d565b80635dcea4d4116101155780635dcea4d4146101f45780635fc0d9e01461021a578063632447c914610240578063715018a6146102665780637bb7bed11461026e5780638da5cb5b146102a75761014d565b80631c03e6cc146101525780632052eb771461017a5780632e1a7d4d146101975780633c97d5ae146101b45780633d509c97146101ce575b600080fd5b6101786004803603602081101561016857600080fd5b50356001600160a01b031661040d565b005b6101786004803603602081101561019057600080fd5b50356105bd565b610178600480360360208110156101ad57600080fd5b50356106a3565b6101bc61089f565b60408051918252519081900360200190f35b610178600480360360208110156101e457600080fd5b50356001600160a01b03166108a5565b6101bc6004803603602081101561020a57600080fd5b50356001600160a01b0316610a9b565b6101bc6004803603602081101561023057600080fd5b50356001600160a01b0316610aad565b6101786004803603602081101561025657600080fd5b50356001600160a01b0316610abf565b610178610c7e565b61028b6004803603602081101561028457600080fd5b5035610d20565b604080516001600160a01b039092168252519081900360200190f35b61028b610d4a565b6101bc600480360360408110156102c557600080fd5b506001600160a01b0381358116916020013516610d59565b6101bc610f30565b61030b600480360360208110156102fb57600080fd5b50356001600160a01b0316610f36565b604080519115158252519081900360200190f35b6101786004803603602081101561033557600080fd5b5035610f4b565b61028b61114d565b6101bc61115c565b61028b611162565b6101bc611171565b6101786004803603608081101561037257600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135611177565b610178611351565b6103ce600480360360408110156103b657600080fd5b506001600160a01b038135811691602001351661140c565b6040805192835260208301919091528051918290030190f35b610178600480360360208110156103fd57600080fd5b50356001600160a01b031661143f565b610415611538565b6033546001600160a01b03908116911614610465576040805162461bcd60e51b8152602060048201819052602482015260008051602061202e833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526068602052604090205460ff1615801561049657506001600160a01b03811615155b6104d15760405162461bcd60e51b8152600401808060200182810382526026815260200180611fcd6026913960400191505060405180910390fd5b6067546019116105125760405162461bcd60e51b8152600401808060200182810382526027815260200180611e566027913960400191505060405180910390fd5b6067805460018082019092557f9787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae0180546001600160a01b0319166001600160a01b0384169081179091556000908152606860205260409020805460ff1916909117905561057e81610abf565b604080516001600160a01b038316815290517ff3e4c2c64e71e6ba2eaab9a599bced62f9eb91d2cda610bf41aa8c80ff2cf8269181900360200190a150565b6105c5611538565b6033546001600160a01b03908116911614610615576040805162461bcd60e51b8152602060048201819052602482015260008051602061202e833981519152604482015290519081900360640190fd5b6706f05b59d3b2000081111561065c5760405162461bcd60e51b8152600401808060200182810382526037815260200180611f1f6037913960400191505060405180910390fd5b606b805490829055604080518381526020810183905281517f6be5411ea11f30380402ca68832d060d744cbc5f62d2344495c10256ba93904a929181900390910190a15050565b336000908152606f602052604090208054808311156106f35760405162461bcd60e51b815260040180806020018281038252603181526020018061204e6031913960400191505060405180910390fd5b8154600090610702908561153c565b808455606754909150821561083b5760005b818110156108395760006067828154811061072b57fe5b6000918252602090912001546001600160a01b0316905061074b81610abf565b6001600160a01b0381166000908152600187016020908152604080832054606e54606d909352908320546107949261078e91610788908b90611585565b906115de565b9061153c565b606e546001600160a01b0384166000908152606d60205260409020549192506107c291610788908890611585565b6001600160a01b0383166000908152600189016020526040902055801561082f576107ee823383611620565b6040805182815290516001600160a01b0384169133917f7e77f685b38c861064cb08f2776eb5dfd3c82f652ed9f21221b8c53b75628e519181900360200190a35b5050600101610714565b505b606654610848908661153c565b606655606554610862906001600160a01b03163387611769565b60408051868152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25050505050565b606e5481565b6108ad611538565b6033546001600160a01b039081169116146108fd576040805162461bcd60e51b8152602060048201819052602482015260008051602061202e833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526068602052604090205460ff166109545760405162461bcd60e51b8152600401808060200182810382526028815260200180611f846028913960400191505060405180910390fd5b61095d81610abf565b6001600160a01b0381166000908152606860205260408120805460ff19169055606754905b81811015610a5a57826001600160a01b0316606782815481106109a157fe5b6000918252602090912001546001600160a01b03161415610a5257606760018303815481106109cc57fe5b600091825260209091200154606780546001600160a01b0390921691839081106109f257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506067805480610a2b57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610a5a565b600101610982565b50604080516001600160a01b038416815290517f66257bcef574219c04f7c05f7a1c78d599da10491294c92a5805c48b4cdf50099181900360200190a15050565b606d6020526000908152604090205481565b60696020526000908152604090205481565b6001600160a01b03811660009081526068602052604090205460ff16610b165760405162461bcd60e51b8152600401808060200182810382526024815260200180611efb6024913960400191505060405180910390fd5b606654604080516370a0823160e01b815230600482015290516000916001600160a01b038516916370a0823191602480820192602092909190829003018186803b158015610b6357600080fd5b505afa158015610b77573d6000803e3d6000fd5b505050506040513d6020811015610b8d57600080fd5b50516065549091506000906001600160a01b03858116911614610bb05781610bba565b610bba828461153c565b6001600160a01b038516600090815260696020526040902054909150811480610be1575082155b15610bee57505050610c7b565b6001600160a01b038416600090815260696020526040812054610c1290839061153c565b9050610c4f610c3085610788606e548561158590919063ffffffff16565b6001600160a01b0387166000908152606d6020526040902054906117c0565b6001600160a01b0386166000908152606d60209081526040808320939093556069905220919091555050505b50565b610c86611538565b6033546001600160a01b03908116911614610cd6576040805162461bcd60e51b8152602060048201819052602482015260008051602061202e833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60678181548110610d3057600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031690565b6001600160a01b03811660009081526068602052604081205460ff16610db05760405162461bcd60e51b8152600401808060200182810382526024815260200180611efb6024913960400191505060405180910390fd5b6001600160a01b038084166000908152606f60209081526040808320606654948716808552606d84528285205483516370a0823160e01b815230600482015293519296959094909391926370a08231926024808201939291829003018186803b158015610e1c57600080fd5b505afa158015610e30573d6000803e3d6000fd5b505050506040513d6020811015610e4657600080fd5b50516065549091506000906001600160a01b03888116911614610e695781610e73565b610e73828561153c565b6001600160a01b0388166000908152606960205260409020549091508114801590610e9d57508315155b15610eef576001600160a01b038716600090815260696020526040812054610ec690839061153c565b9050610eeb610ee486610788606e548561158590919063ffffffff16565b85906117c0565b9350505b6001600160a01b0387166000908152600186016020526040902054606e548654610f22929161078e916107889088611585565b955050505050505b92915050565b606c5481565b60686020526000908152604090205460ff1681565b336000908152606f60205260408120606c54606b54919291610f739190610788908690611585565b90506000610f81848361153c565b83549091506000610f9282846117c0565b80865560675490915060005b818110156110c257600060678281548110610fb557fe5b6000918252602090912001546001600160a01b03169050610fd581610abf565b6001600160a01b0381166000908152600189016020908152604080832054606e54606d90935292205461100e9190610788908890611585565b6001600160a01b038316600090815260018b01602052604090205585156110b857606e546001600160a01b0383166000908152606d6020526040812054909161106291849161078e91610788908c90611585565b905080156110b657611075833383611620565b6040805182815290516001600160a01b0385169133917f7e77f685b38c861064cb08f2776eb5dfd3c82f652ed9f21221b8c53b75628e519181900360200190a35b505b5050600101610f9e565b506066546110d090856117c0565b606655606a546065546110f2916001600160a01b03918216913391168861181a565b60655461110a906001600160a01b031633308761181a565b6040805185815260208101879052815133927f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15928290030190a250505050505050565b6065546001600160a01b031681565b60675490565b606a546001600160a01b031681565b606b5481565b600054610100900460ff1680611190575061119061187a565b8061119e575060005460ff16155b6111d95760405162461bcd60e51b815260040180806020018281038252602e815260200180611f56602e913960400191505060405180910390fd5b600054610100900460ff16158015611204576000805460ff1961ff0019909116610100171660011790555b61120c611880565b6001600160a01b0383166112515760405162461bcd60e51b8152600401808060200182810382526032815260200180611ec96032913960400191505060405180910390fd5b6706f05b59d3b200008211156112985760405162461bcd60e51b815260040180806020018281038252603b815260200180611ff3603b913960400191505060405180910390fd5b606580546001600160a01b038087166001600160a01b031992831617909255606b849055606a80548684169083161790559086166000818152606860205260408120805460ff191660019081179091556067805491820181559091527f9787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae018054909216179055670de0b6b3a7640000606c5569d3c21bcecceda1000000606e55801561134a576000805461ff00191690555b5050505050565b336000908152606f60205260408120805482825560675491929091905b818110156113b95760006067828154811061138557fe5b60009182526020808320909101546001600160a01b031682526001878101909152604082209190915591909101905061136e565b506065546113d1906001600160a01b03163384611769565b60408051838152905133917f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695919081900360200190a2505050565b6001600160a01b038083166000908152606f60209081526040808320805494861684526001019091529020549250929050565b611447611538565b6033546001600160a01b03908116911614611497576040805162461bcd60e51b8152602060048201819052602482015260008051602061202e833981519152604482015290519081900360640190fd5b6001600160a01b0381166114dc5760405162461bcd60e51b8152600401808060200182810382526026815260200180611e7d6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600061157e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611931565b9392505050565b60008261159457506000610f2a565b828202828482816115a157fe5b041461157e5760405162461bcd60e51b8152600401808060200182810382526021815260200180611fac6021913960400191505060405180910390fd5b600061157e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506119c8565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561166f57600080fd5b505afa158015611683573d6000803e3d6000fd5b505050506040513d602081101561169957600080fd5b50516065549091506000906001600160a01b038681169116146116bc57816116ca565b6066546116ca90839061153c565b905080831115611723576001600160a01b0385166000908152606960205260409020546116f7908261153c565b6001600160a01b03861660008181526069602052604090209190915561171e908583611769565b61134a565b6001600160a01b038516600090815260696020526040902054611746908461153c565b6001600160a01b03861660008181526069602052604090209190915561134a9085855b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526117bb908490611a2d565b505050565b60008282018381101561157e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611874908590611a2d565b50505050565b303b1590565b600054610100900460ff1680611899575061189961187a565b806118a7575060005460ff16155b6118e25760405162461bcd60e51b815260040180806020018281038252602e815260200180611f56602e913960400191505060405180910390fd5b600054610100900460ff1615801561190d576000805460ff1961ff0019909116610100171660011790555b611915611ade565b61191d611b7e565b8015610c7b576000805461ff001916905550565b600081848411156119c05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561198557818101518382015260200161196d565b50505050905090810190601f1680156119b25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183611a175760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561198557818101518382015260200161196d565b506000838581611a2357fe5b0495945050505050565b6000611a82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c779092919063ffffffff16565b8051909150156117bb57808060200190516020811015611aa157600080fd5b50516117bb5760405162461bcd60e51b815260040180806020018281038252602a81526020018061207f602a913960400191505060405180910390fd5b600054610100900460ff1680611af75750611af761187a565b80611b05575060005460ff16155b611b405760405162461bcd60e51b815260040180806020018281038252602e815260200180611f56602e913960400191505060405180910390fd5b600054610100900460ff1615801561191d576000805460ff1961ff0019909116610100171660011790558015610c7b576000805461ff001916905550565b600054610100900460ff1680611b975750611b9761187a565b80611ba5575060005460ff16155b611be05760405162461bcd60e51b815260040180806020018281038252602e815260200180611f56602e913960400191505060405180910390fd5b600054610100900460ff16158015611c0b576000805460ff1961ff0019909116610100171660011790555b6000611c15611538565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610c7b576000805461ff001916905550565b6060611c868484600085611c8e565b949350505050565b606082471015611ccf5760405162461bcd60e51b8152600401808060200182810382526026815260200180611ea36026913960400191505060405180910390fd5b611cd885611de9565b611d29576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611d675780518252601f199092019160209182019101611d48565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611dc9576040519150601f19603f3d011682016040523d82523d6000602084013e611dce565b606091505b5091509150611dde828286611def565b979650505050505050565b3b151590565b60608315611dfe57508161157e565b825115611e0e5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561198557818101518382015260200161196d56fe537461626c654a6f655374616b696e673a206c697374206f6620746f6b656e20746f6f206269674f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c537461626c654a6f655374616b696e673a2066656520636f6c6c6563746f722063616e277420626520616464726573732030537461626c654a6f655374616b696e673a2077726f6e672072657761726420746f6b656e537461626c654a6f655374616b696e673a206465706f736974206665652063616e27742062652067726561746572207468616e20353025496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564537461626c654a6f655374616b696e673a20746f6b656e2063616e27742062652072656d6f766564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77537461626c654a6f655374616b696e673a20746f6b656e2063616e2774206265206164646564537461626c654a6f655374616b696e673a206d6178206465706f736974206665652063616e27742062652067726561746572207468616e203530254f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572537461626c654a6f655374616b696e673a20776974686472617720616d6f756e7420657863656564732062616c616e63655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122091035d0c7538927bdf03b9e1838abd1edb7fd4f901f422c2794e5ac0cb22b9de64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80639ced7e76116100c3578063c415b95c1161007c578063c415b95c1461034c578063cc1252ae14610354578063cf756fdf1461035c578063db2e21bc14610398578063f2801fe7146103a0578063f2fde38b146103e75761014d565b80639ced7e76146102af578063a610708a146102dd578063b5fd73f8146102e5578063b6b55f251461031f578063b985a3a01461033c578063bf199e62146103445761014d565b80635dcea4d4116101155780635dcea4d4146101f45780635fc0d9e01461021a578063632447c914610240578063715018a6146102665780637bb7bed11461026e5780638da5cb5b146102a75761014d565b80631c03e6cc146101525780632052eb771461017a5780632e1a7d4d146101975780633c97d5ae146101b45780633d509c97146101ce575b600080fd5b6101786004803603602081101561016857600080fd5b50356001600160a01b031661040d565b005b6101786004803603602081101561019057600080fd5b50356105bd565b610178600480360360208110156101ad57600080fd5b50356106a3565b6101bc61089f565b60408051918252519081900360200190f35b610178600480360360208110156101e457600080fd5b50356001600160a01b03166108a5565b6101bc6004803603602081101561020a57600080fd5b50356001600160a01b0316610a9b565b6101bc6004803603602081101561023057600080fd5b50356001600160a01b0316610aad565b6101786004803603602081101561025657600080fd5b50356001600160a01b0316610abf565b610178610c7e565b61028b6004803603602081101561028457600080fd5b5035610d20565b604080516001600160a01b039092168252519081900360200190f35b61028b610d4a565b6101bc600480360360408110156102c557600080fd5b506001600160a01b0381358116916020013516610d59565b6101bc610f30565b61030b600480360360208110156102fb57600080fd5b50356001600160a01b0316610f36565b604080519115158252519081900360200190f35b6101786004803603602081101561033557600080fd5b5035610f4b565b61028b61114d565b6101bc61115c565b61028b611162565b6101bc611171565b6101786004803603608081101561037257600080fd5b506001600160a01b03813581169160208101358216916040820135169060600135611177565b610178611351565b6103ce600480360360408110156103b657600080fd5b506001600160a01b038135811691602001351661140c565b6040805192835260208301919091528051918290030190f35b610178600480360360208110156103fd57600080fd5b50356001600160a01b031661143f565b610415611538565b6033546001600160a01b03908116911614610465576040805162461bcd60e51b8152602060048201819052602482015260008051602061202e833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526068602052604090205460ff1615801561049657506001600160a01b03811615155b6104d15760405162461bcd60e51b8152600401808060200182810382526026815260200180611fcd6026913960400191505060405180910390fd5b6067546019116105125760405162461bcd60e51b8152600401808060200182810382526027815260200180611e566027913960400191505060405180910390fd5b6067805460018082019092557f9787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae0180546001600160a01b0319166001600160a01b0384169081179091556000908152606860205260409020805460ff1916909117905561057e81610abf565b604080516001600160a01b038316815290517ff3e4c2c64e71e6ba2eaab9a599bced62f9eb91d2cda610bf41aa8c80ff2cf8269181900360200190a150565b6105c5611538565b6033546001600160a01b03908116911614610615576040805162461bcd60e51b8152602060048201819052602482015260008051602061202e833981519152604482015290519081900360640190fd5b6706f05b59d3b2000081111561065c5760405162461bcd60e51b8152600401808060200182810382526037815260200180611f1f6037913960400191505060405180910390fd5b606b805490829055604080518381526020810183905281517f6be5411ea11f30380402ca68832d060d744cbc5f62d2344495c10256ba93904a929181900390910190a15050565b336000908152606f602052604090208054808311156106f35760405162461bcd60e51b815260040180806020018281038252603181526020018061204e6031913960400191505060405180910390fd5b8154600090610702908561153c565b808455606754909150821561083b5760005b818110156108395760006067828154811061072b57fe5b6000918252602090912001546001600160a01b0316905061074b81610abf565b6001600160a01b0381166000908152600187016020908152604080832054606e54606d909352908320546107949261078e91610788908b90611585565b906115de565b9061153c565b606e546001600160a01b0384166000908152606d60205260409020549192506107c291610788908890611585565b6001600160a01b0383166000908152600189016020526040902055801561082f576107ee823383611620565b6040805182815290516001600160a01b0384169133917f7e77f685b38c861064cb08f2776eb5dfd3c82f652ed9f21221b8c53b75628e519181900360200190a35b5050600101610714565b505b606654610848908661153c565b606655606554610862906001600160a01b03163387611769565b60408051868152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25050505050565b606e5481565b6108ad611538565b6033546001600160a01b039081169116146108fd576040805162461bcd60e51b8152602060048201819052602482015260008051602061202e833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526068602052604090205460ff166109545760405162461bcd60e51b8152600401808060200182810382526028815260200180611f846028913960400191505060405180910390fd5b61095d81610abf565b6001600160a01b0381166000908152606860205260408120805460ff19169055606754905b81811015610a5a57826001600160a01b0316606782815481106109a157fe5b6000918252602090912001546001600160a01b03161415610a5257606760018303815481106109cc57fe5b600091825260209091200154606780546001600160a01b0390921691839081106109f257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506067805480610a2b57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610a5a565b600101610982565b50604080516001600160a01b038416815290517f66257bcef574219c04f7c05f7a1c78d599da10491294c92a5805c48b4cdf50099181900360200190a15050565b606d6020526000908152604090205481565b60696020526000908152604090205481565b6001600160a01b03811660009081526068602052604090205460ff16610b165760405162461bcd60e51b8152600401808060200182810382526024815260200180611efb6024913960400191505060405180910390fd5b606654604080516370a0823160e01b815230600482015290516000916001600160a01b038516916370a0823191602480820192602092909190829003018186803b158015610b6357600080fd5b505afa158015610b77573d6000803e3d6000fd5b505050506040513d6020811015610b8d57600080fd5b50516065549091506000906001600160a01b03858116911614610bb05781610bba565b610bba828461153c565b6001600160a01b038516600090815260696020526040902054909150811480610be1575082155b15610bee57505050610c7b565b6001600160a01b038416600090815260696020526040812054610c1290839061153c565b9050610c4f610c3085610788606e548561158590919063ffffffff16565b6001600160a01b0387166000908152606d6020526040902054906117c0565b6001600160a01b0386166000908152606d60209081526040808320939093556069905220919091555050505b50565b610c86611538565b6033546001600160a01b03908116911614610cd6576040805162461bcd60e51b8152602060048201819052602482015260008051602061202e833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b60678181548110610d3057600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031690565b6001600160a01b03811660009081526068602052604081205460ff16610db05760405162461bcd60e51b8152600401808060200182810382526024815260200180611efb6024913960400191505060405180910390fd5b6001600160a01b038084166000908152606f60209081526040808320606654948716808552606d84528285205483516370a0823160e01b815230600482015293519296959094909391926370a08231926024808201939291829003018186803b158015610e1c57600080fd5b505afa158015610e30573d6000803e3d6000fd5b505050506040513d6020811015610e4657600080fd5b50516065549091506000906001600160a01b03888116911614610e695781610e73565b610e73828561153c565b6001600160a01b0388166000908152606960205260409020549091508114801590610e9d57508315155b15610eef576001600160a01b038716600090815260696020526040812054610ec690839061153c565b9050610eeb610ee486610788606e548561158590919063ffffffff16565b85906117c0565b9350505b6001600160a01b0387166000908152600186016020526040902054606e548654610f22929161078e916107889088611585565b955050505050505b92915050565b606c5481565b60686020526000908152604090205460ff1681565b336000908152606f60205260408120606c54606b54919291610f739190610788908690611585565b90506000610f81848361153c565b83549091506000610f9282846117c0565b80865560675490915060005b818110156110c257600060678281548110610fb557fe5b6000918252602090912001546001600160a01b03169050610fd581610abf565b6001600160a01b0381166000908152600189016020908152604080832054606e54606d90935292205461100e9190610788908890611585565b6001600160a01b038316600090815260018b01602052604090205585156110b857606e546001600160a01b0383166000908152606d6020526040812054909161106291849161078e91610788908c90611585565b905080156110b657611075833383611620565b6040805182815290516001600160a01b0385169133917f7e77f685b38c861064cb08f2776eb5dfd3c82f652ed9f21221b8c53b75628e519181900360200190a35b505b5050600101610f9e565b506066546110d090856117c0565b606655606a546065546110f2916001600160a01b03918216913391168861181a565b60655461110a906001600160a01b031633308761181a565b6040805185815260208101879052815133927f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15928290030190a250505050505050565b6065546001600160a01b031681565b60675490565b606a546001600160a01b031681565b606b5481565b600054610100900460ff1680611190575061119061187a565b8061119e575060005460ff16155b6111d95760405162461bcd60e51b815260040180806020018281038252602e815260200180611f56602e913960400191505060405180910390fd5b600054610100900460ff16158015611204576000805460ff1961ff0019909116610100171660011790555b61120c611880565b6001600160a01b0383166112515760405162461bcd60e51b8152600401808060200182810382526032815260200180611ec96032913960400191505060405180910390fd5b6706f05b59d3b200008211156112985760405162461bcd60e51b815260040180806020018281038252603b815260200180611ff3603b913960400191505060405180910390fd5b606580546001600160a01b038087166001600160a01b031992831617909255606b849055606a80548684169083161790559086166000818152606860205260408120805460ff191660019081179091556067805491820181559091527f9787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae018054909216179055670de0b6b3a7640000606c5569d3c21bcecceda1000000606e55801561134a576000805461ff00191690555b5050505050565b336000908152606f60205260408120805482825560675491929091905b818110156113b95760006067828154811061138557fe5b60009182526020808320909101546001600160a01b031682526001878101909152604082209190915591909101905061136e565b506065546113d1906001600160a01b03163384611769565b60408051838152905133917f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd9695919081900360200190a2505050565b6001600160a01b038083166000908152606f60209081526040808320805494861684526001019091529020549250929050565b611447611538565b6033546001600160a01b03908116911614611497576040805162461bcd60e51b8152602060048201819052602482015260008051602061202e833981519152604482015290519081900360640190fd5b6001600160a01b0381166114dc5760405162461bcd60e51b8152600401808060200182810382526026815260200180611e7d6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b600061157e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611931565b9392505050565b60008261159457506000610f2a565b828202828482816115a157fe5b041461157e5760405162461bcd60e51b8152600401808060200182810382526021815260200180611fac6021913960400191505060405180910390fd5b600061157e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506119c8565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561166f57600080fd5b505afa158015611683573d6000803e3d6000fd5b505050506040513d602081101561169957600080fd5b50516065549091506000906001600160a01b038681169116146116bc57816116ca565b6066546116ca90839061153c565b905080831115611723576001600160a01b0385166000908152606960205260409020546116f7908261153c565b6001600160a01b03861660008181526069602052604090209190915561171e908583611769565b61134a565b6001600160a01b038516600090815260696020526040902054611746908461153c565b6001600160a01b03861660008181526069602052604090209190915561134a9085855b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526117bb908490611a2d565b505050565b60008282018381101561157e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611874908590611a2d565b50505050565b303b1590565b600054610100900460ff1680611899575061189961187a565b806118a7575060005460ff16155b6118e25760405162461bcd60e51b815260040180806020018281038252602e815260200180611f56602e913960400191505060405180910390fd5b600054610100900460ff1615801561190d576000805460ff1961ff0019909116610100171660011790555b611915611ade565b61191d611b7e565b8015610c7b576000805461ff001916905550565b600081848411156119c05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561198557818101518382015260200161196d565b50505050905090810190601f1680156119b25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183611a175760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561198557818101518382015260200161196d565b506000838581611a2357fe5b0495945050505050565b6000611a82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c779092919063ffffffff16565b8051909150156117bb57808060200190516020811015611aa157600080fd5b50516117bb5760405162461bcd60e51b815260040180806020018281038252602a81526020018061207f602a913960400191505060405180910390fd5b600054610100900460ff1680611af75750611af761187a565b80611b05575060005460ff16155b611b405760405162461bcd60e51b815260040180806020018281038252602e815260200180611f56602e913960400191505060405180910390fd5b600054610100900460ff1615801561191d576000805460ff1961ff0019909116610100171660011790558015610c7b576000805461ff001916905550565b600054610100900460ff1680611b975750611b9761187a565b80611ba5575060005460ff16155b611be05760405162461bcd60e51b815260040180806020018281038252602e815260200180611f56602e913960400191505060405180910390fd5b600054610100900460ff16158015611c0b576000805460ff1961ff0019909116610100171660011790555b6000611c15611538565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610c7b576000805461ff001916905550565b6060611c868484600085611c8e565b949350505050565b606082471015611ccf5760405162461bcd60e51b8152600401808060200182810382526026815260200180611ea36026913960400191505060405180910390fd5b611cd885611de9565b611d29576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611d675780518252601f199092019160209182019101611d48565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611dc9576040519150601f19603f3d011682016040523d82523d6000602084013e611dce565b606091505b5091509150611dde828286611def565b979650505050505050565b3b151590565b60608315611dfe57508161157e565b825115611e0e5782518084602001fd5b60405162461bcd60e51b815260206004820181815284516024840152845185939192839260440191908501908083836000831561198557818101518382015260200161196d56fe537461626c654a6f655374616b696e673a206c697374206f6620746f6b656e20746f6f206269674f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c537461626c654a6f655374616b696e673a2066656520636f6c6c6563746f722063616e277420626520616464726573732030537461626c654a6f655374616b696e673a2077726f6e672072657761726420746f6b656e537461626c654a6f655374616b696e673a206465706f736974206665652063616e27742062652067726561746572207468616e20353025496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564537461626c654a6f655374616b696e673a20746f6b656e2063616e27742062652072656d6f766564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77537461626c654a6f655374616b696e673a20746f6b656e2063616e2774206265206164646564537461626c654a6f655374616b696e673a206d6178206465706f736974206665652063616e27742062652067726561746572207468616e203530254f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572537461626c654a6f655374616b696e673a20776974686472617720616d6f756e7420657863656564732062616c616e63655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a264697066735822122091035d0c7538927bdf03b9e1838abd1edb7fd4f901f422c2794e5ac0cb22b9de64736f6c63430007060033",
  "devdoc": {
    "author": "Trader Joe",
    "kind": "dev",
    "methods": {
      "addRewardToken(address)": {
        "params": {
          "_rewardToken": "The address of the reward token"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "The amount of JOE to deposit"
        }
      },
      "getUserInfo(address,address)": {
        "params": {
          "_rewardToken": "The address of the reward token",
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "The amount of JOE user has deposited",
          "_1": "The reward debt for the chosen token"
        }
      },
      "initialize(address,address,address,uint256)": {
        "details": "This contract needs to receive an ERC20 `_rewardToken` in order to distribute them (with MoneyMaker in our case)",
        "params": {
          "_depositFeePercent": "The deposit fee percent, scalled to 1e18, e.g. 3% is 3e16",
          "_feeCollector": "The address where deposit fees will be sent",
          "_joe": "The address of the JOE token",
          "_rewardToken": "The address of the ERC20 reward token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingReward(address,address)": {
        "params": {
          "_token": "The address of the token",
          "_user": "The address of the user"
        },
        "returns": {
          "_0": "`_user`'s pending reward token"
        }
      },
      "removeRewardToken(address)": {
        "params": {
          "_rewardToken": "The address of the reward token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardTokensLength()": {
        "returns": {
          "_0": "The length of the array"
        }
      },
      "setDepositFeePercent(uint256)": {
        "params": {
          "_depositFeePercent": "The new deposit fee percent"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateReward(address)": {
        "details": "Needs to be called before any deposit or withdrawal",
        "params": {
          "_token": "The address of the reward token"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": "The amount of JOE to withdraw"
        }
      }
    },
    "stateVariables": {
      "internalJoeBalance": {
        "details": "Internal balance of JOE, this gets updated on user deposits / withdrawals this allows to reward users with JOE"
      },
      "userInfo": {
        "details": "Info of each user that stakes JOE"
      }
    },
    "title": "Stable JOE Staking",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ClaimReward(address,address,uint256)": {
        "notice": "Emitted when a user claims reward"
      },
      "Deposit(address,uint256,uint256)": {
        "notice": "Emitted when a user deposits JOE"
      },
      "DepositFeeChanged(uint256,uint256)": {
        "notice": "Emitted when owner changes the deposit fee percentage"
      },
      "EmergencyWithdraw(address,uint256)": {
        "notice": "Emitted when a user emergency withdraws its JOE"
      },
      "RewardTokenAdded(address)": {
        "notice": "Emitted when owner adds a token to the reward tokens list"
      },
      "RewardTokenRemoved(address)": {
        "notice": "Emitted when owner removes a token from the reward tokens list"
      },
      "Withdraw(address,uint256)": {
        "notice": "Emitted when a user withdraws JOE"
      }
    },
    "kind": "user",
    "methods": {
      "ACC_REWARD_PER_SHARE_PRECISION()": {
        "notice": "The precision of `accRewardPerShare`"
      },
      "DEPOSIT_FEE_PERCENT_PRECISION()": {
        "notice": "The precision of `depositFeePercent`"
      },
      "accRewardPerShare(address)": {
        "notice": "Accumulated `token` rewards per share, scaled to `ACC_REWARD_PER_SHARE_PRECISION`"
      },
      "addRewardToken(address)": {
        "notice": "Add a reward token"
      },
      "deposit(uint256)": {
        "notice": "Deposit JOE for reward token allocation"
      },
      "depositFeePercent()": {
        "notice": "The deposit fee, scaled to `DEPOSIT_FEE_PERCENT_PRECISION`"
      },
      "emergencyWithdraw()": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY"
      },
      "getUserInfo(address,address)": {
        "notice": "Get user info"
      },
      "initialize(address,address,address,uint256)": {
        "notice": "Initialize a new StableJoeStaking contract"
      },
      "lastRewardBalance(address)": {
        "notice": "Last reward balance of `token`"
      },
      "pendingReward(address,address)": {
        "notice": "View function to see pending reward token on frontend"
      },
      "removeRewardToken(address)": {
        "notice": "Remove a reward token"
      },
      "rewardTokens(uint256)": {
        "notice": "Array of tokens that users can claim"
      },
      "rewardTokensLength()": {
        "notice": "Get the number of reward tokens"
      },
      "setDepositFeePercent(uint256)": {
        "notice": "Set the deposit fee percent"
      },
      "updateReward(address)": {
        "notice": "Update reward variables"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw JOE and harvest the rewards"
      }
    },
    "notice": "StableJoeStaking is a contract that allows JOE deposits and receives stablecoins sent by MoneyMaker's daily harvests. Users deposit JOE and receive a share of what has been sent by MoneyMaker based on their participation of the total deposited JOE. It is similar to a MasterChef, but we allow for claiming of different reward tokens (in case at some point we wish to change the stablecoin rewarded). Every time `updateReward(token)` is called, We distribute the balance of that tokens as rewards to users that are currently staking inside this contract, and they can claim it using `withdraw(0)`",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 376,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 379,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 43,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 55,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 173,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3783,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "joe",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20Upgradeable)519"
      },
      {
        "astId": 3786,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "internalJoeBalance",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 3790,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_contract(IERC20Upgradeable)519)dyn_storage"
      },
      {
        "astId": 3794,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "isRewardToken",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_contract(IERC20Upgradeable)519,t_bool)"
      },
      {
        "astId": 3799,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "lastRewardBalance",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_contract(IERC20Upgradeable)519,t_uint256)"
      },
      {
        "astId": 3801,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "feeCollector",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 3804,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "depositFeePercent",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 3807,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "DEPOSIT_FEE_PERCENT_PRECISION",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 3812,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "accRewardPerShare",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_contract(IERC20Upgradeable)519,t_uint256)"
      },
      {
        "astId": 3815,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "ACC_REWARD_PER_SHARE_PRECISION",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 3820,
        "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_struct(UserInfo)3781_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20Upgradeable)519)dyn_storage": {
        "base": "t_contract(IERC20Upgradeable)519",
        "encoding": "dynamic_array",
        "label": "contract IERC20Upgradeable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)519": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3781_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StableJoeStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3781_storage"
      },
      "t_mapping(t_contract(IERC20Upgradeable)519,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)519",
        "label": "mapping(contract IERC20Upgradeable => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20Upgradeable)519,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)519",
        "label": "mapping(contract IERC20Upgradeable => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UserInfo)3781_storage": {
        "encoding": "inplace",
        "label": "struct StableJoeStaking.UserInfo",
        "members": [
          {
            "astId": 3776,
            "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3780,
            "contract": "contracts/StableJoeStaking.sol:StableJoeStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_contract(IERC20Upgradeable)519,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}