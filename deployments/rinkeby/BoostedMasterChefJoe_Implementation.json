{
  "address": "0xe401fE8d00ADDF71641574f25FCFC7a27e67e8Ef",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "veJoeShareBp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Init",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "veJoeShareBp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accJoePerShare",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accJoePerFactorPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "JOE",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MASTER_CHEF_V2",
      "outputs": [
        {
          "internalType": "contract IMasterChefJoe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MASTER_PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VEJOE",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_allocPoint",
          "type": "uint96"
        },
        {
          "internalType": "uint32",
          "name": "_veJoeShareBp",
          "type": "uint32"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimableJoe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestFromMasterChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_dummyToken",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMasterChefJoe",
          "name": "_MASTER_CHEF_V2",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_joe",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_veJoe",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_MASTER_PID",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joePerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingJoe",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bonusTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bonusTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "pendingBonusToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "allocPoint",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "accJoePerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accJoePerFactorPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "lastRewardTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "veJoeShareBp",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "totalFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLpSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pools",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "_allocPoint",
          "type": "uint96"
        },
        {
          "internalType": "uint32",
          "name": "_veJoeShareBp",
          "type": "uint32"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_overwrite",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newVeJoeBalance",
          "type": "uint256"
        }
      ],
      "name": "updateFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "factor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0f92afa10a992332718aa33e30de09e6552f707f04fa3bbf69091b100dc39ce",
  "receipt": {
    "to": null,
    "from": "0x1d9D82344E76769EB727521822D1EacB834A9024",
    "contractAddress": "0xe401fE8d00ADDF71641574f25FCFC7a27e67e8Ef",
    "transactionIndex": 3,
    "gasUsed": "2968326",
    "logsBloom": "0x
    "blockHash": "0x782f799fd3a44a813aa159bebb09bb2b19be209fe7f518611e2e48e7304cb0c2",
    "transactionHash": "0xf0f92afa10a992332718aa33e30de09e6552f707f04fa3bbf69091b100dc39ce",
    "logs": [],
    "blockNumber": 10361380,
    "cumulativeGasUsed": "3448905",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d7494b22c5c58c075701b1a950ade0ea",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veJoeShareBp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Init\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"veJoeShareBp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accJoePerShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accJoePerFactorPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"JOE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_CHEF_V2\",\"outputs\":[{\"internalType\":\"contract IMasterChefJoe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MASTER_PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VEJOE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_allocPoint\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"_veJoeShareBp\",\"type\":\"uint32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableJoe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFromMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_dummyToken\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMasterChefJoe\",\"name\":\"_MASTER_CHEF_V2\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_joe\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_veJoe\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MASTER_PID\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joePerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingJoe\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bonusTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bonusTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pendingBonusToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"allocPoint\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"accJoePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accJoePerFactorPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"veJoeShareBp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"totalFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLpSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"_allocPoint\",\"type\":\"uint96\"},{\"internalType\":\"uint32\",\"name\":\"_veJoeShareBp\",\"type\":\"uint32\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_overwrite\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newVeJoeBalance\",\"type\":\"uint256\"}],\"name\":\"updateFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint96,uint32,address,address)\":{\"params\":{\"_allocPoint\":\"AP of the new pool.\",\"_lpToken\":\"Address of the LP ERC-20 token.\",\"_rewarder\":\"Address of the rewarder delegate.\",\"_veJoeShareBp\":\"Share of rewards allocated in proportion to user's liquidity and veJoe balance\"}},\"deposit(uint256,uint256)\":{\"params\":{\"_amount\":\"LP token amount to deposit\",\"_pid\":\"The index of the pool. See `poolInfo`\"}},\"emergencyWithdraw(uint256)\":{\"params\":{\"_pid\":\"The index of the pool. See `poolInfo`\"}},\"init(address)\":{\"params\":{\"_dummyToken\":\"The address of the ERC-20 token to deposit into MCJV2.\"}},\"initialize(address,address,address,uint256)\":{\"params\":{\"_MASTER_CHEF_V2\":\"The MCJV2 contract address\",\"_MASTER_PID\":\"The pool ID of the dummy token on the base MCJV2 contract\",\"_joe\":\"The JOE token contract address\",\"_veJoe\":\"The veJOE token contract address\"}},\"joePerSec()\":{\"returns\":{\"amount\":\"The amount of JOE emitted per second\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingTokens(uint256,address)\":{\"params\":{\"_pid\":\"The index of the pool. See `poolInfo`\",\"_user\":\"Address of user\"},\"returns\":{\"bonusTokenAddress\":\"The address of the bonus reward.\",\"bonusTokenSymbol\":\"The symbol of the bonus token.\",\"pendingBonusToken\":\"The amount of bonus rewards pending.\",\"pendingJoe\":\"JOE reward for a given user.\"}},\"poolLength()\":{\"returns\":{\"pools\":\"The amount of pools in this farm\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"set(uint256,uint96,uint32,address,bool)\":{\"params\":{\"_allocPoint\":\"New AP of the pool\",\"_overwrite\":\"True if _rewarder should be `set`. Otherwise `_rewarder` is ignored\",\"_pid\":\"The index of the pool. See `poolInfo`\",\"_rewarder\":\"Address of the rewarder delegate\",\"_veJoeShareBp\":\"Share of rewards allocated in proportion to user's liquidity and veJoe balance\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateFactor(address,uint256)\":{\"params\":{\"_newVeJoeBalance\":\"The new balance of the users veJoe\",\"_user\":\"The users address we are updating\"}},\"updatePool(uint256)\":{\"params\":{\"_pid\":\"The index of the pool. See `poolInfo`\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"LP token amount to withdraw\",\"_pid\":\"The index of the pool. See `poolInfo`\"}}},\"stateVariables\":{\"checkPoolDuplicate\":{\"details\":\"Maps an address to a bool to assert that a token isn't added twice\"},\"claimableJoe\":{\"details\":\"Amount of claimable Joe the user has, this is required as we need to update rewardDebt after a token operation but we don't want to send a reward at this point. This amount gets added onto the pending amount when a user claims\"},\"totalAllocPoint\":{\"details\":\"Total allocation points. Must be the sum of all allocation points in all pools\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"JOE()\":{\"notice\":\"Address of JOE contract\"},\"MASTER_CHEF_V2()\":{\"notice\":\"Address of MCJV2 contract\"},\"MASTER_PID()\":{\"notice\":\"The index of BMCJ master pool in MCJV2\"},\"VEJOE()\":{\"notice\":\"Address of veJOE contract\"},\"add(uint96,uint32,address,address)\":{\"notice\":\"Add a new LP to the pool. Can only be called by the owner.\"},\"deposit(uint256,uint256)\":{\"notice\":\"Deposit LP tokens to BMCJ for JOE allocation\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"Withdraw without caring about rewards (EMERGENCY ONLY)\"},\"harvestFromMasterChef()\":{\"notice\":\"Harvests JOE from `MASTER_CHEF_V2` MCJV2 and pool `MASTER_PID` to this BMCJ contract\"},\"init(address)\":{\"notice\":\"Deposits a dummy token to `MASTER_CHEF_V2` MCJV2. This is required because MCJV2 holds the minting rights for JOE.  Any balance of transaction sender in `_dummyToken` is transferred. The allocation point for the pool on MCJV2 is the total allocation point for all pools that receive double incentives.\"},\"joePerSec()\":{\"notice\":\"Calculates and returns the `amount` of JOE per second\"},\"massUpdatePools()\":{\"notice\":\"Update reward variables for all pools. Be careful of gas spending!\"},\"pendingTokens(uint256,address)\":{\"notice\":\"View function to see pending JOE on frontend\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each BMCJ pool\"},\"poolLength()\":{\"notice\":\"Returns the number of BMCJ pools.\"},\"set(uint256,uint96,uint32,address,bool)\":{\"notice\":\"Update the given pool's JOE allocation point and `IRewarder` contract. Can only be called by the owner.\"},\"updateFactor(address,uint256)\":{\"notice\":\"Updates factor after after a veJoe token operation. This function needs to be called by the veJoe contract after every mint / burn.\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each user that stakes LP tokens\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraw LP tokens from BMCJ\"}},\"notice\":\"The (older) MasterChefJoeV2 contract gives out a constant number of JOE tokens per block.  It is the only address with minting rights for JOE.  The idea for this BoostedMasterChefJoe (BMCJ) contract is therefore to be the owner of a dummy token that is deposited into the MasterChefJoeV2 (MCJV2) contract.  The allocation point for this pool on MCJV2 is the total allocation point for all pools on BMCJ. This MasterChef also skews how many rewards users receive, it does this by modifying the algorithm that calculates how many tokens are rewarded to depositors. Whereas MasterChef calculates rewards based on emission rate and total liquidity, this version uses adjusted parameters to this calculation. A users `boostedAmount` (liquidity multiplier) is calculated by the actual supplied liquidity multiplied by a boost factor. The boost factor is calculated by the amount of veJOE held by the user over the total veJOE amount held by all pool participants. Total liquidity is the sum of all boosted liquidity.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BoostedMasterChefJoe.sol\":\"BoostedMasterChefJoe\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe422bf8bc61fe71acb27de4631400cdbb9b532df4de4f255eab093ac356f9745\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe9ecc18d06bcc5aa48c40a98333540248b6c1c18ecb6262329c06d3f0cbb45ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xae7044b7c89ed74327b0979ae6f317c65d87b8d17a42d0c62d698d77d5de5511\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"contracts/BoostedMasterChefJoe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IMasterChefJoe.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./libraries/BoringJoeERC20.sol\\\";\\nimport \\\"./traderjoe/libraries/Math.sol\\\";\\n\\n/// @notice The (older) MasterChefJoeV2 contract gives out a constant number of JOE\\n/// tokens per block.  It is the only address with minting rights for JOE.  The idea\\n/// for this BoostedMasterChefJoe (BMCJ) contract is therefore to be the owner of a\\n/// dummy token that is deposited into the MasterChefJoeV2 (MCJV2) contract.  The\\n/// allocation point for this pool on MCJV2 is the total allocation point for all\\n/// pools on BMCJ.\\n///\\n/// This MasterChef also skews how many rewards users receive, it does this by\\n/// modifying the algorithm that calculates how many tokens are rewarded to\\n/// depositors. Whereas MasterChef calculates rewards based on emission rate and\\n/// total liquidity, this version uses adjusted parameters to this calculation.\\n///\\n/// A users `boostedAmount` (liquidity multiplier) is calculated by the actual supplied\\n/// liquidity multiplied by a boost factor. The boost factor is calculated by the\\n/// amount of veJOE held by the user over the total veJOE amount held by all pool\\n/// participants. Total liquidity is the sum of all boosted liquidity.\\ncontract BoostedMasterChefJoe is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using BoringJoeERC20 for IERC20;\\n    using SafeMathUpgradeable for uint256;\\n\\n    /// @notice Info of each BMCJ user\\n    /// `amount` LP token amount the user has provided\\n    /// `rewardDebt` The amount of JOE entitled to the user\\n    /// `factor` the users factor, use _getUserFactor\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 factor;\\n    }\\n\\n    /// @notice Info of each BMCJ pool\\n    /// `allocPoint` The amount of allocation points assigned to the pool\\n    /// Also known as the amount of JOE to distribute per block\\n    struct PoolInfo {\\n        // Address are stored in 160 bits, so we store allocPoint in 96 bits to\\n        // optimize storage (160 + 96 = 256)\\n        IERC20 lpToken;\\n        uint96 allocPoint;\\n        uint256 accJoePerShare;\\n        uint256 accJoePerFactorPerShare;\\n        // Address are stored in 160 bits, so we store lastRewardTimestamp in 64 bits and\\n        // veJoeShareBp in 32 bits to optimize storage (160 + 64 + 32 = 256)\\n        uint64 lastRewardTimestamp;\\n        IRewarder rewarder;\\n        // Share of the reward to distribute to veJoe holders\\n        uint32 veJoeShareBp;\\n        // The sum of all veJoe held by users participating in this farm\\n        // This value is updated when\\n        // - A user enter/leaves a farm\\n        // - A user claims veJOE\\n        // - A user unstakes JOE\\n        uint256 totalFactor;\\n        // The total LP supply of the farm\\n        // This is the sum of all users boosted amounts in the farm. Updated when\\n        // someone deposits or withdraws.\\n        // This is used instead of the usual `lpToken.balanceOf(address(this))` for security reasons\\n        uint256 totalLpSupply;\\n    }\\n\\n    /// @notice Address of MCJV2 contract\\n    IMasterChefJoe public MASTER_CHEF_V2;\\n    /// @notice Address of JOE contract\\n    IERC20 public JOE;\\n    /// @notice Address of veJOE contract\\n    IERC20 public VEJOE;\\n    /// @notice The index of BMCJ master pool in MCJV2\\n    uint256 public MASTER_PID;\\n\\n    /// @notice Info of each BMCJ pool\\n    PoolInfo[] public poolInfo;\\n    /// @dev Maps an address to a bool to assert that a token isn't added twice\\n    mapping(IERC20 => bool) private checkPoolDuplicate;\\n\\n    /// @notice Info of each user that stakes LP tokens\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools\\n    uint256 public totalAllocPoint;\\n    uint256 private ACC_TOKEN_PRECISION;\\n\\n    /// @dev Amount of claimable Joe the user has, this is required as we\\n    /// need to update rewardDebt after a token operation but we don't\\n    /// want to send a reward at this point. This amount gets added onto\\n    /// the pending amount when a user claims\\n    mapping(uint256 => mapping(address => uint256)) public claimableJoe;\\n\\n    event Add(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint256 veJoeShareBp,\\n        IERC20 indexed lpToken,\\n        IRewarder indexed rewarder\\n    );\\n    event Set(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        uint256 veJoeShareBp,\\n        IRewarder indexed rewarder,\\n        bool overwrite\\n    );\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardTimestamp,\\n        uint256 lpSupply,\\n        uint256 accJoePerShare,\\n        uint256 accJoePerFactorPerShare\\n    );\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Init(uint256 amount);\\n\\n    /// @param _MASTER_CHEF_V2 The MCJV2 contract address\\n    /// @param _joe The JOE token contract address\\n    /// @param _veJoe The veJOE token contract address\\n    /// @param _MASTER_PID The pool ID of the dummy token on the base MCJV2 contract\\n    function initialize(\\n        IMasterChefJoe _MASTER_CHEF_V2,\\n        IERC20 _joe,\\n        IERC20 _veJoe,\\n        uint256 _MASTER_PID\\n    ) public initializer {\\n        __Ownable_init();\\n        MASTER_CHEF_V2 = _MASTER_CHEF_V2;\\n        JOE = _joe;\\n        VEJOE = _veJoe;\\n        MASTER_PID = _MASTER_PID;\\n\\n        ACC_TOKEN_PRECISION = 1e18;\\n    }\\n\\n    /// @notice Deposits a dummy token to `MASTER_CHEF_V2` MCJV2. This is required because MCJV2\\n    /// holds the minting rights for JOE.  Any balance of transaction sender in `_dummyToken` is transferred.\\n    /// The allocation point for the pool on MCJV2 is the total allocation point for all pools that receive\\n    /// double incentives.\\n    /// @param _dummyToken The address of the ERC-20 token to deposit into MCJV2.\\n    function init(IERC20 _dummyToken) external onlyOwner {\\n        require(\\n            _dummyToken.balanceOf(address(MASTER_CHEF_V2)) == 0,\\n            \\\"BoostedMasterChefJoe: Already has a balance of dummy token\\\"\\n        );\\n        uint256 balance = _dummyToken.balanceOf(_msgSender());\\n        require(balance != 0, \\\"BoostedMasterChefJoe: Balance must exceed 0\\\");\\n        _dummyToken.safeTransferFrom(_msgSender(), address(this), balance);\\n        _dummyToken.approve(address(MASTER_CHEF_V2), balance);\\n        MASTER_CHEF_V2.deposit(MASTER_PID, balance);\\n        emit Init(balance);\\n    }\\n\\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\\n    /// @param _allocPoint AP of the new pool.\\n    /// @param _veJoeShareBp Share of rewards allocated in proportion to user's liquidity\\n    /// and veJoe balance\\n    /// @param _lpToken Address of the LP ERC-20 token.\\n    /// @param _rewarder Address of the rewarder delegate.\\n    function add(\\n        uint96 _allocPoint,\\n        uint32 _veJoeShareBp,\\n        IERC20 _lpToken,\\n        IRewarder _rewarder\\n    ) external onlyOwner {\\n        require(!checkPoolDuplicate[_lpToken], \\\"BoostedMasterChefJoe: LP already added\\\");\\n        require(_veJoeShareBp <= 10_000, \\\"BoostedMasterChefJoe: veJoeShareBp needs to be lower than 10000\\\");\\n        require(poolInfo.length <= 50, \\\"BoostedMasterChefJoe: Too many pools\\\");\\n        checkPoolDuplicate[_lpToken] = true;\\n        // Sanity check to ensure _lpToken is an ERC20 token\\n        _lpToken.balanceOf(address(this));\\n        // Sanity check if we add a rewarder\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onJoeReward(address(0), 0);\\n        }\\n\\n        massUpdatePools();\\n\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                accJoePerShare: 0,\\n                accJoePerFactorPerShare: 0,\\n                lastRewardTimestamp: uint64(block.timestamp),\\n                rewarder: _rewarder,\\n                veJoeShareBp: _veJoeShareBp,\\n                totalFactor: 0,\\n                totalLpSupply: 0\\n            })\\n        );\\n        emit Add(poolInfo.length - 1, _allocPoint, _veJoeShareBp, _lpToken, _rewarder);\\n    }\\n\\n    /// @notice Update the given pool's JOE allocation point and `IRewarder` contract. Can only be called by the owner.\\n    /// @param _pid The index of the pool. See `poolInfo`\\n    /// @param _allocPoint New AP of the pool\\n    /// @param _veJoeShareBp Share of rewards allocated in proportion to user's liquidity\\n    /// and veJoe balance\\n    /// @param _rewarder Address of the rewarder delegate\\n    /// @param _overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored\\n    function set(\\n        uint256 _pid,\\n        uint96 _allocPoint,\\n        uint32 _veJoeShareBp,\\n        IRewarder _rewarder,\\n        bool _overwrite\\n    ) external onlyOwner {\\n        require(_veJoeShareBp <= 10_000, \\\"BoostedMasterChefJoe: veJoeShareBp needs to be lower than 10000\\\");\\n        massUpdatePools();\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint).sub(pool.allocPoint);\\n        pool.allocPoint = _allocPoint;\\n        pool.veJoeShareBp = _veJoeShareBp;\\n        if (_overwrite) {\\n            if (address(_rewarder) != address(0)) {\\n                // Sanity check\\n                _rewarder.onJoeReward(address(0), 0);\\n            }\\n            pool.rewarder = _rewarder;\\n        }\\n\\n        emit Set(_pid, _allocPoint, _veJoeShareBp, _overwrite ? _rewarder : pool.rewarder, _overwrite);\\n    }\\n\\n    /// @notice Deposit LP tokens to BMCJ for JOE allocation\\n    /// @param _pid The index of the pool. See `poolInfo`\\n    /// @param _amount LP token amount to deposit\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\n        harvestFromMasterChef();\\n        updatePool(_pid);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        // Pay a user any pending rewards\\n        if (user.amount != 0) {\\n            _harvestJoe(user, pool, _pid);\\n        }\\n\\n        uint256 balanceBefore = pool.lpToken.balanceOf(address(this));\\n        pool.lpToken.safeTransferFrom(_msgSender(), address(this), _amount);\\n        uint256 receivedAmount = pool.lpToken.balanceOf(address(this)).sub(balanceBefore);\\n\\n        _updateUserAndPool(user, pool, receivedAmount, true);\\n\\n        IRewarder _rewarder = pool.rewarder;\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onJoeReward(_msgSender(), user.amount);\\n        }\\n        emit Deposit(_msgSender(), _pid, receivedAmount);\\n    }\\n\\n    /// @notice Withdraw LP tokens from BMCJ\\n    /// @param _pid The index of the pool. See `poolInfo`\\n    /// @param _amount LP token amount to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        harvestFromMasterChef();\\n        updatePool(_pid);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n        require(user.amount >= _amount, \\\"BoostedMasterChefJoe: withdraw not good\\\");\\n\\n        if (user.amount != 0) {\\n            _harvestJoe(user, pool, _pid);\\n        }\\n\\n        _updateUserAndPool(user, pool, _amount, false);\\n\\n        pool.lpToken.safeTransfer(_msgSender(), _amount);\\n\\n        IRewarder _rewarder = pool.rewarder;\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onJoeReward(_msgSender(), user.amount);\\n        }\\n        emit Withdraw(_msgSender(), _pid, _amount);\\n    }\\n\\n    /// @notice Updates factor after after a veJoe token operation.\\n    /// This function needs to be called by the veJoe contract after\\n    /// every mint / burn.\\n    /// @param _user The users address we are updating\\n    /// @param _newVeJoeBalance The new balance of the users veJoe\\n    function updateFactor(address _user, uint256 _newVeJoeBalance) external {\\n        require(_msgSender() == address(VEJOE), \\\"BoostedMasterChefJoe: Caller not veJOE\\\");\\n        uint256 len = poolInfo.length;\\n        uint256 _ACC_TOKEN_PRECISION = ACC_TOKEN_PRECISION;\\n\\n        for (uint256 pid; pid < len; ++pid) {\\n            UserInfo storage user = userInfo[pid][_user];\\n\\n            // Skip if user doesn't have any deposit in the pool\\n            uint256 amount = user.amount;\\n            if (amount == 0) {\\n                continue;\\n            }\\n\\n            PoolInfo storage pool = poolInfo[pid];\\n\\n            updatePool(pid);\\n            uint256 oldFactor = user.factor;\\n            (uint256 accJoePerShare, uint256 accJoePerFactorPerShare) = (\\n                pool.accJoePerShare,\\n                pool.accJoePerFactorPerShare\\n            );\\n            uint256 pending = amount\\n                .mul(accJoePerShare)\\n                .add(oldFactor.mul(accJoePerFactorPerShare))\\n                .div(_ACC_TOKEN_PRECISION)\\n                .sub(user.rewardDebt);\\n\\n            // Increase claimableJoe\\n            claimableJoe[pid][_user] = claimableJoe[pid][_user].add(pending);\\n\\n            // Update users veJoeBalance\\n            uint256 newFactor = _getUserFactor(amount, _newVeJoeBalance);\\n            user.factor = newFactor;\\n            pool.totalFactor = pool.totalFactor.add(newFactor).sub(oldFactor);\\n\\n            user.rewardDebt = amount.mul(accJoePerShare).add(newFactor.mul(accJoePerFactorPerShare)).div(\\n                _ACC_TOKEN_PRECISION\\n            );\\n\\n            // Update the pool total veJoe\\n        }\\n    }\\n\\n    /// @notice Withdraw without caring about rewards (EMERGENCY ONLY)\\n    /// @param _pid The index of the pool. See `poolInfo`\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\n\\n        pool.totalFactor = pool.totalFactor.sub(user.factor);\\n        pool.totalLpSupply = pool.totalLpSupply.sub(user.amount);\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.factor = 0;\\n\\n        IRewarder _rewarder = pool.rewarder;\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onJoeReward(_msgSender(), 0);\\n        }\\n\\n        // Note: transfer can fail or succeed if `amount` is zero\\n        pool.lpToken.safeTransfer(_msgSender(), amount);\\n        emit EmergencyWithdraw(_msgSender(), _pid, amount);\\n    }\\n\\n    /// @notice Calculates and returns the `amount` of JOE per second\\n    /// @return amount The amount of JOE emitted per second\\n    function joePerSec() public view returns (uint256 amount) {\\n        uint256 total = 1000;\\n        uint256 lpPercent = total.sub(MASTER_CHEF_V2.devPercent()).sub(MASTER_CHEF_V2.treasuryPercent()).sub(\\n            MASTER_CHEF_V2.investorPercent()\\n        );\\n        uint256 lpShare = MASTER_CHEF_V2.joePerSec().mul(lpPercent).div(total);\\n        amount = lpShare.mul(MASTER_CHEF_V2.poolInfo(MASTER_PID).allocPoint).div(MASTER_CHEF_V2.totalAllocPoint());\\n    }\\n\\n    /// @notice View function to see pending JOE on frontend\\n    /// @param _pid The index of the pool. See `poolInfo`\\n    /// @param _user Address of user\\n    /// @return pendingJoe JOE reward for a given user.\\n    /// @return bonusTokenAddress The address of the bonus reward.\\n    /// @return bonusTokenSymbol The symbol of the bonus token.\\n    /// @return pendingBonusToken The amount of bonus rewards pending.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingJoe,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        )\\n    {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 accJoePerShare = pool.accJoePerShare;\\n        uint256 accJoePerFactorPerShare = pool.accJoePerFactorPerShare;\\n\\n        if (block.timestamp > pool.lastRewardTimestamp && pool.totalLpSupply != 0 && pool.allocPoint != 0) {\\n            uint256 secondsElapsed = block.timestamp - pool.lastRewardTimestamp;\\n            uint256 joeReward = secondsElapsed.mul(joePerSec()).mul(pool.allocPoint).div(totalAllocPoint);\\n            accJoePerShare = accJoePerShare.add(\\n                joeReward.mul(ACC_TOKEN_PRECISION).mul(10_000 - pool.veJoeShareBp).div(pool.totalLpSupply.mul(10_000))\\n            );\\n            if (pool.veJoeShareBp != 0 && pool.totalFactor != 0) {\\n                accJoePerFactorPerShare = accJoePerFactorPerShare.add(\\n                    joeReward.mul(ACC_TOKEN_PRECISION).mul(pool.veJoeShareBp).div(pool.totalFactor.mul(10_000))\\n                );\\n            }\\n        }\\n\\n        pendingJoe = (user.amount.mul(accJoePerShare))\\n            .add(user.factor.mul(accJoePerFactorPerShare))\\n            .div(ACC_TOKEN_PRECISION)\\n            .add(claimableJoe[_pid][_user])\\n            .sub(user.rewardDebt);\\n\\n        // If it's a double reward farm, we return info about the bonus token\\n        if (address(pool.rewarder) != address(0)) {\\n            bonusTokenAddress = address(pool.rewarder.rewardToken());\\n            bonusTokenSymbol = IERC20(bonusTokenAddress).safeSymbol();\\n            pendingBonusToken = pool.rewarder.pendingTokens(_user);\\n        }\\n    }\\n\\n    /// @notice Returns the number of BMCJ pools.\\n    /// @return pools The amount of pools in this farm\\n    function poolLength() external view returns (uint256 pools) {\\n        pools = poolInfo.length;\\n    }\\n\\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 len = poolInfo.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            updatePool(i);\\n        }\\n    }\\n\\n    /// @notice Update reward variables of the given pool\\n    /// @param _pid The index of the pool. See `poolInfo`\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        uint256 lastRewardTimestamp = pool.lastRewardTimestamp;\\n        if (block.timestamp > lastRewardTimestamp) {\\n            uint256 lpSupply = pool.totalLpSupply;\\n            uint256 allocPoint = pool.allocPoint;\\n            // gas opt and prevent div by 0\\n            if (lpSupply != 0 && allocPoint != 0) {\\n                uint256 secondsElapsed = block.timestamp - lastRewardTimestamp;\\n                uint256 veJoeShareBp = pool.veJoeShareBp;\\n                uint256 totalFactor = pool.totalFactor;\\n\\n                uint256 joeReward = secondsElapsed.mul(joePerSec()).mul(allocPoint).div(totalAllocPoint);\\n                pool.accJoePerShare = pool.accJoePerShare.add(\\n                    joeReward.mul(ACC_TOKEN_PRECISION).mul(10_000 - veJoeShareBp).div(lpSupply.mul(10_000))\\n                );\\n                // If veJoeShareBp is 0, then we don't need to update it\\n                if (veJoeShareBp != 0 && totalFactor != 0) {\\n                    pool.accJoePerFactorPerShare = pool.accJoePerFactorPerShare.add(\\n                        joeReward.mul(ACC_TOKEN_PRECISION).mul(veJoeShareBp).div(totalFactor.mul(10_000))\\n                    );\\n                }\\n            }\\n            pool.lastRewardTimestamp = uint64(block.timestamp);\\n            emit UpdatePool(\\n                _pid,\\n                pool.lastRewardTimestamp,\\n                lpSupply,\\n                pool.accJoePerShare,\\n                pool.accJoePerFactorPerShare\\n            );\\n        }\\n    }\\n\\n    /// @notice Harvests JOE from `MASTER_CHEF_V2` MCJV2 and pool `MASTER_PID` to this BMCJ contract\\n    function harvestFromMasterChef() public {\\n        MASTER_CHEF_V2.deposit(MASTER_PID, 0);\\n    }\\n\\n    /// @notice Return an user's factor\\n    /// @param amount The user's amount of liquidity\\n    /// @param veJoeBalance The user's veJoe balance\\n    /// @return uint256 The user's factor\\n    function _getUserFactor(uint256 amount, uint256 veJoeBalance) private pure returns (uint256) {\\n        return Math.sqrt(amount * veJoeBalance);\\n    }\\n\\n    /// @notice Updates user and pool infos\\n    /// @param _user The user that needs to be updated\\n    /// @param _pool The pool that needs to be updated\\n    /// @param _amount The amount that was deposited or withdrawn\\n    /// @param _isDeposit If the action of the user is a deposit\\n    function _updateUserAndPool(\\n        UserInfo storage _user,\\n        PoolInfo storage _pool,\\n        uint256 _amount,\\n        bool _isDeposit\\n    ) private {\\n        uint256 oldAmount = _user.amount;\\n        uint256 newAmount = _isDeposit ? oldAmount.add(_amount) : oldAmount.sub(_amount);\\n\\n        if (_amount != 0) {\\n            _user.amount = newAmount;\\n            _pool.totalLpSupply = _isDeposit ? _pool.totalLpSupply.add(_amount) : _pool.totalLpSupply.sub(_amount);\\n        }\\n\\n        uint256 oldFactor = _user.factor;\\n        uint256 newFactor = _getUserFactor(newAmount, VEJOE.balanceOf(_msgSender()));\\n\\n        if (oldFactor != newFactor) {\\n            _user.factor = newFactor;\\n            _pool.totalFactor = _pool.totalFactor.add(newFactor).sub(oldFactor);\\n        }\\n\\n        _user.rewardDebt = newAmount.mul(_pool.accJoePerShare).add(newFactor.mul(_pool.accJoePerFactorPerShare)).div(\\n            ACC_TOKEN_PRECISION\\n        );\\n    }\\n\\n    /// @notice Harvests user's pending JOE\\n    /// @dev WARNING this function doesn't update user's rewardDebt,\\n    /// it still needs to be updated in order for this contract to work properlly\\n    /// @param _user The user that will harvest its rewards\\n    /// @param _pool The pool where the user staked and want to harvest its JOE\\n    /// @param _pid The pid of that pool\\n    function _harvestJoe(\\n        UserInfo storage _user,\\n        PoolInfo storage _pool,\\n        uint256 _pid\\n    ) private {\\n        uint256 pending = (_user.amount.mul(_pool.accJoePerShare))\\n            .add(_user.factor.mul(_pool.accJoePerFactorPerShare))\\n            .div(ACC_TOKEN_PRECISION)\\n            .add(claimableJoe[_pid][_msgSender()])\\n            .sub(_user.rewardDebt);\\n        claimableJoe[_pid][_msgSender()] = 0;\\n        if (pending != 0) {\\n            JOE.safeTransfer(_msgSender(), pending);\\n            emit Harvest(_msgSender(), _pid, pending);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07b2fa5b6e1908287993981116c290010207b032c7939d474d82de7a8939362f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    // EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa3fb82796e80f566a5c47f9a1f2ade7de7f390dfdc06bea5375112b9f9314f40\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChefJoe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\nimport \\\"../libraries/BoringJoeERC20.sol\\\";\\n\\ninterface IMasterChefJoe {\\n    using BoringJoeERC20 for IERC20;\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. JOE to distribute per block.\\n        uint256 lastRewardTimestamp; // Last block number that JOE distribution occurs.\\n        uint256 accJoePerShare; // Accumulated JOE per share, times 1e12. See below.\\n    }\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (IMasterChefJoe.UserInfo memory);\\n\\n    function poolInfo(uint256 pid) external view returns (IMasterChefJoe.PoolInfo memory);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function joePerSec() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function devPercent() external view returns (uint256);\\n\\n    function treasuryPercent() external view returns (uint256);\\n\\n    function investorPercent() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb18428293ce121ecc0c22f0006afae7479b30ae1beea2c68cae84bc1f35ffe01\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IRewarder {\\n    function onJoeReward(address user, uint256 newLpAmount) external;\\n\\n    function pendingTokens(address user) external view returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x6857a5100414324d25e30951c5809590857e162bf6fa99f64e6d7c15712e6d82\",\"license\":\"MIT\"},\"contracts/libraries/BoringJoeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringJoeERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4622b7ea576f1d9f4d6d0c1efea64ad9faa71527be18c4425a45110494524b19\",\"license\":\"MIT\"},\"contracts/traderjoe/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183fe2327968b823f987cceadb2089442a922e4fcd062294ad5f68ca448fd293\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506134bb806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063630b5ba1116100de578063cf756fdf11610097578063e76fdb7e11610071578063e76fdb7e146102ed578063f2fde38b146102f5578063ffcd426314610308578063ffebad301461032b57610173565b8063cf756fdf146102b4578063d00ffa8e146102c7578063e2bbb158146102da57610173565b8063630b5ba11461025f578063715018a6146102675780638da5cb5b1461026f57806393f1a40b14610277578063980e5f9014610299578063ca418d23146102ac57610173565b80634f00a93e116101305780634f00a93e146102035780634f70b15a1461021657806351eb05a61461021e5780635312ea8e14610231578063561be05a1461024457806361621aaa1461025757610173565b8063081e3eda146101785780631526fe271461019657806317caf6f1146101be57806319ab453c146101c657806327bf88ad146101db578063441a3e70146101f0575b600080fd5b610180610333565b60405161018d919061333a565b60405180910390f35b6101a96101a4366004612cba565b610339565b60405161018d99989796959493929190612ebb565b6101806103ba565b6101d96101d4366004612b0e565b6103c0565b005b6101e3610685565b60405161018d9190612e6a565b6101d96101fe366004612d19565b610694565b6101d9610211366004612b2a565b610863565b6101d9610a41565b6101d961022c366004612cba565b610aa9565b6101d961023f366004612cba565b610c58565b6101d9610252366004612db4565b610e05565b6101806111e3565b6101d96111e9565b6101d961120c565b6101e361128b565b61028a610285366004612cea565b61129a565b60405161018d9392919061338c565b6101d96102a7366004612d3a565b6112c6565b6101806114c6565b6101d96102c2366004612b8d565b611802565b6101806102d5366004612cea565b6118de565b6101d96102e8366004612d19565b6118fb565b6101e3611bad565b6101d9610303366004612b0e565b611bbc565b61031b610316366004612cea565b611c73565b60405161018d9493929190613343565b6101e3612058565b609b5490565b609b818154811061034657fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b038086169750600160a01b9095046001600160601b031695939492936001600160401b03831693600160401b84041692600160e01b900463ffffffff169189565b609e5481565b6103c8612067565b6033546001600160a01b039081169116146103fe5760405162461bcd60e51b81526004016103f59061324e565b60405180910390fd5b6097546040516370a0823160e01b81526001600160a01b03838116926370a08231926104309290911690600401612e6a565b60206040518083038186803b15801561044857600080fd5b505afa15801561045c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104809190612cd2565b1561049d5760405162461bcd60e51b81526004016103f5906130be565b6000816001600160a01b03166370a082316104b6612067565b6040518263ffffffff1660e01b81526004016104d29190612e6a565b60206040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190612cd2565b9050806105415760405162461bcd60e51b81526004016103f590613283565b61055e61054c612067565b6001600160a01b03841690308461206b565b60975460405163095ea7b360e01b81526001600160a01b038481169263095ea7b39261059292909116908590600401612e7e565b602060405180830381600087803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e49190612b55565b50609754609a54604051631c57762b60e31b81526001600160a01b039092169163e2bbb1589161061891859060040161337e565b600060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b505050507f387d06ac3b54c0ade104e08db87887286d162da416d27a605fc64e4f26c0133881604051610679919061333a565b60405180910390a15050565b6097546001600160a01b031681565b600260655414156106b75760405162461bcd60e51b81526004016103f590613303565b60026065556106c4610a41565b6106cd82610aa9565b6000609b83815481106106dc57fe5b60009182526020808320868452609d90915260408320600690920201925081610703612067565b6001600160a01b03166001600160a01b03168152602001908152602001600020905082816000015410156107495760405162461bcd60e51b81526004016103f590613178565b80541561075b5761075b818386612164565b6107688183856000612287565b610785610773612067565b83546001600160a01b031690856123e7565b6003820154600160401b90046001600160a01b0316801561080e57806001600160a01b0316631a7af8b06107b7612067565b84546040516001600160e01b031960e085901b1681526107db929190600401612e7e565b600060405180830381600087803b1580156107f557600080fd5b505af1158015610809573d6000803e3d6000fd5b505050505b84610817612067565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688660405161084f919061333a565b60405180910390a350506001606555505050565b6099546001600160a01b0316610877612067565b6001600160a01b03161461089d5760405162461bcd60e51b81526004016103f590612ffd565b609b54609f5460005b82811015610a3a576000818152609d602090815260408083206001600160a01b038916845290915290208054806108de575050610a32565b6000609b84815481106108ed57fe5b9060005260206000209060060201905061090684610aa9565b60028084015460018084015492840154908601549192916000906109519061094b8b61094561093589886124d6565b61093f8c8a6124d6565b90612519565b9061253e565b90612580565b905061099c8160a060008b815260200190815260200160002060008f6001600160a01b03166001600160a01b031681526020019081526020016000205461251990919063ffffffff16565b60a060008a815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000208190555060006109e2878d6125c2565b600289018190556004870154909150610a0190869061094b9084612519565b6004870155610a218a610945610a1784876124d6565b61093f8b896124d6565b886001018190555050505050505050505b6001016108a6565b5050505050565b609754609a54604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891610a759160009060040161337e565b600060405180830381600087803b158015610a8f57600080fd5b505af1158015610aa3573d6000803e3d6000fd5b50505050565b6000609b8281548110610ab857fe5b6000918252602090912060069091020160038101549091506001600160401b031642811015610c535760058201548254600160a01b90046001600160601b03168115801590610b0657508015155b15610be45760038401546004850154609e544286900392600160e01b900463ffffffff169190600090610b4f9061094587610b49610b426114c6565b89906124d6565b906124d6565b9050610b8b610b80610b63886127106124d6565b6109458661271003610b49609f54876124d690919063ffffffff16565b60018a015490612519565b60018901558215801590610b9e57508115155b15610bdf57610bd9610bce610bb5846127106124d6565b61094586610b49609f54876124d690919063ffffffff16565b60028a015490612519565b60028901555b505050505b60038401805467ffffffffffffffff1916426001600160401b0390811691909117918290556001860154600287015460405189947f3a15998b7576ed92447b3dd03767c4977c339833be8a90fc16caa7653db12e6e94610c489491169288926133a2565b60405180910390a250505b505050565b60026065541415610c7b5760405162461bcd60e51b81526004016103f590613303565b60026065819055506000609b8281548110610c9257fe5b60009182526020808320858452609d90915260408320600690920201925081610cb9612067565b6001600160a01b03166001600160a01b031681526020019081526020016000209050610cf68160020154836004015461258090919063ffffffff16565b600483015580546005830154610d0b91612580565b6005830155805460008083556001830181905560028301556003830154600160401b90046001600160a01b03168015610da757806001600160a01b0316631a7af8b0610d55612067565b60006040518363ffffffff1660e01b8152600401610d74929190612e7e565b600060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b505050505b610dc4610db2612067565b85546001600160a01b031690846123e7565b84610dcd612067565b6001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958460405161084f919061333a565b610e0d612067565b6033546001600160a01b03908116911614610e3a5760405162461bcd60e51b81526004016103f59061324e565b6001600160a01b0382166000908152609c602052604090205460ff1615610e735760405162461bcd60e51b81526004016103f590612f3a565b6127108363ffffffff161115610e9b5760405162461bcd60e51b81526004016103f59061311b565b609b5460321015610ebe5760405162461bcd60e51b81526004016103f59061307a565b6001600160a01b0382166000818152609c602052604090819020805460ff19166001179055516370a0823160e01b81526370a0823190610f02903090600401612e6a565b60206040518083038186803b158015610f1a57600080fd5b505afa158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f529190612cd2565b506001600160a01b03811615610fc4576040516301a7af8b60e41b81526001600160a01b03821690631a7af8b090610f91906000908190600401612e7e565b600060405180830381600087803b158015610fab57600080fd5b505af1158015610fbf573d6000803e3d6000fd5b505050505b610fcc6111e9565b609e54610fe2906001600160601b038616612519565b609e81905550609b604051806101200160405280846001600160a01b03168152602001866001600160601b031681526020016000815260200160008152602001426001600160401b03168152602001836001600160a01b031681526020018563ffffffff168152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a8154816001600160601b0302191690836001600160601b03160217905550604082015181600101556060820151816002015560808201518160030160006101000a8154816001600160401b0302191690836001600160401b0316021790555060a08201518160030160086101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c082015181600301601c6101000a81548163ffffffff021916908363ffffffff16021790555060e0820151816004015561010082015181600501555050806001600160a01b0316826001600160a01b03166001609b80549050037ffa7db60584eedcec543415482c572116ee7545102bc1e1ca9e5219ff0ea3be3287876040516111d59291906133c8565b60405180910390a450505050565b609a5481565b609b5460005b818110156112085761120081610aa9565b6001016111ef565b5050565b611214612067565b6033546001600160a01b039081169116146112415760405162461bcd60e51b81526004016103f59061324e565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b609d60209081526000928352604080842090915290825290208054600182015460029092015490919083565b6112ce612067565b6033546001600160a01b039081169116146112fb5760405162461bcd60e51b81526004016103f59061324e565b6127108363ffffffff1611156113235760405162461bcd60e51b81526004016103f59061311b565b61132b6111e9565b6000609b868154811061133a57fe5b600091825260209091206006909102018054609e54919250611375916001600160601b03600160a01b90920482169161094b91908916612519565b609e5580546001600160a01b0316600160a01b6001600160601b038716021781556003810180546001600160e01b0316600160e01b63ffffffff8716021790558115611458576001600160a01b0383161561142c576040516301a7af8b60e41b81526001600160a01b03841690631a7af8b0906113f9906000908190600401612e7e565b600060405180830381600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b505050505b60038101805468010000000000000000600160e01b031916600160401b6001600160a01b038616021790555b81611477576003810154600160401b90046001600160a01b0316611479565b825b6001600160a01b0316867f0db1d9531544c4edebc3104fe894a7e82c00bd1b9a676053351b0d86d4ebbd4d8787866040516114b6939291906133e7565b60405180910390a3505050505050565b6097546040805162e6b64160e31b815290516000926103e892849261164e926001600160a01b031691630735b208916004808301926020929190829003018186803b15801561151457600080fd5b505afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c9190612cd2565b60975460408051629df3ab60e31b8152905161094b926001600160a01b0316916304ef9d58916004808301926020929190829003018186803b15801561159157600080fd5b505afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190612cd2565b6097546040805163fc3c28af60e01b8152905161094b926001600160a01b03169163fc3c28af916004808301926020929190829003018186803b15801561160f57600080fd5b505afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190612cd2565b8790612580565b905060006116e08361094584609760009054906101000a90046001600160a01b03166001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a857600080fd5b505afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b499190612cd2565b90506117fa609760009054906101000a90046001600160a01b03166001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561173357600080fd5b505afa158015611747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176b9190612cd2565b609754609a54604051631526fe2760e01b8152610945926001600160a01b031691631526fe279161179f919060040161333a565b60806040518083038186803b1580156117b757600080fd5b505afa1580156117cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ef9190612c68565b6020015184906124d6565b935050505090565b600054610100900460ff168061181b575061181b6125cf565b80611829575060005460ff16155b6118455760405162461bcd60e51b81526004016103f5906131bf565b600054610100900460ff16158015611870576000805460ff1961ff0019909116610100171660011790555b6118786125d5565b609780546001600160a01b038088166001600160a01b031992831617909255609880548784169083161790556099805492861692909116919091179055609a829055670de0b6b3a7640000609f558015610a3a576000805461ff00191690555050505050565b60a060209081526000928352604080842090915290825290205481565b6002606554141561191e5760405162461bcd60e51b81526004016103f590613303565b600260655561192b610a41565b61193482610aa9565b6000609b838154811061194357fe5b60009182526020808320868452609d9091526040832060069092020192508161196a612067565b6001600160a01b03168152602081019190915260400160002080549091501561199857611998818386612164565b81546040516370a0823160e01b81526000916001600160a01b0316906370a08231906119c8903090600401612e6a565b60206040518083038186803b1580156119e057600080fd5b505afa1580156119f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a189190612cd2565b9050611a38611a25612067565b84546001600160a01b031690308761206b565b82546040516370a0823160e01b8152600091611abe9184916001600160a01b0316906370a0823190611a6e903090600401612e6a565b60206040518083038186803b158015611a8657600080fd5b505afa158015611a9a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190612cd2565b9050611acd8385836001612287565b6003840154600160401b90046001600160a01b03168015611b5657806001600160a01b0316631a7af8b0611aff612067565b86546040516001600160e01b031960e085901b168152611b23929190600401612e7e565b600060405180830381600087803b158015611b3d57600080fd5b505af1158015611b51573d6000803e3d6000fd5b505050505b86611b5f612067565b6001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1584604051611b97919061333a565b60405180910390a3505060016065555050505050565b6099546001600160a01b031681565b611bc4612067565b6033546001600160a01b03908116911614611bf15760405162461bcd60e51b81526004016103f59061324e565b6001600160a01b038116611c175760405162461bcd60e51b81526004016103f590612fb7565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60008060606000611c82612aa1565b609b8781548110611c8f57fe5b6000918252602091829020604080516101208101825260069390930290910180546001600160a01b038082168552600160a01b9091046001600160601b0316948401949094526001810154918301919091526002810154606083015260038101546001600160401b0381166080840152600160401b810490931660a0830152600160e01b90920463ffffffff1660c0820152600482015460e08201526005909101546101008201529050611d41612aed565b506000878152609d602090815260408083206001600160a01b038a1684528252918290208251606080820185528254825260018301549382019390935260029091015481840152918301519083015160808401516001600160401b031642118015611db0575061010084015115155b8015611dc8575060208401516001600160601b031615155b15611ed057600084608001516001600160401b0316420390506000611e0c609e5461094588602001516001600160601b0316610b49611e056114c6565b87906124d6565b9050611e5c611e55611e2e6127108961010001516124d690919063ffffffff16565b6109458960c001516127100363ffffffff16610b49609f54876124d690919063ffffffff16565b8590612519565b93508560c0015163ffffffff16600014158015611e7c575060e086015115155b15611ecd57611eca611ec3611ea06127108960e001516124d690919063ffffffff16565b6109458960c0015163ffffffff16610b49609f54876124d690919063ffffffff16565b8490612519565b92505b50505b60208084015160008c815260a0835260408082206001600160a01b038e16835290935282902054609f5492860151611f269361094b929161093f919061094590611f1a90896124d6565b8a5161093f908b6124d6565b60a08501519098506001600160a01b03161561204b578360a001516001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7957600080fd5b505afa158015611f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb19190612b71565b9650611fc5876001600160a01b0316612668565b60a085015160405163c031a66f60e01b81529197506001600160a01b03169063c031a66f90611ff8908c90600401612e6a565b60206040518083038186803b15801561201057600080fd5b505afa158015612024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120489190612cd2565b94505b5050505092959194509250565b6098546001600160a01b031681565b3390565b60006060856001600160a01b03166323b872dd60e01b86868660405160240161209693929190612e97565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516120d49190612e4e565b6000604051808303816000865af19150503d8060008114612111576040519150601f19603f3d011682016040523d82523d6000602084013e612116565b606091505b50915091508180156121405750805115806121405750808060200190518101906121409190612b55565b61215c5760405162461bcd60e51b81526004016103f5906132ce565b505050505050565b6001830154600082815260a06020526040812090916121df9161094b908461218a612067565b6001600160a01b03166001600160a01b031681526020019081526020016000205461093f609f546109456121cf8a600201548c600201546124d690919063ffffffff16565b60018b01548c5461093f916124d6565b600083815260a06020526040812091925090816121fa612067565b6001600160a01b031681526020810191909152604001600020558015610aa357612238612225612067565b6098546001600160a01b031690836123e7565b81612241612067565b6001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495483604051612279919061333a565b60405180910390a350505050565b835460008261229f5761229a8285612580565b6122a9565b6122a98285612519565b905083156122e257808655826122cd5760058501546122c89085612580565b6122dc565b60058501546122dc9085612519565b60058601555b600286015460995460009061237a9084906001600160a01b03166370a08231612309612067565b6040518263ffffffff1660e01b81526004016123259190612e6a565b60206040518083038186803b15801561233d57600080fd5b505afa158015612351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123759190612cd2565b6125c2565b90508082146123a55760028801819055600487015461239f90839061094b9084612519565b60048801555b6123d5609f546109456123c58a60020154856124d690919063ffffffff16565b60018b015461093f9088906124d6565b88600101819055505050505050505050565b60006060846001600160a01b031663a9059cbb60e01b8585604051602401612410929190612e7e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161244e9190612e4e565b6000604051808303816000865af19150503d806000811461248b576040519150601f19603f3d011682016040523d82523d6000602084013e612490565b606091505b50915091508180156124ba5750805115806124ba5750808060200190518101906124ba9190612b55565b610a3a5760405162461bcd60e51b81526004016103f590612f80565b6000826124e557506000612513565b828202828482816124f257fe5b04146125105760405162461bcd60e51b81526004016103f59061320d565b90505b92915050565b6000828201838110156125105760405162461bcd60e51b81526004016103f590613043565b600061251083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061272d565b600061251083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612764565b6000612510828402612790565b303b1590565b600054610100900460ff16806125ee57506125ee6125cf565b806125fc575060005460ff16155b6126185760405162461bcd60e51b81526004016103f5906131bf565b600054610100900460ff16158015612643576000805460ff1961ff0019909116610100171660011790555b61264b6127e1565b612653612862565b8015612665576000805461ff00191690555b50565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b038616916126af9190612e4e565b600060405180830381855afa9150503d80600081146126ea576040519150601f19603f3d011682016040523d82523d6000602084013e6126ef565b606091505b50915091508161271a57604051806040016040528060038152602001623f3f3f60e81b815250612723565b6127238161293c565b925050505b919050565b6000818361274e5760405162461bcd60e51b81526004016103f59190612f27565b50600083858161275a57fe5b0495945050505050565b600081848411156127885760405162461bcd60e51b81526004016103f59190612f27565b505050900390565b600060038211156127d3575080600160028204015b818110156127cd578091506002818285816127bc57fe5b0401816127c557fe5b0490506127a5565b50612728565b811561272857506001919050565b600054610100900460ff16806127fa57506127fa6125cf565b80612808575060005460ff16155b6128245760405162461bcd60e51b81526004016103f5906131bf565b600054610100900460ff16158015612653576000805460ff1961ff0019909116610100171660011790558015612665576000805461ff001916905550565b600054610100900460ff168061287b575061287b6125cf565b80612889575060005460ff16155b6128a55760405162461bcd60e51b81526004016103f5906131bf565b600054610100900460ff161580156128d0576000805460ff1961ff0019909116610100171660011790555b60006128da612067565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015612665576000805461ff001916905550565b60606040825110612962578180602001905181019061295b9190612bdd565b9050612728565b815160201415612a815760005b60208160ff1610801561299e5750828160ff168151811061298c57fe5b01602001516001600160f81b03191615155b156129ab5760010161296f565b60608160ff166001600160401b03811180156129c657600080fd5b506040519080825280601f01601f1916602001820160405280156129f1576020820181803683370190505b509050600091505b60208260ff16108015612a285750838260ff1681518110612a1657fe5b01602001516001600160f81b03191615155b15612a7857838260ff1681518110612a3c57fe5b602001015160f81c60f81b818360ff1681518110612a5657fe5b60200101906001600160f81b031916908160001a9053506001909101906129f9565b91506127289050565b506040805180820190915260038152623f3f3f60e81b6020820152612728565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b60405180606001604052806000815260200160008152602001600081525090565b600060208284031215612b1f578081fd5b813561251081613462565b60008060408385031215612b3c578081fd5b8235612b4781613462565b946020939093013593505050565b600060208284031215612b66578081fd5b815161251081613477565b600060208284031215612b82578081fd5b815161251081613462565b60008060008060808587031215612ba2578182fd5b8435612bad81613462565b93506020850135612bbd81613462565b92506040850135612bcd81613462565b9396929550929360600135925050565b600060208284031215612bee578081fd5b81516001600160401b0380821115612c04578283fd5b818401915084601f830112612c17578283fd5b815181811115612c25578384fd5b612c38601f8201601f1916602001613410565b9150808252856020828501011115612c4e578384fd5b612c5f816020840160208601613436565b50949350505050565b600060808284031215612c79578081fd5b612c836080613410565b8251612c8e81613462565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215612ccb578081fd5b5035919050565b600060208284031215612ce3578081fd5b5051919050565b60008060408385031215612cfc578182fd5b823591506020830135612d0e81613462565b809150509250929050565b60008060408385031215612d2b578182fd5b50508035926020909101359150565b600080600080600060a08688031215612d51578081fd5b8535945060208601356001600160601b0381168114612d6e578182fd5b9350604086013563ffffffff81168114612d86578182fd5b92506060860135612d9681613462565b91506080860135612da681613477565b809150509295509295909350565b60008060008060808587031215612dc9578182fd5b84356001600160601b0381168114612ddf578283fd5b9350602085013563ffffffff81168114612df7578283fd5b92506040850135612e0781613462565b91506060850135612e1781613462565b939692955090935050565b60008151808452612e3a816020860160208601613436565b601f01601f19169290920160200192915050565b60008251612e60818460208701613436565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03998a1681526001600160601b03989098166020890152604088019690965260608701949094526001600160401b0392909216608086015290941660a084015263ffffffff90931660c083015260e08201929092526101008101919091526101200190565b6000602082526125106020830184612e22565b60208082526026908201527f426f6f737465644d6173746572436865664a6f653a204c5020616c726561647960408201526508185919195960d21b606082015260800190565b6020808252601c908201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f426f6f737465644d6173746572436865664a6f653a2043616c6c6572206e6f746040820152652076654a4f4560d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526024908201527f426f6f737465644d6173746572436865664a6f653a20546f6f206d616e7920706040820152636f6f6c7360e01b606082015260800190565b6020808252603a908201527f426f6f737465644d6173746572436865664a6f653a20416c726561647920686160408201527f7320612062616c616e6365206f662064756d6d7920746f6b656e000000000000606082015260800190565b6020808252603f908201527f426f6f737465644d6173746572436865664a6f653a2076654a6f65536861726560408201527f4270206e6565647320746f206265206c6f776572207468616e20313030303000606082015260800190565b60208082526027908201527f426f6f737465644d6173746572436865664a6f653a207769746864726177206e6040820152661bdd0819dbdbd960ca1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f426f6f737465644d6173746572436865664a6f653a2042616c616e6365206d7560408201526a073742065786365656420360ac1b606082015260800190565b6020808252818101527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b8481526001600160a01b038416602082015260806040820181905260009061336d90830185612e22565b905082606083015295945050505050565b918252602082015260400190565b9283526020830191909152604082015260600190565b6001600160401b0394909416845260208401929092526040830152606082015260800190565b6001600160601b0392909216825263ffffffff16602082015260400190565b6001600160601b0393909316835263ffffffff9190911660208301521515604082015260600190565b6040518181016001600160401b038111828210171561342e57600080fd5b604052919050565b60005b83811015613451578181015183820152602001613439565b83811115610aa35750506000910152565b6001600160a01b038116811461266557600080fd5b801515811461266557600080fdfea2646970667358221220433aece9b7c96dc9deda5b40097d3332fd3734e8a8723fdd9016607e3ca051a164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c8063630b5ba1116100de578063cf756fdf11610097578063e76fdb7e11610071578063e76fdb7e146102ed578063f2fde38b146102f5578063ffcd426314610308578063ffebad301461032b57610173565b8063cf756fdf146102b4578063d00ffa8e146102c7578063e2bbb158146102da57610173565b8063630b5ba11461025f578063715018a6146102675780638da5cb5b1461026f57806393f1a40b14610277578063980e5f9014610299578063ca418d23146102ac57610173565b80634f00a93e116101305780634f00a93e146102035780634f70b15a1461021657806351eb05a61461021e5780635312ea8e14610231578063561be05a1461024457806361621aaa1461025757610173565b8063081e3eda146101785780631526fe271461019657806317caf6f1146101be57806319ab453c146101c657806327bf88ad146101db578063441a3e70146101f0575b600080fd5b610180610333565b60405161018d919061333a565b60405180910390f35b6101a96101a4366004612cba565b610339565b60405161018d99989796959493929190612ebb565b6101806103ba565b6101d96101d4366004612b0e565b6103c0565b005b6101e3610685565b60405161018d9190612e6a565b6101d96101fe366004612d19565b610694565b6101d9610211366004612b2a565b610863565b6101d9610a41565b6101d961022c366004612cba565b610aa9565b6101d961023f366004612cba565b610c58565b6101d9610252366004612db4565b610e05565b6101806111e3565b6101d96111e9565b6101d961120c565b6101e361128b565b61028a610285366004612cea565b61129a565b60405161018d9392919061338c565b6101d96102a7366004612d3a565b6112c6565b6101806114c6565b6101d96102c2366004612b8d565b611802565b6101806102d5366004612cea565b6118de565b6101d96102e8366004612d19565b6118fb565b6101e3611bad565b6101d9610303366004612b0e565b611bbc565b61031b610316366004612cea565b611c73565b60405161018d9493929190613343565b6101e3612058565b609b5490565b609b818154811061034657fe5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b038086169750600160a01b9095046001600160601b031695939492936001600160401b03831693600160401b84041692600160e01b900463ffffffff169189565b609e5481565b6103c8612067565b6033546001600160a01b039081169116146103fe5760405162461bcd60e51b81526004016103f59061324e565b60405180910390fd5b6097546040516370a0823160e01b81526001600160a01b03838116926370a08231926104309290911690600401612e6a565b60206040518083038186803b15801561044857600080fd5b505afa15801561045c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104809190612cd2565b1561049d5760405162461bcd60e51b81526004016103f5906130be565b6000816001600160a01b03166370a082316104b6612067565b6040518263ffffffff1660e01b81526004016104d29190612e6a565b60206040518083038186803b1580156104ea57600080fd5b505afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190612cd2565b9050806105415760405162461bcd60e51b81526004016103f590613283565b61055e61054c612067565b6001600160a01b03841690308461206b565b60975460405163095ea7b360e01b81526001600160a01b038481169263095ea7b39261059292909116908590600401612e7e565b602060405180830381600087803b1580156105ac57600080fd5b505af11580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e49190612b55565b50609754609a54604051631c57762b60e31b81526001600160a01b039092169163e2bbb1589161061891859060040161337e565b600060405180830381600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b505050507f387d06ac3b54c0ade104e08db87887286d162da416d27a605fc64e4f26c0133881604051610679919061333a565b60405180910390a15050565b6097546001600160a01b031681565b600260655414156106b75760405162461bcd60e51b81526004016103f590613303565b60026065556106c4610a41565b6106cd82610aa9565b6000609b83815481106106dc57fe5b60009182526020808320868452609d90915260408320600690920201925081610703612067565b6001600160a01b03166001600160a01b03168152602001908152602001600020905082816000015410156107495760405162461bcd60e51b81526004016103f590613178565b80541561075b5761075b818386612164565b6107688183856000612287565b610785610773612067565b83546001600160a01b031690856123e7565b6003820154600160401b90046001600160a01b0316801561080e57806001600160a01b0316631a7af8b06107b7612067565b84546040516001600160e01b031960e085901b1681526107db929190600401612e7e565b600060405180830381600087803b1580156107f557600080fd5b505af1158015610809573d6000803e3d6000fd5b505050505b84610817612067565b6001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688660405161084f919061333a565b60405180910390a350506001606555505050565b6099546001600160a01b0316610877612067565b6001600160a01b03161461089d5760405162461bcd60e51b81526004016103f590612ffd565b609b54609f5460005b82811015610a3a576000818152609d602090815260408083206001600160a01b038916845290915290208054806108de575050610a32565b6000609b84815481106108ed57fe5b9060005260206000209060060201905061090684610aa9565b60028084015460018084015492840154908601549192916000906109519061094b8b61094561093589886124d6565b61093f8c8a6124d6565b90612519565b9061253e565b90612580565b905061099c8160a060008b815260200190815260200160002060008f6001600160a01b03166001600160a01b031681526020019081526020016000205461251990919063ffffffff16565b60a060008a815260200190815260200160002060008e6001600160a01b03166001600160a01b031681526020019081526020016000208190555060006109e2878d6125c2565b600289018190556004870154909150610a0190869061094b9084612519565b6004870155610a218a610945610a1784876124d6565b61093f8b896124d6565b886001018190555050505050505050505b6001016108a6565b5050505050565b609754609a54604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891610a759160009060040161337e565b600060405180830381600087803b158015610a8f57600080fd5b505af1158015610aa3573d6000803e3d6000fd5b50505050565b6000609b8281548110610ab857fe5b6000918252602090912060069091020160038101549091506001600160401b031642811015610c535760058201548254600160a01b90046001600160601b03168115801590610b0657508015155b15610be45760038401546004850154609e544286900392600160e01b900463ffffffff169190600090610b4f9061094587610b49610b426114c6565b89906124d6565b906124d6565b9050610b8b610b80610b63886127106124d6565b6109458661271003610b49609f54876124d690919063ffffffff16565b60018a015490612519565b60018901558215801590610b9e57508115155b15610bdf57610bd9610bce610bb5846127106124d6565b61094586610b49609f54876124d690919063ffffffff16565b60028a015490612519565b60028901555b505050505b60038401805467ffffffffffffffff1916426001600160401b0390811691909117918290556001860154600287015460405189947f3a15998b7576ed92447b3dd03767c4977c339833be8a90fc16caa7653db12e6e94610c489491169288926133a2565b60405180910390a250505b505050565b60026065541415610c7b5760405162461bcd60e51b81526004016103f590613303565b60026065819055506000609b8281548110610c9257fe5b60009182526020808320858452609d90915260408320600690920201925081610cb9612067565b6001600160a01b03166001600160a01b031681526020019081526020016000209050610cf68160020154836004015461258090919063ffffffff16565b600483015580546005830154610d0b91612580565b6005830155805460008083556001830181905560028301556003830154600160401b90046001600160a01b03168015610da757806001600160a01b0316631a7af8b0610d55612067565b60006040518363ffffffff1660e01b8152600401610d74929190612e7e565b600060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b505050505b610dc4610db2612067565b85546001600160a01b031690846123e7565b84610dcd612067565b6001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958460405161084f919061333a565b610e0d612067565b6033546001600160a01b03908116911614610e3a5760405162461bcd60e51b81526004016103f59061324e565b6001600160a01b0382166000908152609c602052604090205460ff1615610e735760405162461bcd60e51b81526004016103f590612f3a565b6127108363ffffffff161115610e9b5760405162461bcd60e51b81526004016103f59061311b565b609b5460321015610ebe5760405162461bcd60e51b81526004016103f59061307a565b6001600160a01b0382166000818152609c602052604090819020805460ff19166001179055516370a0823160e01b81526370a0823190610f02903090600401612e6a565b60206040518083038186803b158015610f1a57600080fd5b505afa158015610f2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f529190612cd2565b506001600160a01b03811615610fc4576040516301a7af8b60e41b81526001600160a01b03821690631a7af8b090610f91906000908190600401612e7e565b600060405180830381600087803b158015610fab57600080fd5b505af1158015610fbf573d6000803e3d6000fd5b505050505b610fcc6111e9565b609e54610fe2906001600160601b038616612519565b609e81905550609b604051806101200160405280846001600160a01b03168152602001866001600160601b031681526020016000815260200160008152602001426001600160401b03168152602001836001600160a01b031681526020018563ffffffff168152602001600081526020016000815250908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a8154816001600160601b0302191690836001600160601b03160217905550604082015181600101556060820151816002015560808201518160030160006101000a8154816001600160401b0302191690836001600160401b0316021790555060a08201518160030160086101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c082015181600301601c6101000a81548163ffffffff021916908363ffffffff16021790555060e0820151816004015561010082015181600501555050806001600160a01b0316826001600160a01b03166001609b80549050037ffa7db60584eedcec543415482c572116ee7545102bc1e1ca9e5219ff0ea3be3287876040516111d59291906133c8565b60405180910390a450505050565b609a5481565b609b5460005b818110156112085761120081610aa9565b6001016111ef565b5050565b611214612067565b6033546001600160a01b039081169116146112415760405162461bcd60e51b81526004016103f59061324e565b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b609d60209081526000928352604080842090915290825290208054600182015460029092015490919083565b6112ce612067565b6033546001600160a01b039081169116146112fb5760405162461bcd60e51b81526004016103f59061324e565b6127108363ffffffff1611156113235760405162461bcd60e51b81526004016103f59061311b565b61132b6111e9565b6000609b868154811061133a57fe5b600091825260209091206006909102018054609e54919250611375916001600160601b03600160a01b90920482169161094b91908916612519565b609e5580546001600160a01b0316600160a01b6001600160601b038716021781556003810180546001600160e01b0316600160e01b63ffffffff8716021790558115611458576001600160a01b0383161561142c576040516301a7af8b60e41b81526001600160a01b03841690631a7af8b0906113f9906000908190600401612e7e565b600060405180830381600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b505050505b60038101805468010000000000000000600160e01b031916600160401b6001600160a01b038616021790555b81611477576003810154600160401b90046001600160a01b0316611479565b825b6001600160a01b0316867f0db1d9531544c4edebc3104fe894a7e82c00bd1b9a676053351b0d86d4ebbd4d8787866040516114b6939291906133e7565b60405180910390a3505050505050565b6097546040805162e6b64160e31b815290516000926103e892849261164e926001600160a01b031691630735b208916004808301926020929190829003018186803b15801561151457600080fd5b505afa158015611528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154c9190612cd2565b60975460408051629df3ab60e31b8152905161094b926001600160a01b0316916304ef9d58916004808301926020929190829003018186803b15801561159157600080fd5b505afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190612cd2565b6097546040805163fc3c28af60e01b8152905161094b926001600160a01b03169163fc3c28af916004808301926020929190829003018186803b15801561160f57600080fd5b505afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190612cd2565b8790612580565b905060006116e08361094584609760009054906101000a90046001600160a01b03166001600160a01b031663ca418d236040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a857600080fd5b505afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b499190612cd2565b90506117fa609760009054906101000a90046001600160a01b03166001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561173357600080fd5b505afa158015611747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176b9190612cd2565b609754609a54604051631526fe2760e01b8152610945926001600160a01b031691631526fe279161179f919060040161333a565b60806040518083038186803b1580156117b757600080fd5b505afa1580156117cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ef9190612c68565b6020015184906124d6565b935050505090565b600054610100900460ff168061181b575061181b6125cf565b80611829575060005460ff16155b6118455760405162461bcd60e51b81526004016103f5906131bf565b600054610100900460ff16158015611870576000805460ff1961ff0019909116610100171660011790555b6118786125d5565b609780546001600160a01b038088166001600160a01b031992831617909255609880548784169083161790556099805492861692909116919091179055609a829055670de0b6b3a7640000609f558015610a3a576000805461ff00191690555050505050565b60a060209081526000928352604080842090915290825290205481565b6002606554141561191e5760405162461bcd60e51b81526004016103f590613303565b600260655561192b610a41565b61193482610aa9565b6000609b838154811061194357fe5b60009182526020808320868452609d9091526040832060069092020192508161196a612067565b6001600160a01b03168152602081019190915260400160002080549091501561199857611998818386612164565b81546040516370a0823160e01b81526000916001600160a01b0316906370a08231906119c8903090600401612e6a565b60206040518083038186803b1580156119e057600080fd5b505afa1580156119f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a189190612cd2565b9050611a38611a25612067565b84546001600160a01b031690308761206b565b82546040516370a0823160e01b8152600091611abe9184916001600160a01b0316906370a0823190611a6e903090600401612e6a565b60206040518083038186803b158015611a8657600080fd5b505afa158015611a9a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b9190612cd2565b9050611acd8385836001612287565b6003840154600160401b90046001600160a01b03168015611b5657806001600160a01b0316631a7af8b0611aff612067565b86546040516001600160e01b031960e085901b168152611b23929190600401612e7e565b600060405180830381600087803b158015611b3d57600080fd5b505af1158015611b51573d6000803e3d6000fd5b505050505b86611b5f612067565b6001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1584604051611b97919061333a565b60405180910390a3505060016065555050505050565b6099546001600160a01b031681565b611bc4612067565b6033546001600160a01b03908116911614611bf15760405162461bcd60e51b81526004016103f59061324e565b6001600160a01b038116611c175760405162461bcd60e51b81526004016103f590612fb7565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60008060606000611c82612aa1565b609b8781548110611c8f57fe5b6000918252602091829020604080516101208101825260069390930290910180546001600160a01b038082168552600160a01b9091046001600160601b0316948401949094526001810154918301919091526002810154606083015260038101546001600160401b0381166080840152600160401b810490931660a0830152600160e01b90920463ffffffff1660c0820152600482015460e08201526005909101546101008201529050611d41612aed565b506000878152609d602090815260408083206001600160a01b038a1684528252918290208251606080820185528254825260018301549382019390935260029091015481840152918301519083015160808401516001600160401b031642118015611db0575061010084015115155b8015611dc8575060208401516001600160601b031615155b15611ed057600084608001516001600160401b0316420390506000611e0c609e5461094588602001516001600160601b0316610b49611e056114c6565b87906124d6565b9050611e5c611e55611e2e6127108961010001516124d690919063ffffffff16565b6109458960c001516127100363ffffffff16610b49609f54876124d690919063ffffffff16565b8590612519565b93508560c0015163ffffffff16600014158015611e7c575060e086015115155b15611ecd57611eca611ec3611ea06127108960e001516124d690919063ffffffff16565b6109458960c0015163ffffffff16610b49609f54876124d690919063ffffffff16565b8490612519565b92505b50505b60208084015160008c815260a0835260408082206001600160a01b038e16835290935282902054609f5492860151611f269361094b929161093f919061094590611f1a90896124d6565b8a5161093f908b6124d6565b60a08501519098506001600160a01b03161561204b578360a001516001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7957600080fd5b505afa158015611f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb19190612b71565b9650611fc5876001600160a01b0316612668565b60a085015160405163c031a66f60e01b81529197506001600160a01b03169063c031a66f90611ff8908c90600401612e6a565b60206040518083038186803b15801561201057600080fd5b505afa158015612024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120489190612cd2565b94505b5050505092959194509250565b6098546001600160a01b031681565b3390565b60006060856001600160a01b03166323b872dd60e01b86868660405160240161209693929190612e97565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516120d49190612e4e565b6000604051808303816000865af19150503d8060008114612111576040519150601f19603f3d011682016040523d82523d6000602084013e612116565b606091505b50915091508180156121405750805115806121405750808060200190518101906121409190612b55565b61215c5760405162461bcd60e51b81526004016103f5906132ce565b505050505050565b6001830154600082815260a06020526040812090916121df9161094b908461218a612067565b6001600160a01b03166001600160a01b031681526020019081526020016000205461093f609f546109456121cf8a600201548c600201546124d690919063ffffffff16565b60018b01548c5461093f916124d6565b600083815260a06020526040812091925090816121fa612067565b6001600160a01b031681526020810191909152604001600020558015610aa357612238612225612067565b6098546001600160a01b031690836123e7565b81612241612067565b6001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae066092495483604051612279919061333a565b60405180910390a350505050565b835460008261229f5761229a8285612580565b6122a9565b6122a98285612519565b905083156122e257808655826122cd5760058501546122c89085612580565b6122dc565b60058501546122dc9085612519565b60058601555b600286015460995460009061237a9084906001600160a01b03166370a08231612309612067565b6040518263ffffffff1660e01b81526004016123259190612e6a565b60206040518083038186803b15801561233d57600080fd5b505afa158015612351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123759190612cd2565b6125c2565b90508082146123a55760028801819055600487015461239f90839061094b9084612519565b60048801555b6123d5609f546109456123c58a60020154856124d690919063ffffffff16565b60018b015461093f9088906124d6565b88600101819055505050505050505050565b60006060846001600160a01b031663a9059cbb60e01b8585604051602401612410929190612e7e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161244e9190612e4e565b6000604051808303816000865af19150503d806000811461248b576040519150601f19603f3d011682016040523d82523d6000602084013e612490565b606091505b50915091508180156124ba5750805115806124ba5750808060200190518101906124ba9190612b55565b610a3a5760405162461bcd60e51b81526004016103f590612f80565b6000826124e557506000612513565b828202828482816124f257fe5b04146125105760405162461bcd60e51b81526004016103f59061320d565b90505b92915050565b6000828201838110156125105760405162461bcd60e51b81526004016103f590613043565b600061251083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061272d565b600061251083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612764565b6000612510828402612790565b303b1590565b600054610100900460ff16806125ee57506125ee6125cf565b806125fc575060005460ff16155b6126185760405162461bcd60e51b81526004016103f5906131bf565b600054610100900460ff16158015612643576000805460ff1961ff0019909116610100171660011790555b61264b6127e1565b612653612862565b8015612665576000805461ff00191690555b50565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b038616916126af9190612e4e565b600060405180830381855afa9150503d80600081146126ea576040519150601f19603f3d011682016040523d82523d6000602084013e6126ef565b606091505b50915091508161271a57604051806040016040528060038152602001623f3f3f60e81b815250612723565b6127238161293c565b925050505b919050565b6000818361274e5760405162461bcd60e51b81526004016103f59190612f27565b50600083858161275a57fe5b0495945050505050565b600081848411156127885760405162461bcd60e51b81526004016103f59190612f27565b505050900390565b600060038211156127d3575080600160028204015b818110156127cd578091506002818285816127bc57fe5b0401816127c557fe5b0490506127a5565b50612728565b811561272857506001919050565b600054610100900460ff16806127fa57506127fa6125cf565b80612808575060005460ff16155b6128245760405162461bcd60e51b81526004016103f5906131bf565b600054610100900460ff16158015612653576000805460ff1961ff0019909116610100171660011790558015612665576000805461ff001916905550565b600054610100900460ff168061287b575061287b6125cf565b80612889575060005460ff16155b6128a55760405162461bcd60e51b81526004016103f5906131bf565b600054610100900460ff161580156128d0576000805460ff1961ff0019909116610100171660011790555b60006128da612067565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015612665576000805461ff001916905550565b60606040825110612962578180602001905181019061295b9190612bdd565b9050612728565b815160201415612a815760005b60208160ff1610801561299e5750828160ff168151811061298c57fe5b01602001516001600160f81b03191615155b156129ab5760010161296f565b60608160ff166001600160401b03811180156129c657600080fd5b506040519080825280601f01601f1916602001820160405280156129f1576020820181803683370190505b509050600091505b60208260ff16108015612a285750838260ff1681518110612a1657fe5b01602001516001600160f81b03191615155b15612a7857838260ff1681518110612a3c57fe5b602001015160f81c60f81b818360ff1681518110612a5657fe5b60200101906001600160f81b031916908160001a9053506001909101906129f9565b91506127289050565b506040805180820190915260038152623f3f3f60e81b6020820152612728565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b60405180606001604052806000815260200160008152602001600081525090565b600060208284031215612b1f578081fd5b813561251081613462565b60008060408385031215612b3c578081fd5b8235612b4781613462565b946020939093013593505050565b600060208284031215612b66578081fd5b815161251081613477565b600060208284031215612b82578081fd5b815161251081613462565b60008060008060808587031215612ba2578182fd5b8435612bad81613462565b93506020850135612bbd81613462565b92506040850135612bcd81613462565b9396929550929360600135925050565b600060208284031215612bee578081fd5b81516001600160401b0380821115612c04578283fd5b818401915084601f830112612c17578283fd5b815181811115612c25578384fd5b612c38601f8201601f1916602001613410565b9150808252856020828501011115612c4e578384fd5b612c5f816020840160208601613436565b50949350505050565b600060808284031215612c79578081fd5b612c836080613410565b8251612c8e81613462565b808252506020830151602082015260408301516040820152606083015160608201528091505092915050565b600060208284031215612ccb578081fd5b5035919050565b600060208284031215612ce3578081fd5b5051919050565b60008060408385031215612cfc578182fd5b823591506020830135612d0e81613462565b809150509250929050565b60008060408385031215612d2b578182fd5b50508035926020909101359150565b600080600080600060a08688031215612d51578081fd5b8535945060208601356001600160601b0381168114612d6e578182fd5b9350604086013563ffffffff81168114612d86578182fd5b92506060860135612d9681613462565b91506080860135612da681613477565b809150509295509295909350565b60008060008060808587031215612dc9578182fd5b84356001600160601b0381168114612ddf578283fd5b9350602085013563ffffffff81168114612df7578283fd5b92506040850135612e0781613462565b91506060850135612e1781613462565b939692955090935050565b60008151808452612e3a816020860160208601613436565b601f01601f19169290920160200192915050565b60008251612e60818460208701613436565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03998a1681526001600160601b03989098166020890152604088019690965260608701949094526001600160401b0392909216608086015290941660a084015263ffffffff90931660c083015260e08201929092526101008101919091526101200190565b6000602082526125106020830184612e22565b60208082526026908201527f426f6f737465644d6173746572436865664a6f653a204c5020616c726561647960408201526508185919195960d21b606082015260800190565b6020808252601c908201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f426f6f737465644d6173746572436865664a6f653a2043616c6c6572206e6f746040820152652076654a4f4560d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526024908201527f426f6f737465644d6173746572436865664a6f653a20546f6f206d616e7920706040820152636f6f6c7360e01b606082015260800190565b6020808252603a908201527f426f6f737465644d6173746572436865664a6f653a20416c726561647920686160408201527f7320612062616c616e6365206f662064756d6d7920746f6b656e000000000000606082015260800190565b6020808252603f908201527f426f6f737465644d6173746572436865664a6f653a2076654a6f65536861726560408201527f4270206e6565647320746f206265206c6f776572207468616e20313030303000606082015260800190565b60208082526027908201527f426f6f737465644d6173746572436865664a6f653a207769746864726177206e6040820152661bdd0819dbdbd960ca1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f426f6f737465644d6173746572436865664a6f653a2042616c616e6365206d7560408201526a073742065786365656420360ac1b606082015260800190565b6020808252818101527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b8481526001600160a01b038416602082015260806040820181905260009061336d90830185612e22565b905082606083015295945050505050565b918252602082015260400190565b9283526020830191909152604082015260600190565b6001600160401b0394909416845260208401929092526040830152606082015260800190565b6001600160601b0392909216825263ffffffff16602082015260400190565b6001600160601b0393909316835263ffffffff9190911660208301521515604082015260600190565b6040518181016001600160401b038111828210171561342e57600080fd5b604052919050565b60005b83811015613451578181015183820152602001613439565b83811115610aa35750506000910152565b6001600160a01b038116811461266557600080fd5b801515811461266557600080fdfea2646970667358221220433aece9b7c96dc9deda5b40097d3332fd3734e8a8723fdd9016607e3ca051a164736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint96,uint32,address,address)": {
        "params": {
          "_allocPoint": "AP of the new pool.",
          "_lpToken": "Address of the LP ERC-20 token.",
          "_rewarder": "Address of the rewarder delegate.",
          "_veJoeShareBp": "Share of rewards allocated in proportion to user's liquidity and veJoe balance"
        }
      },
      "deposit(uint256,uint256)": {
        "params": {
          "_amount": "LP token amount to deposit",
          "_pid": "The index of the pool. See `poolInfo`"
        }
      },
      "emergencyWithdraw(uint256)": {
        "params": {
          "_pid": "The index of the pool. See `poolInfo`"
        }
      },
      "init(address)": {
        "params": {
          "_dummyToken": "The address of the ERC-20 token to deposit into MCJV2."
        }
      },
      "initialize(address,address,address,uint256)": {
        "params": {
          "_MASTER_CHEF_V2": "The MCJV2 contract address",
          "_MASTER_PID": "The pool ID of the dummy token on the base MCJV2 contract",
          "_joe": "The JOE token contract address",
          "_veJoe": "The veJOE token contract address"
        }
      },
      "joePerSec()": {
        "returns": {
          "amount": "The amount of JOE emitted per second"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingTokens(uint256,address)": {
        "params": {
          "_pid": "The index of the pool. See `poolInfo`",
          "_user": "Address of user"
        },
        "returns": {
          "bonusTokenAddress": "The address of the bonus reward.",
          "bonusTokenSymbol": "The symbol of the bonus token.",
          "pendingBonusToken": "The amount of bonus rewards pending.",
          "pendingJoe": "JOE reward for a given user."
        }
      },
      "poolLength()": {
        "returns": {
          "pools": "The amount of pools in this farm"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "set(uint256,uint96,uint32,address,bool)": {
        "params": {
          "_allocPoint": "New AP of the pool",
          "_overwrite": "True if _rewarder should be `set`. Otherwise `_rewarder` is ignored",
          "_pid": "The index of the pool. See `poolInfo`",
          "_rewarder": "Address of the rewarder delegate",
          "_veJoeShareBp": "Share of rewards allocated in proportion to user's liquidity and veJoe balance"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateFactor(address,uint256)": {
        "params": {
          "_newVeJoeBalance": "The new balance of the users veJoe",
          "_user": "The users address we are updating"
        }
      },
      "updatePool(uint256)": {
        "params": {
          "_pid": "The index of the pool. See `poolInfo`"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "LP token amount to withdraw",
          "_pid": "The index of the pool. See `poolInfo`"
        }
      }
    },
    "stateVariables": {
      "checkPoolDuplicate": {
        "details": "Maps an address to a bool to assert that a token isn't added twice"
      },
      "claimableJoe": {
        "details": "Amount of claimable Joe the user has, this is required as we need to update rewardDebt after a token operation but we don't want to send a reward at this point. This amount gets added onto the pending amount when a user claims"
      },
      "totalAllocPoint": {
        "details": "Total allocation points. Must be the sum of all allocation points in all pools"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "JOE()": {
        "notice": "Address of JOE contract"
      },
      "MASTER_CHEF_V2()": {
        "notice": "Address of MCJV2 contract"
      },
      "MASTER_PID()": {
        "notice": "The index of BMCJ master pool in MCJV2"
      },
      "VEJOE()": {
        "notice": "Address of veJOE contract"
      },
      "add(uint96,uint32,address,address)": {
        "notice": "Add a new LP to the pool. Can only be called by the owner."
      },
      "deposit(uint256,uint256)": {
        "notice": "Deposit LP tokens to BMCJ for JOE allocation"
      },
      "emergencyWithdraw(uint256)": {
        "notice": "Withdraw without caring about rewards (EMERGENCY ONLY)"
      },
      "harvestFromMasterChef()": {
        "notice": "Harvests JOE from `MASTER_CHEF_V2` MCJV2 and pool `MASTER_PID` to this BMCJ contract"
      },
      "init(address)": {
        "notice": "Deposits a dummy token to `MASTER_CHEF_V2` MCJV2. This is required because MCJV2 holds the minting rights for JOE.  Any balance of transaction sender in `_dummyToken` is transferred. The allocation point for the pool on MCJV2 is the total allocation point for all pools that receive double incentives."
      },
      "joePerSec()": {
        "notice": "Calculates and returns the `amount` of JOE per second"
      },
      "massUpdatePools()": {
        "notice": "Update reward variables for all pools. Be careful of gas spending!"
      },
      "pendingTokens(uint256,address)": {
        "notice": "View function to see pending JOE on frontend"
      },
      "poolInfo(uint256)": {
        "notice": "Info of each BMCJ pool"
      },
      "poolLength()": {
        "notice": "Returns the number of BMCJ pools."
      },
      "set(uint256,uint96,uint32,address,bool)": {
        "notice": "Update the given pool's JOE allocation point and `IRewarder` contract. Can only be called by the owner."
      },
      "updateFactor(address,uint256)": {
        "notice": "Updates factor after after a veJoe token operation. This function needs to be called by the veJoe contract after every mint / burn."
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool"
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each user that stakes LP tokens"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraw LP tokens from BMCJ"
      }
    },
    "notice": "The (older) MasterChefJoeV2 contract gives out a constant number of JOE tokens per block.  It is the only address with minting rights for JOE.  The idea for this BoostedMasterChefJoe (BMCJ) contract is therefore to be the owner of a dummy token that is deposited into the MasterChefJoeV2 (MCJV2) contract.  The allocation point for this pool on MCJV2 is the total allocation point for all pools on BMCJ. This MasterChef also skews how many rewards users receive, it does this by modifying the algorithm that calculates how many tokens are rewarded to depositors. Whereas MasterChef calculates rewards based on emission rate and total liquidity, this version uses adjusted parameters to this calculation. A users `boostedAmount` (liquidity multiplier) is calculated by the actual supplied liquidity multiplied by a boost factor. The boost factor is calculated by the amount of veJOE held by the user over the total veJOE amount held by all pool participants. Total liquidity is the sum of all boosted liquidity.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 376,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 379,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 43,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 55,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 173,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 455,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 498,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2795,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "MASTER_CHEF_V2",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IMasterChefJoe)18694"
      },
      {
        "astId": 2798,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "JOE",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IERC20)18533"
      },
      {
        "astId": 2801,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "VEJOE",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IERC20)18533"
      },
      {
        "astId": 2804,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "MASTER_PID",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 2808,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "poolInfo",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_struct(PoolInfo)2792_storage)dyn_storage"
      },
      {
        "astId": 2813,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "checkPoolDuplicate",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_contract(IERC20)18533,t_bool)"
      },
      {
        "astId": 2820,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "userInfo",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2773_storage))"
      },
      {
        "astId": 2823,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 2825,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "ACC_TOKEN_PRECISION",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 2832,
        "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
        "label": "claimableJoe",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)2792_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)2792_storage",
        "encoding": "dynamic_array",
        "label": "struct BoostedMasterChefJoe.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)18533": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChefJoe)18694": {
        "encoding": "inplace",
        "label": "contract IMasterChefJoe",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)18743": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)2773_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BoostedMasterChefJoe.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2773_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)18533,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)18533",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2773_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct BoostedMasterChefJoe.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)2773_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_struct(PoolInfo)2792_storage": {
        "encoding": "inplace",
        "label": "struct BoostedMasterChefJoe.PoolInfo",
        "members": [
          {
            "astId": 2775,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)18533"
          },
          {
            "astId": 2777,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "allocPoint",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          },
          {
            "astId": 2779,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "accJoePerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2781,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "accJoePerFactorPerShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2783,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 2785,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "rewarder",
            "offset": 8,
            "slot": "3",
            "type": "t_contract(IRewarder)18743"
          },
          {
            "astId": 2787,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "veJoeShareBp",
            "offset": 28,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 2789,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "totalFactor",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2791,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "totalLpSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UserInfo)2773_storage": {
        "encoding": "inplace",
        "label": "struct BoostedMasterChefJoe.UserInfo",
        "members": [
          {
            "astId": 2768,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2770,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2772,
            "contract": "contracts/BoostedMasterChefJoe.sol:BoostedMasterChefJoe",
            "label": "factor",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}